{"ast":null,"code":"'use strict';\n\nconst BaseGuildEmoji = require('./BaseGuildEmoji');\n\nconst {\n  Error\n} = require('../errors');\n\nconst GuildEmojiRoleManager = require('../managers/GuildEmojiRoleManager');\n\nconst Permissions = require('../util/Permissions');\n/**\n * Represents a custom emoji.\n * @extends {BaseGuildEmoji}\n */\n\n\nclass GuildEmoji extends BaseGuildEmoji {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APIEmoji} data The data for the guild emoji\n   * @param {Guild} guild The guild the guild emoji is part of\n   */\n  constructor(client, data, guild) {\n    super(client, data, guild);\n    /**\n     * The user who created this emoji\n     * @type {?User}\n     */\n\n    this.author = null;\n    /**\n     * Array of role ids this emoji is active for\n     * @name GuildEmoji#_roles\n     * @type {Snowflake[]}\n     * @private\n     */\n\n    Object.defineProperty(this, '_roles', {\n      value: [],\n      writable: true\n    });\n  }\n  /**\n   * The guild this emoji is part of\n   * @type {Guild}\n   * @name GuildEmoji#guild\n   */\n\n\n  _clone() {\n    const clone = super._clone();\n\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if (data.user) this.author = this.client.users._add(data.user);\n    if (data.roles) this._roles = data.roles;\n  }\n  /**\n   * Whether the emoji is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get deletable() {\n    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return !this.managed && this.guild.me.permissions.has(Permissions.FLAGS.MANAGE_EMOJIS_AND_STICKERS);\n  }\n  /**\n   * A manager for roles this emoji is active for.\n   * @type {GuildEmojiRoleManager}\n   * @readonly\n   */\n\n\n  get roles() {\n    return new GuildEmojiRoleManager(this);\n  }\n  /**\n   * Fetches the author for this emoji\n   * @returns {Promise<User>}\n   */\n\n\n  async fetchAuthor() {\n    if (this.managed) {\n      throw new Error('EMOJI_MANAGED');\n    } else {\n      if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n\n      if (!this.guild.me.permissions.has(Permissions.FLAGS.MANAGE_EMOJIS_AND_STICKERS)) {\n        throw new Error('MISSING_MANAGE_EMOJIS_AND_STICKERS_PERMISSION', this.guild);\n      }\n    }\n\n    const data = await this.client.api.guilds(this.guild.id).emojis(this.id).get();\n\n    this._patch(data);\n\n    return this.author;\n  }\n  /**\n   * Data for editing an emoji.\n   * @typedef {Object} GuildEmojiEditData\n   * @property {string} [name] The name of the emoji\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] Roles to restrict emoji to\n   */\n\n  /**\n   * Edits the emoji.\n   * @param {GuildEmojiEditData} data The new data for the emoji\n   * @param {string} [reason] Reason for editing this emoji\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Edit an emoji\n   * emoji.edit({ name: 'newemoji' })\n   *   .then(e => console.log(`Edited emoji ${e}`))\n   *   .catch(console.error);\n   */\n\n\n  async edit(data, reason) {\n    const roles = data.roles?.map(r => r.id ?? r);\n    const newData = await this.client.api.guilds(this.guild.id).emojis(this.id).patch({\n      data: {\n        name: data.name,\n        roles\n      },\n      reason\n    });\n\n    const clone = this._clone();\n\n    clone._patch(newData);\n\n    return clone;\n  }\n  /**\n   * Sets the name of the emoji.\n   * @param {string} name The new name for the emoji\n   * @param {string} [reason] Reason for changing the emoji's name\n   * @returns {Promise<GuildEmoji>}\n   */\n\n\n  setName(name, reason) {\n    return this.edit({\n      name\n    }, reason);\n  }\n  /**\n   * Deletes the emoji.\n   * @param {string} [reason] Reason for deleting the emoji\n   * @returns {Promise<GuildEmoji>}\n   */\n\n\n  async delete(reason) {\n    await this.client.api.guilds(this.guild.id).emojis(this.id).delete({\n      reason\n    });\n    return this;\n  }\n  /**\n   * Whether this emoji is the same as another one.\n   * @param {GuildEmoji|APIEmoji} other The emoji to compare it to\n   * @returns {boolean}\n   */\n\n\n  equals(other) {\n    if (other instanceof GuildEmoji) {\n      return other.id === this.id && other.name === this.name && other.managed === this.managed && other.available === this.available && other.requiresColons === this.requiresColons && other.roles.cache.size === this.roles.cache.size && other.roles.cache.every(role => this.roles.cache.has(role.id));\n    } else {\n      return other.id === this.id && other.name === this.name && other.roles.length === this.roles.cache.size && other.roles.every(role => this.roles.cache.has(role));\n    }\n  }\n\n}\n\nmodule.exports = GuildEmoji;","map":{"version":3,"names":["BaseGuildEmoji","require","Error","GuildEmojiRoleManager","Permissions","GuildEmoji","constructor","client","data","guild","author","Object","defineProperty","value","writable","_clone","clone","_roles","slice","_patch","user","users","_add","roles","deletable","me","managed","permissions","has","FLAGS","MANAGE_EMOJIS_AND_STICKERS","fetchAuthor","api","guilds","id","emojis","get","edit","reason","map","r","newData","patch","name","setName","delete","equals","other","available","requiresColons","cache","size","every","role","length","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/GuildEmoji.js"],"sourcesContent":["'use strict';\n\nconst BaseGuildEmoji = require('./BaseGuildEmoji');\nconst { Error } = require('../errors');\nconst GuildEmojiRoleManager = require('../managers/GuildEmojiRoleManager');\nconst Permissions = require('../util/Permissions');\n\n/**\n * Represents a custom emoji.\n * @extends {BaseGuildEmoji}\n */\nclass GuildEmoji extends BaseGuildEmoji {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APIEmoji} data The data for the guild emoji\n   * @param {Guild} guild The guild the guild emoji is part of\n   */\n  constructor(client, data, guild) {\n    super(client, data, guild);\n\n    /**\n     * The user who created this emoji\n     * @type {?User}\n     */\n    this.author = null;\n\n    /**\n     * Array of role ids this emoji is active for\n     * @name GuildEmoji#_roles\n     * @type {Snowflake[]}\n     * @private\n     */\n    Object.defineProperty(this, '_roles', { value: [], writable: true });\n  }\n\n  /**\n   * The guild this emoji is part of\n   * @type {Guild}\n   * @name GuildEmoji#guild\n   */\n\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  _patch(data) {\n    super._patch(data);\n\n    if (data.user) this.author = this.client.users._add(data.user);\n    if (data.roles) this._roles = data.roles;\n  }\n\n  /**\n   * Whether the emoji is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return !this.managed && this.guild.me.permissions.has(Permissions.FLAGS.MANAGE_EMOJIS_AND_STICKERS);\n  }\n\n  /**\n   * A manager for roles this emoji is active for.\n   * @type {GuildEmojiRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildEmojiRoleManager(this);\n  }\n\n  /**\n   * Fetches the author for this emoji\n   * @returns {Promise<User>}\n   */\n  async fetchAuthor() {\n    if (this.managed) {\n      throw new Error('EMOJI_MANAGED');\n    } else {\n      if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n      if (!this.guild.me.permissions.has(Permissions.FLAGS.MANAGE_EMOJIS_AND_STICKERS)) {\n        throw new Error('MISSING_MANAGE_EMOJIS_AND_STICKERS_PERMISSION', this.guild);\n      }\n    }\n    const data = await this.client.api.guilds(this.guild.id).emojis(this.id).get();\n    this._patch(data);\n    return this.author;\n  }\n\n  /**\n   * Data for editing an emoji.\n   * @typedef {Object} GuildEmojiEditData\n   * @property {string} [name] The name of the emoji\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] Roles to restrict emoji to\n   */\n\n  /**\n   * Edits the emoji.\n   * @param {GuildEmojiEditData} data The new data for the emoji\n   * @param {string} [reason] Reason for editing this emoji\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Edit an emoji\n   * emoji.edit({ name: 'newemoji' })\n   *   .then(e => console.log(`Edited emoji ${e}`))\n   *   .catch(console.error);\n   */\n  async edit(data, reason) {\n    const roles = data.roles?.map(r => r.id ?? r);\n    const newData = await this.client.api\n      .guilds(this.guild.id)\n      .emojis(this.id)\n      .patch({\n        data: {\n          name: data.name,\n          roles,\n        },\n        reason,\n      });\n    const clone = this._clone();\n    clone._patch(newData);\n    return clone;\n  }\n\n  /**\n   * Sets the name of the emoji.\n   * @param {string} name The new name for the emoji\n   * @param {string} [reason] Reason for changing the emoji's name\n   * @returns {Promise<GuildEmoji>}\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Deletes the emoji.\n   * @param {string} [reason] Reason for deleting the emoji\n   * @returns {Promise<GuildEmoji>}\n   */\n  async delete(reason) {\n    await this.client.api.guilds(this.guild.id).emojis(this.id).delete({ reason });\n    return this;\n  }\n\n  /**\n   * Whether this emoji is the same as another one.\n   * @param {GuildEmoji|APIEmoji} other The emoji to compare it to\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof GuildEmoji) {\n      return (\n        other.id === this.id &&\n        other.name === this.name &&\n        other.managed === this.managed &&\n        other.available === this.available &&\n        other.requiresColons === this.requiresColons &&\n        other.roles.cache.size === this.roles.cache.size &&\n        other.roles.cache.every(role => this.roles.cache.has(role.id))\n      );\n    } else {\n      return (\n        other.id === this.id &&\n        other.name === this.name &&\n        other.roles.length === this.roles.cache.size &&\n        other.roles.every(role => this.roles.cache.has(role))\n      );\n    }\n  }\n}\n\nmodule.exports = GuildEmoji;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}