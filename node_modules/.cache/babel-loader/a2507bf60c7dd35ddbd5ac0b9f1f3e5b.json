{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst Base = require('./Base');\n\nconst GuildPreviewEmoji = require('./GuildPreviewEmoji');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * Represents the data about the guild any bot can preview, connected to the specified guild.\n * @extends {Base}\n */\n\n\nclass GuildPreview extends Base {\n  constructor(client, data) {\n    super(client);\n    if (!data) return;\n\n    this._patch(data);\n  }\n  /**\n   * Builds the guild with the provided data.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n\n\n  _patch(data) {\n    /**\n     * The id of this guild\n     * @type {string}\n     */\n    this.id = data.id;\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The icon of this guild\n     * @type {?string}\n     */\n\n    this.icon = data.icon;\n    /**\n     * The splash icon of this guild\n     * @type {?string}\n     */\n\n    this.splash = data.splash;\n    /**\n     * The discovery splash icon of this guild\n     * @type {?string}\n     */\n\n    this.discoverySplash = data.discovery_splash;\n    /**\n     * An array of enabled guild features\n     * @type {Features[]}\n     */\n\n    this.features = data.features;\n    /**\n     * The approximate count of members in this guild\n     * @type {number}\n     */\n\n    this.approximateMemberCount = data.approximate_member_count;\n    /**\n     * The approximate count of online members in this guild\n     * @type {number}\n     */\n\n    this.approximatePresenceCount = data.approximate_presence_count;\n    /**\n     * The description for this guild\n     * @type {?string}\n     */\n\n    this.description = data.description ?? null;\n\n    if (!this.emojis) {\n      /**\n       * Collection of emojis belonging to this guild\n       * @type {Collection<Snowflake, GuildPreviewEmoji>}\n       */\n      this.emojis = new Collection();\n    } else {\n      this.emojis.clear();\n    }\n\n    for (const emoji of data.emojis) {\n      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n    }\n  }\n  /**\n   * The timestamp this guild was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time this guild was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * The URL to this guild's splash.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  splashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.splash && this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n  /**\n   * The URL to this guild's discovery splash.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  discoverySplashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.discoverySplash && this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  iconURL() {\n    let {\n      format,\n      size,\n      dynamic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.icon && this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n  /**\n   * Fetches this guild.\n   * @returns {Promise<GuildPreview>}\n   */\n\n\n  async fetch() {\n    const data = await this.client.api.guilds(this.id).preview.get();\n\n    this._patch(data);\n\n    return this;\n  }\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${previewGuild}!`);\n   */\n\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON();\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    return json;\n  }\n\n}\n\nmodule.exports = GuildPreview;","map":{"version":3,"names":["Collection","require","Base","GuildPreviewEmoji","SnowflakeUtil","GuildPreview","constructor","client","data","_patch","id","name","icon","splash","discoverySplash","discovery_splash","features","approximateMemberCount","approximate_member_count","approximatePresenceCount","approximate_presence_count","description","emojis","clear","emoji","set","createdTimestamp","deconstruct","timestamp","createdAt","Date","splashURL","format","size","rest","cdn","Splash","discoverySplashURL","DiscoverySplash","iconURL","dynamic","Icon","fetch","api","guilds","preview","get","toString","toJSON","json","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/GuildPreview.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\nconst GuildPreviewEmoji = require('./GuildPreviewEmoji');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * Represents the data about the guild any bot can preview, connected to the specified guild.\n * @extends {Base}\n */\nclass GuildPreview extends Base {\n  constructor(client, data) {\n    super(client);\n\n    if (!data) return;\n\n    this._patch(data);\n  }\n\n  /**\n   * Builds the guild with the provided data.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The id of this guild\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The icon of this guild\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * The splash icon of this guild\n     * @type {?string}\n     */\n    this.splash = data.splash;\n\n    /**\n     * The discovery splash icon of this guild\n     * @type {?string}\n     */\n    this.discoverySplash = data.discovery_splash;\n\n    /**\n     * An array of enabled guild features\n     * @type {Features[]}\n     */\n    this.features = data.features;\n\n    /**\n     * The approximate count of members in this guild\n     * @type {number}\n     */\n    this.approximateMemberCount = data.approximate_member_count;\n\n    /**\n     * The approximate count of online members in this guild\n     * @type {number}\n     */\n    this.approximatePresenceCount = data.approximate_presence_count;\n\n    /**\n     * The description for this guild\n     * @type {?string}\n     */\n    this.description = data.description ?? null;\n\n    if (!this.emojis) {\n      /**\n       * Collection of emojis belonging to this guild\n       * @type {Collection<Snowflake, GuildPreviewEmoji>}\n       */\n      this.emojis = new Collection();\n    } else {\n      this.emojis.clear();\n    }\n    for (const emoji of data.emojis) {\n      this.emojis.set(emoji.id, new GuildPreviewEmoji(this.client, emoji, this));\n    }\n  }\n  /**\n   * The timestamp this guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time this guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The URL to this guild's splash.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  splashURL({ format, size } = {}) {\n    return this.splash && this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n\n  /**\n   * The URL to this guild's discovery splash.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  discoverySplashURL({ format, size } = {}) {\n    return this.discoverySplash && this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  iconURL({ format, size, dynamic } = {}) {\n    return this.icon && this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetch() {\n    const data = await this.client.api.guilds(this.id).preview.get();\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from My Guild!\n   * console.log(`Hello from ${previewGuild}!`);\n   */\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    const json = super.toJSON();\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    return json;\n  }\n}\n\nmodule.exports = GuildPreview;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}