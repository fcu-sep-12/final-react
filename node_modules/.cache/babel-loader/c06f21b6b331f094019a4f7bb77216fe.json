{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * The base class for {@link Guild}, {@link OAuth2Guild} and {@link InviteGuild}.\n * @extends {Base}\n * @abstract\n */\n\n\nclass BaseGuild extends Base {\n  constructor(client, data) {\n    super(client);\n    /**\n     * The guild's id\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The icon hash of this guild\n     * @type {?string}\n     */\n\n    this.icon = data.icon;\n    /**\n     * An array of features available to this guild\n     * @type {Features[]}\n     */\n\n    this.features = data.features;\n  }\n  /**\n   * The timestamp this guild was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time this guild was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * The acronym that shows up in place of a guild icon\n   * @type {string}\n   * @readonly\n   */\n\n\n  get nameAcronym() {\n    return this.name.replace(/'s /g, ' ').replace(/\\w+/g, e => e[0]).replace(/\\s/g, '');\n  }\n  /**\n   * Whether this guild is partnered\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partnered() {\n    return this.features.includes('PARTNERED');\n  }\n  /**\n   * Whether this guild is verified\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get verified() {\n    return this.features.includes('VERIFIED');\n  }\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  iconURL() {\n    let {\n      format,\n      size,\n      dynamic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.icon) return null;\n    return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n  /**\n   * Fetches this guild.\n   * @returns {Promise<Guild>}\n   */\n\n\n  async fetch() {\n    const data = await this.client.api.guilds(this.id).get({\n      query: {\n        with_counts: true\n      }\n    });\n    return this.client.guilds._add(data);\n  }\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   */\n\n\n  toString() {\n    return this.name;\n  }\n\n}\n\nmodule.exports = BaseGuild;","map":{"version":3,"names":["Base","require","SnowflakeUtil","BaseGuild","constructor","client","data","id","name","icon","features","createdTimestamp","deconstruct","timestamp","createdAt","Date","nameAcronym","replace","e","partnered","includes","verified","iconURL","format","size","dynamic","rest","cdn","Icon","fetch","api","guilds","get","query","with_counts","_add","toString","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/BaseGuild.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * The base class for {@link Guild}, {@link OAuth2Guild} and {@link InviteGuild}.\n * @extends {Base}\n * @abstract\n */\nclass BaseGuild extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The guild's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The name of this guild\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The icon hash of this guild\n     * @type {?string}\n     */\n    this.icon = data.icon;\n\n    /**\n     * An array of features available to this guild\n     * @type {Features[]}\n     */\n    this.features = data.features;\n  }\n\n  /**\n   * The timestamp this guild was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time this guild was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The acronym that shows up in place of a guild icon\n   * @type {string}\n   * @readonly\n   */\n  get nameAcronym() {\n    return this.name\n      .replace(/'s /g, ' ')\n      .replace(/\\w+/g, e => e[0])\n      .replace(/\\s/g, '');\n  }\n\n  /**\n   * Whether this guild is partnered\n   * @type {boolean}\n   * @readonly\n   */\n  get partnered() {\n    return this.features.includes('PARTNERED');\n  }\n\n  /**\n   * Whether this guild is verified\n   * @type {boolean}\n   * @readonly\n   */\n  get verified() {\n    return this.features.includes('VERIFIED');\n  }\n\n  /**\n   * The URL to this guild's icon.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  iconURL({ format, size, dynamic } = {}) {\n    if (!this.icon) return null;\n    return this.client.rest.cdn.Icon(this.id, this.icon, format, size, dynamic);\n  }\n\n  /**\n   * Fetches this guild.\n   * @returns {Promise<Guild>}\n   */\n  async fetch() {\n    const data = await this.client.api.guilds(this.id).get({ query: { with_counts: true } });\n    return this.client.guilds._add(data);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the guild's name instead of the Guild object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n}\n\nmodule.exports = BaseGuild;\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,uBAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAME,SAAN,SAAwBH,IAAxB,CAA6B;EAC3BI,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACxB,MAAMD,MAAN;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,EAAL,GAAUD,IAAI,CAACC,EAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,IAAL,GAAYF,IAAI,CAACE,IAAjB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,IAAL,GAAYH,IAAI,CAACG,IAAjB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,QAAL,GAAgBJ,IAAI,CAACI,QAArB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACsB,IAAhBC,gBAAgB,GAAG;IACrB,OAAOT,aAAa,CAACU,WAAd,CAA0B,KAAKL,EAA/B,EAAmCM,SAA1C;EACD;EAED;AACF;AACA;AACA;AACA;;;EACe,IAATC,SAAS,GAAG;IACd,OAAO,IAAIC,IAAJ,CAAS,KAAKJ,gBAAd,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACiB,IAAXK,WAAW,GAAG;IAChB,OAAO,KAAKR,IAAL,CACJS,OADI,CACI,MADJ,EACY,GADZ,EAEJA,OAFI,CAEI,MAFJ,EAEYC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAFlB,EAGJD,OAHI,CAGI,KAHJ,EAGW,EAHX,CAAP;EAID;EAED;AACF;AACA;AACA;AACA;;;EACe,IAATE,SAAS,GAAG;IACd,OAAO,KAAKT,QAAL,CAAcU,QAAd,CAAuB,WAAvB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,IAARC,QAAQ,GAAG;IACb,OAAO,KAAKX,QAAL,CAAcU,QAAd,CAAuB,UAAvB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,OAAO,GAAiC;IAAA,IAAhC;MAAEC,MAAF;MAAUC,IAAV;MAAgBC;IAAhB,CAAgC,uEAAJ,EAAI;IACtC,IAAI,CAAC,KAAKhB,IAAV,EAAgB,OAAO,IAAP;IAChB,OAAO,KAAKJ,MAAL,CAAYqB,IAAZ,CAAiBC,GAAjB,CAAqBC,IAArB,CAA0B,KAAKrB,EAA/B,EAAmC,KAAKE,IAAxC,EAA8Cc,MAA9C,EAAsDC,IAAtD,EAA4DC,OAA5D,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACa,MAALI,KAAK,GAAG;IACZ,MAAMvB,IAAI,GAAG,MAAM,KAAKD,MAAL,CAAYyB,GAAZ,CAAgBC,MAAhB,CAAuB,KAAKxB,EAA5B,EAAgCyB,GAAhC,CAAoC;MAAEC,KAAK,EAAE;QAAEC,WAAW,EAAE;MAAf;IAAT,CAApC,CAAnB;IACA,OAAO,KAAK7B,MAAL,CAAY0B,MAAZ,CAAmBI,IAAnB,CAAwB7B,IAAxB,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACE8B,QAAQ,GAAG;IACT,OAAO,KAAK5B,IAAZ;EACD;;AAtG0B;;AAyG7B6B,MAAM,CAACC,OAAP,GAAiBnC,SAAjB"},"metadata":{},"sourceType":"script"}