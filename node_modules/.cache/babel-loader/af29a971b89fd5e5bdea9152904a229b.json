{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  Events\n} = require('../util/Constants');\n\nconst DataResolver = require('../util/DataResolver');\n/**\n * Represents the template for a guild.\n * @extends {Base}\n */\n\n\nclass GuildTemplate extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APIGuildTemplate} data The raw data for the template\n   */\n  constructor(client, data) {\n    super(client);\n\n    this._patch(data);\n  }\n  /**\n   * Builds or updates the template with the provided data.\n   * @param {APIGuildTemplate} data The raw data for the template\n   * @returns {GuildTemplate}\n   * @private\n   */\n\n\n  _patch(data) {\n    /**\n     * The unique code of this template\n     * @type {string}\n     */\n    this.code = data.code;\n    /**\n     * The name of this template\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The description of this template\n     * @type {?string}\n     */\n\n    this.description = data.description;\n    /**\n     * The amount of times this template has been used\n     * @type {number}\n     */\n\n    this.usageCount = data.usage_count;\n    /**\n     * The id of the user that created this template\n     * @type {Snowflake}\n     */\n\n    this.creatorId = data.creator_id;\n    /**\n     * The user that created this template\n     * @type {User}\n     */\n\n    this.creator = this.client.users._add(data.creator);\n    /**\n     * The time of when this template was created at\n     * @type {Date}\n     */\n\n    this.createdAt = new Date(data.created_at);\n    /**\n     * The time of when this template was last synced to the guild\n     * @type {Date}\n     */\n\n    this.updatedAt = new Date(data.updated_at);\n    /**\n     * The id of the guild that this template belongs to\n     * @type {Snowflake}\n     */\n\n    this.guildId = data.source_guild_id;\n    /**\n     * The data of the guild that this template would create\n     * @type {APIGuild}\n     */\n\n    this.serializedGuild = data.serialized_source_guild;\n    /**\n     * Whether this template has unsynced changes\n     * @type {?boolean}\n     */\n\n    this.unSynced = 'is_dirty' in data ? Boolean(data.is_dirty) : null;\n    return this;\n  }\n  /**\n   * Creates a guild based from this template.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {string} name The name of the guild\n   * @param {BufferResolvable|Base64Resolvable} [icon] The icon for the guild\n   * @returns {Promise<Guild>}\n   */\n\n\n  async createGuild(name, icon) {\n    const {\n      client\n    } = this;\n    const data = await client.api.guilds.templates(this.code).post({\n      data: {\n        name,\n        icon: await DataResolver.resolveImage(icon)\n      }\n    });\n    if (client.guilds.cache.has(data.id)) return client.guilds.cache.get(data.id);\n    return new Promise(resolve => {\n      const resolveGuild = guild => {\n        client.off(Events.GUILD_CREATE, handleGuild);\n        client.decrementMaxListeners();\n        resolve(guild);\n      };\n\n      const handleGuild = guild => {\n        if (guild.id === data.id) {\n          clearTimeout(timeout);\n          resolveGuild(guild);\n        }\n      };\n\n      client.incrementMaxListeners();\n      client.on(Events.GUILD_CREATE, handleGuild);\n      const timeout = setTimeout(() => resolveGuild(client.guilds._add(data)), 10000).unref();\n    });\n  }\n  /**\n   * Options used to edit a guild template.\n   * @typedef {Object} EditGuildTemplateOptions\n   * @property {string} [name] The name of this template\n   * @property {string} [description] The description of this template\n   */\n\n  /**\n   * Updates the metadata of this template.\n   * @param {EditGuildTemplateOptions} [options] Options for editing the template\n   * @returns {Promise<GuildTemplate>}\n   */\n\n\n  async edit() {\n    let {\n      name,\n      description\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const data = await this.client.api.guilds(this.guildId).templates(this.code).patch({\n      data: {\n        name,\n        description\n      }\n    });\n    return this._patch(data);\n  }\n  /**\n   * Deletes this template.\n   * @returns {Promise<GuildTemplate>}\n   */\n\n\n  async delete() {\n    await this.client.api.guilds(this.guildId).templates(this.code).delete();\n    return this;\n  }\n  /**\n   * Syncs this template to the current state of the guild.\n   * @returns {Promise<GuildTemplate>}\n   */\n\n\n  async sync() {\n    const data = await this.client.api.guilds(this.guildId).templates(this.code).put();\n    return this._patch(data);\n  }\n  /**\n   * The timestamp of when this template was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return this.createdAt.getTime();\n  }\n  /**\n   * The timestamp of when this template was last synced to the guild\n   * @type {number}\n   * @readonly\n   */\n\n\n  get updatedTimestamp() {\n    return this.updatedAt.getTime();\n  }\n  /**\n   * The guild that this template belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n\n\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n  /**\n   * The URL of this template\n   * @type {string}\n   * @readonly\n   */\n\n\n  get url() {\n    return `${this.client.options.http.template}/${this.code}`;\n  }\n  /**\n   * When concatenated with a string, this automatically returns the template's code instead of the template object.\n   * @returns {string}\n   * @example\n   * // Logs: Template: FKvmczH2HyUf\n   * console.log(`Template: ${guildTemplate}!`);\n   */\n\n\n  toString() {\n    return this.code;\n  }\n\n}\n/**\n * Regular expression that globally matches guild template links\n * @type {RegExp}\n */\n\n\nGuildTemplate.GUILD_TEMPLATES_PATTERN = /discord(?:app)?\\.(?:com\\/template|new)\\/([\\w-]{2,255})/gi;\nmodule.exports = GuildTemplate;\n/* eslint-disable max-len */\n\n/**\n * @external APIGuildTemplate\n * @see {@link https://discord.com/developers/docs/resources/guild-template#guild-template-object-guild-template-structure}\n */","map":{"version":3,"names":["Base","require","Events","DataResolver","GuildTemplate","constructor","client","data","_patch","code","name","description","usageCount","usage_count","creatorId","creator_id","creator","users","_add","createdAt","Date","created_at","updatedAt","updated_at","guildId","source_guild_id","serializedGuild","serialized_source_guild","unSynced","Boolean","is_dirty","createGuild","icon","api","guilds","templates","post","resolveImage","cache","has","id","get","Promise","resolve","resolveGuild","guild","off","GUILD_CREATE","handleGuild","decrementMaxListeners","clearTimeout","timeout","incrementMaxListeners","on","setTimeout","unref","edit","patch","delete","sync","put","createdTimestamp","getTime","updatedTimestamp","url","options","http","template","toString","GUILD_TEMPLATES_PATTERN","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/GuildTemplate.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { Events } = require('../util/Constants');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Represents the template for a guild.\n * @extends {Base}\n */\nclass GuildTemplate extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APIGuildTemplate} data The raw data for the template\n   */\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  /**\n   * Builds or updates the template with the provided data.\n   * @param {APIGuildTemplate} data The raw data for the template\n   * @returns {GuildTemplate}\n   * @private\n   */\n  _patch(data) {\n    /**\n     * The unique code of this template\n     * @type {string}\n     */\n    this.code = data.code;\n\n    /**\n     * The name of this template\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The description of this template\n     * @type {?string}\n     */\n    this.description = data.description;\n\n    /**\n     * The amount of times this template has been used\n     * @type {number}\n     */\n    this.usageCount = data.usage_count;\n\n    /**\n     * The id of the user that created this template\n     * @type {Snowflake}\n     */\n    this.creatorId = data.creator_id;\n\n    /**\n     * The user that created this template\n     * @type {User}\n     */\n    this.creator = this.client.users._add(data.creator);\n\n    /**\n     * The time of when this template was created at\n     * @type {Date}\n     */\n    this.createdAt = new Date(data.created_at);\n\n    /**\n     * The time of when this template was last synced to the guild\n     * @type {Date}\n     */\n    this.updatedAt = new Date(data.updated_at);\n\n    /**\n     * The id of the guild that this template belongs to\n     * @type {Snowflake}\n     */\n    this.guildId = data.source_guild_id;\n\n    /**\n     * The data of the guild that this template would create\n     * @type {APIGuild}\n     */\n    this.serializedGuild = data.serialized_source_guild;\n\n    /**\n     * Whether this template has unsynced changes\n     * @type {?boolean}\n     */\n    this.unSynced = 'is_dirty' in data ? Boolean(data.is_dirty) : null;\n\n    return this;\n  }\n\n  /**\n   * Creates a guild based from this template.\n   * <warn>This is only available to bots in fewer than 10 guilds.</warn>\n   * @param {string} name The name of the guild\n   * @param {BufferResolvable|Base64Resolvable} [icon] The icon for the guild\n   * @returns {Promise<Guild>}\n   */\n  async createGuild(name, icon) {\n    const { client } = this;\n    const data = await client.api.guilds.templates(this.code).post({\n      data: {\n        name,\n        icon: await DataResolver.resolveImage(icon),\n      },\n    });\n\n    if (client.guilds.cache.has(data.id)) return client.guilds.cache.get(data.id);\n\n    return new Promise(resolve => {\n      const resolveGuild = guild => {\n        client.off(Events.GUILD_CREATE, handleGuild);\n        client.decrementMaxListeners();\n        resolve(guild);\n      };\n\n      const handleGuild = guild => {\n        if (guild.id === data.id) {\n          clearTimeout(timeout);\n          resolveGuild(guild);\n        }\n      };\n\n      client.incrementMaxListeners();\n      client.on(Events.GUILD_CREATE, handleGuild);\n\n      const timeout = setTimeout(() => resolveGuild(client.guilds._add(data)), 10000).unref();\n    });\n  }\n\n  /**\n   * Options used to edit a guild template.\n   * @typedef {Object} EditGuildTemplateOptions\n   * @property {string} [name] The name of this template\n   * @property {string} [description] The description of this template\n   */\n\n  /**\n   * Updates the metadata of this template.\n   * @param {EditGuildTemplateOptions} [options] Options for editing the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  async edit({ name, description } = {}) {\n    const data = await this.client.api.guilds(this.guildId).templates(this.code).patch({ data: { name, description } });\n    return this._patch(data);\n  }\n\n  /**\n   * Deletes this template.\n   * @returns {Promise<GuildTemplate>}\n   */\n  async delete() {\n    await this.client.api.guilds(this.guildId).templates(this.code).delete();\n    return this;\n  }\n\n  /**\n   * Syncs this template to the current state of the guild.\n   * @returns {Promise<GuildTemplate>}\n   */\n  async sync() {\n    const data = await this.client.api.guilds(this.guildId).templates(this.code).put();\n    return this._patch(data);\n  }\n\n  /**\n   * The timestamp of when this template was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return this.createdAt.getTime();\n  }\n\n  /**\n   * The timestamp of when this template was last synced to the guild\n   * @type {number}\n   * @readonly\n   */\n  get updatedTimestamp() {\n    return this.updatedAt.getTime();\n  }\n\n  /**\n   * The guild that this template belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * The URL of this template\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return `${this.client.options.http.template}/${this.code}`;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the template's code instead of the template object.\n   * @returns {string}\n   * @example\n   * // Logs: Template: FKvmczH2HyUf\n   * console.log(`Template: ${guildTemplate}!`);\n   */\n  toString() {\n    return this.code;\n  }\n}\n\n/**\n * Regular expression that globally matches guild template links\n * @type {RegExp}\n */\nGuildTemplate.GUILD_TEMPLATES_PATTERN = /discord(?:app)?\\.(?:com\\/template|new)\\/([\\w-]{2,255})/gi;\n\nmodule.exports = GuildTemplate;\n\n/* eslint-disable max-len */\n/**\n * @external APIGuildTemplate\n * @see {@link https://discord.com/developers/docs/resources/guild-template#guild-template-object-guild-template-structure}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}