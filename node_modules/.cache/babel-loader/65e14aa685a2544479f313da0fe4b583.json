{"ast":null,"code":"'use strict';\n\nconst BitField = require('./BitField');\n/**\n * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\n * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\n * that override their default permissions.\n * @extends {BitField}\n */\n\n\nclass Permissions extends BitField {\n  /**\n   * Bitfield of the packed bits\n   * @type {bigint}\n   * @name Permissions#bitfield\n   */\n\n  /**\n   * Data that can be resolved to give a permission number. This can be:\n   * * A string (see {@link Permissions.FLAGS})\n   * * A permission number\n   * * An instance of Permissions\n   * * An Array of PermissionResolvable\n   * @typedef {string|bigint|Permissions|PermissionResolvable[]} PermissionResolvable\n   */\n\n  /**\n   * Gets all given bits that are missing from the bitfield.\n   * @param {BitFieldResolvable} bits Bit(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {string[]}\n   */\n  missing(bits) {\n    let checkAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return checkAdmin && this.has(this.constructor.FLAGS.ADMINISTRATOR) ? [] : super.missing(bits, checkAdmin);\n  }\n  /**\n   * Checks whether the bitfield has a permission, or any of multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n\n\n  any(permission) {\n    let checkAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return checkAdmin && super.has(this.constructor.FLAGS.ADMINISTRATOR) || super.any(permission);\n  }\n  /**\n   * Checks whether the bitfield has a permission, or multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n\n\n  has(permission) {\n    let checkAdmin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return checkAdmin && super.has(this.constructor.FLAGS.ADMINISTRATOR) || super.has(permission);\n  }\n\n}\n/**\n * Numeric permission flags. All available properties:\n * * `CREATE_INSTANT_INVITE` (create invitations to the guild)\n * * `KICK_MEMBERS`\n * * `BAN_MEMBERS`\n * * `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n * * `MANAGE_CHANNELS` (edit and reorder channels)\n * * `MANAGE_GUILD` (edit the guild information, region, etc.)\n * * `ADD_REACTIONS` (add new reactions to messages)\n * * `VIEW_AUDIT_LOG`\n * * `PRIORITY_SPEAKER`\n * * `STREAM`\n * * `VIEW_CHANNEL`\n * * `SEND_MESSAGES`\n * * `SEND_TTS_MESSAGES`\n * * `MANAGE_MESSAGES` (delete messages and reactions)\n * * `EMBED_LINKS` (links posted will have a preview embedded)\n * * `ATTACH_FILES`\n * * `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n * * `MENTION_EVERYONE`\n * * `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n * * `VIEW_GUILD_INSIGHTS`\n * * `CONNECT` (connect to a voice channel)\n * * `SPEAK` (speak in a voice channel)\n * * `MUTE_MEMBERS` (mute members across all voice channels)\n * * `DEAFEN_MEMBERS` (deafen members across all voice channels)\n * * `MOVE_MEMBERS` (move members between voice channels)\n * * `USE_VAD` (use voice activity detection)\n * * `CHANGE_NICKNAME`\n * * `MANAGE_NICKNAMES` (change other members' nicknames)\n * * `MANAGE_ROLES`\n * * `MANAGE_WEBHOOKS`\n * * `MANAGE_EMOJIS_AND_STICKERS`\n * * `USE_APPLICATION_COMMANDS`\n * * `REQUEST_TO_SPEAK`\n * * `MANAGE_THREADS`\n * * `USE_PUBLIC_THREADS`\n * * `USE_PRIVATE_THREADS`\n * * `USE_EXTERNAL_STICKERS` (use stickers from different guilds)\n * @type {Object<string, bigint>}\n * @see {@link https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags}\n */\n\n\nPermissions.FLAGS = {\n  CREATE_INSTANT_INVITE: 1n << 0n,\n  KICK_MEMBERS: 1n << 1n,\n  BAN_MEMBERS: 1n << 2n,\n  ADMINISTRATOR: 1n << 3n,\n  MANAGE_CHANNELS: 1n << 4n,\n  MANAGE_GUILD: 1n << 5n,\n  ADD_REACTIONS: 1n << 6n,\n  VIEW_AUDIT_LOG: 1n << 7n,\n  PRIORITY_SPEAKER: 1n << 8n,\n  STREAM: 1n << 9n,\n  VIEW_CHANNEL: 1n << 10n,\n  SEND_MESSAGES: 1n << 11n,\n  SEND_TTS_MESSAGES: 1n << 12n,\n  MANAGE_MESSAGES: 1n << 13n,\n  EMBED_LINKS: 1n << 14n,\n  ATTACH_FILES: 1n << 15n,\n  READ_MESSAGE_HISTORY: 1n << 16n,\n  MENTION_EVERYONE: 1n << 17n,\n  USE_EXTERNAL_EMOJIS: 1n << 18n,\n  VIEW_GUILD_INSIGHTS: 1n << 19n,\n  CONNECT: 1n << 20n,\n  SPEAK: 1n << 21n,\n  MUTE_MEMBERS: 1n << 22n,\n  DEAFEN_MEMBERS: 1n << 23n,\n  MOVE_MEMBERS: 1n << 24n,\n  USE_VAD: 1n << 25n,\n  CHANGE_NICKNAME: 1n << 26n,\n  MANAGE_NICKNAMES: 1n << 27n,\n  MANAGE_ROLES: 1n << 28n,\n  MANAGE_WEBHOOKS: 1n << 29n,\n  MANAGE_EMOJIS_AND_STICKERS: 1n << 30n,\n  USE_APPLICATION_COMMANDS: 1n << 31n,\n  REQUEST_TO_SPEAK: 1n << 32n,\n  MANAGE_THREADS: 1n << 34n,\n  USE_PUBLIC_THREADS: 1n << 35n,\n  USE_PRIVATE_THREADS: 1n << 36n,\n  USE_EXTERNAL_STICKERS: 1n << 37n\n};\n/**\n * Bitfield representing every permission combined\n * @type {bigint}\n */\n\nPermissions.ALL = Object.values(Permissions.FLAGS).reduce((all, p) => all | p, 0n);\n/**\n * Bitfield representing the default permissions for users\n * @type {bigint}\n */\n\nPermissions.DEFAULT = BigInt(104324673);\n/**\n * Bitfield representing the permissions required for moderators of stage channels\n * @type {bigint}\n */\n\nPermissions.STAGE_MODERATOR = Permissions.FLAGS.MANAGE_CHANNELS | Permissions.FLAGS.MUTE_MEMBERS | Permissions.FLAGS.MOVE_MEMBERS;\nPermissions.defaultBit = BigInt(0);\nmodule.exports = Permissions;","map":{"version":3,"names":["BitField","require","Permissions","missing","bits","checkAdmin","has","constructor","FLAGS","ADMINISTRATOR","any","permission","CREATE_INSTANT_INVITE","KICK_MEMBERS","BAN_MEMBERS","MANAGE_CHANNELS","MANAGE_GUILD","ADD_REACTIONS","VIEW_AUDIT_LOG","PRIORITY_SPEAKER","STREAM","VIEW_CHANNEL","SEND_MESSAGES","SEND_TTS_MESSAGES","MANAGE_MESSAGES","EMBED_LINKS","ATTACH_FILES","READ_MESSAGE_HISTORY","MENTION_EVERYONE","USE_EXTERNAL_EMOJIS","VIEW_GUILD_INSIGHTS","CONNECT","SPEAK","MUTE_MEMBERS","DEAFEN_MEMBERS","MOVE_MEMBERS","USE_VAD","CHANGE_NICKNAME","MANAGE_NICKNAMES","MANAGE_ROLES","MANAGE_WEBHOOKS","MANAGE_EMOJIS_AND_STICKERS","USE_APPLICATION_COMMANDS","REQUEST_TO_SPEAK","MANAGE_THREADS","USE_PUBLIC_THREADS","USE_PRIVATE_THREADS","USE_EXTERNAL_STICKERS","ALL","Object","values","reduce","all","p","DEFAULT","BigInt","STAGE_MODERATOR","defaultBit","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/util/Permissions.js"],"sourcesContent":["'use strict';\n\nconst BitField = require('./BitField');\n\n/**\n * Data structure that makes it easy to interact with a permission bitfield. All {@link GuildMember}s have a set of\n * permissions in their guild, and each channel in the guild may also have {@link PermissionOverwrites} for the member\n * that override their default permissions.\n * @extends {BitField}\n */\nclass Permissions extends BitField {\n  /**\n   * Bitfield of the packed bits\n   * @type {bigint}\n   * @name Permissions#bitfield\n   */\n\n  /**\n   * Data that can be resolved to give a permission number. This can be:\n   * * A string (see {@link Permissions.FLAGS})\n   * * A permission number\n   * * An instance of Permissions\n   * * An Array of PermissionResolvable\n   * @typedef {string|bigint|Permissions|PermissionResolvable[]} PermissionResolvable\n   */\n\n  /**\n   * Gets all given bits that are missing from the bitfield.\n   * @param {BitFieldResolvable} bits Bit(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {string[]}\n   */\n  missing(bits, checkAdmin = true) {\n    return checkAdmin && this.has(this.constructor.FLAGS.ADMINISTRATOR) ? [] : super.missing(bits, checkAdmin);\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or any of multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  any(permission, checkAdmin = true) {\n    return (checkAdmin && super.has(this.constructor.FLAGS.ADMINISTRATOR)) || super.any(permission);\n  }\n\n  /**\n   * Checks whether the bitfield has a permission, or multiple permissions.\n   * @param {PermissionResolvable} permission Permission(s) to check for\n   * @param {boolean} [checkAdmin=true] Whether to allow the administrator permission to override\n   * @returns {boolean}\n   */\n  has(permission, checkAdmin = true) {\n    return (checkAdmin && super.has(this.constructor.FLAGS.ADMINISTRATOR)) || super.has(permission);\n  }\n}\n\n/**\n * Numeric permission flags. All available properties:\n * * `CREATE_INSTANT_INVITE` (create invitations to the guild)\n * * `KICK_MEMBERS`\n * * `BAN_MEMBERS`\n * * `ADMINISTRATOR` (implicitly has *all* permissions, and bypasses all channel overwrites)\n * * `MANAGE_CHANNELS` (edit and reorder channels)\n * * `MANAGE_GUILD` (edit the guild information, region, etc.)\n * * `ADD_REACTIONS` (add new reactions to messages)\n * * `VIEW_AUDIT_LOG`\n * * `PRIORITY_SPEAKER`\n * * `STREAM`\n * * `VIEW_CHANNEL`\n * * `SEND_MESSAGES`\n * * `SEND_TTS_MESSAGES`\n * * `MANAGE_MESSAGES` (delete messages and reactions)\n * * `EMBED_LINKS` (links posted will have a preview embedded)\n * * `ATTACH_FILES`\n * * `READ_MESSAGE_HISTORY` (view messages that were posted prior to opening Discord)\n * * `MENTION_EVERYONE`\n * * `USE_EXTERNAL_EMOJIS` (use emojis from different guilds)\n * * `VIEW_GUILD_INSIGHTS`\n * * `CONNECT` (connect to a voice channel)\n * * `SPEAK` (speak in a voice channel)\n * * `MUTE_MEMBERS` (mute members across all voice channels)\n * * `DEAFEN_MEMBERS` (deafen members across all voice channels)\n * * `MOVE_MEMBERS` (move members between voice channels)\n * * `USE_VAD` (use voice activity detection)\n * * `CHANGE_NICKNAME`\n * * `MANAGE_NICKNAMES` (change other members' nicknames)\n * * `MANAGE_ROLES`\n * * `MANAGE_WEBHOOKS`\n * * `MANAGE_EMOJIS_AND_STICKERS`\n * * `USE_APPLICATION_COMMANDS`\n * * `REQUEST_TO_SPEAK`\n * * `MANAGE_THREADS`\n * * `USE_PUBLIC_THREADS`\n * * `USE_PRIVATE_THREADS`\n * * `USE_EXTERNAL_STICKERS` (use stickers from different guilds)\n * @type {Object<string, bigint>}\n * @see {@link https://discord.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags}\n */\nPermissions.FLAGS = {\n  CREATE_INSTANT_INVITE: 1n << 0n,\n  KICK_MEMBERS: 1n << 1n,\n  BAN_MEMBERS: 1n << 2n,\n  ADMINISTRATOR: 1n << 3n,\n  MANAGE_CHANNELS: 1n << 4n,\n  MANAGE_GUILD: 1n << 5n,\n  ADD_REACTIONS: 1n << 6n,\n  VIEW_AUDIT_LOG: 1n << 7n,\n  PRIORITY_SPEAKER: 1n << 8n,\n  STREAM: 1n << 9n,\n  VIEW_CHANNEL: 1n << 10n,\n  SEND_MESSAGES: 1n << 11n,\n  SEND_TTS_MESSAGES: 1n << 12n,\n  MANAGE_MESSAGES: 1n << 13n,\n  EMBED_LINKS: 1n << 14n,\n  ATTACH_FILES: 1n << 15n,\n  READ_MESSAGE_HISTORY: 1n << 16n,\n  MENTION_EVERYONE: 1n << 17n,\n  USE_EXTERNAL_EMOJIS: 1n << 18n,\n  VIEW_GUILD_INSIGHTS: 1n << 19n,\n  CONNECT: 1n << 20n,\n  SPEAK: 1n << 21n,\n  MUTE_MEMBERS: 1n << 22n,\n  DEAFEN_MEMBERS: 1n << 23n,\n  MOVE_MEMBERS: 1n << 24n,\n  USE_VAD: 1n << 25n,\n  CHANGE_NICKNAME: 1n << 26n,\n  MANAGE_NICKNAMES: 1n << 27n,\n  MANAGE_ROLES: 1n << 28n,\n  MANAGE_WEBHOOKS: 1n << 29n,\n  MANAGE_EMOJIS_AND_STICKERS: 1n << 30n,\n  USE_APPLICATION_COMMANDS: 1n << 31n,\n  REQUEST_TO_SPEAK: 1n << 32n,\n  MANAGE_THREADS: 1n << 34n,\n  USE_PUBLIC_THREADS: 1n << 35n,\n  USE_PRIVATE_THREADS: 1n << 36n,\n  USE_EXTERNAL_STICKERS: 1n << 37n,\n};\n\n/**\n * Bitfield representing every permission combined\n * @type {bigint}\n */\nPermissions.ALL = Object.values(Permissions.FLAGS).reduce((all, p) => all | p, 0n);\n\n/**\n * Bitfield representing the default permissions for users\n * @type {bigint}\n */\nPermissions.DEFAULT = BigInt(104324673);\n\n/**\n * Bitfield representing the permissions required for moderators of stage channels\n * @type {bigint}\n */\nPermissions.STAGE_MODERATOR =\n  Permissions.FLAGS.MANAGE_CHANNELS | Permissions.FLAGS.MUTE_MEMBERS | Permissions.FLAGS.MOVE_MEMBERS;\n\nPermissions.defaultBit = BigInt(0);\n\nmodule.exports = Permissions;\n"],"mappings":"AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,WAAN,SAA0BF,QAA1B,CAAmC;EACjC;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;EACEG,OAAO,CAACC,IAAD,EAA0B;IAAA,IAAnBC,UAAmB,uEAAN,IAAM;IAC/B,OAAOA,UAAU,IAAI,KAAKC,GAAL,CAAS,KAAKC,WAAL,CAAiBC,KAAjB,CAAuBC,aAAhC,CAAd,GAA+D,EAA/D,GAAoE,MAAMN,OAAN,CAAcC,IAAd,EAAoBC,UAApB,CAA3E;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEK,GAAG,CAACC,UAAD,EAAgC;IAAA,IAAnBN,UAAmB,uEAAN,IAAM;IACjC,OAAQA,UAAU,IAAI,MAAMC,GAAN,CAAU,KAAKC,WAAL,CAAiBC,KAAjB,CAAuBC,aAAjC,CAAf,IAAmE,MAAMC,GAAN,CAAUC,UAAV,CAA1E;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEL,GAAG,CAACK,UAAD,EAAgC;IAAA,IAAnBN,UAAmB,uEAAN,IAAM;IACjC,OAAQA,UAAU,IAAI,MAAMC,GAAN,CAAU,KAAKC,WAAL,CAAiBC,KAAjB,CAAuBC,aAAjC,CAAf,IAAmE,MAAMH,GAAN,CAAUK,UAAV,CAA1E;EACD;;AA5CgC;AA+CnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAT,WAAW,CAACM,KAAZ,GAAoB;EAClBI,qBAAqB,EAAE,MAAM,EADX;EAElBC,YAAY,EAAE,MAAM,EAFF;EAGlBC,WAAW,EAAE,MAAM,EAHD;EAIlBL,aAAa,EAAE,MAAM,EAJH;EAKlBM,eAAe,EAAE,MAAM,EALL;EAMlBC,YAAY,EAAE,MAAM,EANF;EAOlBC,aAAa,EAAE,MAAM,EAPH;EAQlBC,cAAc,EAAE,MAAM,EARJ;EASlBC,gBAAgB,EAAE,MAAM,EATN;EAUlBC,MAAM,EAAE,MAAM,EAVI;EAWlBC,YAAY,EAAE,MAAM,GAXF;EAYlBC,aAAa,EAAE,MAAM,GAZH;EAalBC,iBAAiB,EAAE,MAAM,GAbP;EAclBC,eAAe,EAAE,MAAM,GAdL;EAelBC,WAAW,EAAE,MAAM,GAfD;EAgBlBC,YAAY,EAAE,MAAM,GAhBF;EAiBlBC,oBAAoB,EAAE,MAAM,GAjBV;EAkBlBC,gBAAgB,EAAE,MAAM,GAlBN;EAmBlBC,mBAAmB,EAAE,MAAM,GAnBT;EAoBlBC,mBAAmB,EAAE,MAAM,GApBT;EAqBlBC,OAAO,EAAE,MAAM,GArBG;EAsBlBC,KAAK,EAAE,MAAM,GAtBK;EAuBlBC,YAAY,EAAE,MAAM,GAvBF;EAwBlBC,cAAc,EAAE,MAAM,GAxBJ;EAyBlBC,YAAY,EAAE,MAAM,GAzBF;EA0BlBC,OAAO,EAAE,MAAM,GA1BG;EA2BlBC,eAAe,EAAE,MAAM,GA3BL;EA4BlBC,gBAAgB,EAAE,MAAM,GA5BN;EA6BlBC,YAAY,EAAE,MAAM,GA7BF;EA8BlBC,eAAe,EAAE,MAAM,GA9BL;EA+BlBC,0BAA0B,EAAE,MAAM,GA/BhB;EAgClBC,wBAAwB,EAAE,MAAM,GAhCd;EAiClBC,gBAAgB,EAAE,MAAM,GAjCN;EAkClBC,cAAc,EAAE,MAAM,GAlCJ;EAmClBC,kBAAkB,EAAE,MAAM,GAnCR;EAoClBC,mBAAmB,EAAE,MAAM,GApCT;EAqClBC,qBAAqB,EAAE,MAAM;AArCX,CAApB;AAwCA;AACA;AACA;AACA;;AACA7C,WAAW,CAAC8C,GAAZ,GAAkBC,MAAM,CAACC,MAAP,CAAchD,WAAW,CAACM,KAA1B,EAAiC2C,MAAjC,CAAwC,CAACC,GAAD,EAAMC,CAAN,KAAYD,GAAG,GAAGC,CAA1D,EAA6D,EAA7D,CAAlB;AAEA;AACA;AACA;AACA;;AACAnD,WAAW,CAACoD,OAAZ,GAAsBC,MAAM,CAAC,SAAD,CAA5B;AAEA;AACA;AACA;AACA;;AACArD,WAAW,CAACsD,eAAZ,GACEtD,WAAW,CAACM,KAAZ,CAAkBO,eAAlB,GAAoCb,WAAW,CAACM,KAAZ,CAAkByB,YAAtD,GAAqE/B,WAAW,CAACM,KAAZ,CAAkB2B,YADzF;AAGAjC,WAAW,CAACuD,UAAZ,GAAyBF,MAAM,CAAC,CAAD,CAA/B;AAEAG,MAAM,CAACC,OAAP,GAAiBzD,WAAjB"},"metadata":{},"sourceType":"script"}