{"ast":null,"code":"'use strict';\n\nconst Package = exports.Package = require('../../package.json');\n\nconst {\n  Error,\n  RangeError\n} = require('../errors');\n\nexports.UserAgent = `DiscordBot (${Package.homepage.split('#')[0]}, ${Package.version}) Node.js/${process.version}`;\nexports.WSCodes = {\n  1000: 'WS_CLOSE_REQUESTED',\n  4004: 'TOKEN_INVALID',\n  4010: 'SHARDING_INVALID',\n  4011: 'SHARDING_REQUIRED',\n  4013: 'INVALID_INTENTS',\n  4014: 'DISALLOWED_INTENTS'\n};\nconst AllowedImageFormats = ['webp', 'png', 'jpg', 'jpeg', 'gif'];\nconst AllowedImageSizes = Array.from({\n  length: 9\n}, (e, i) => 2 ** (i + 4));\n\nfunction makeImageUrl(root) {\n  let {\n    format = 'webp',\n    size\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (format && !AllowedImageFormats.includes(format)) throw new Error('IMAGE_FORMAT', format);\n  if (size && !AllowedImageSizes.includes(size)) throw new RangeError('IMAGE_SIZE', size);\n  return `${root}.${format}${size ? `?size=${size}` : ''}`;\n}\n/**\n * Options for Image URLs.\n * @typedef {StaticImageURLOptions} ImageURLOptions\n * @property {boolean} [dynamic] If true, the format will dynamically change to `gif` for\n * animated avatars; the default is false\n */\n\n/**\n * Options for static Image URLs.\n * @typedef {Object} StaticImageURLOptions\n * @property {string} [format='webp'] One of `webp`, `png`, `jpg`, `jpeg`.\n * @property {number} [size] One of `16`, `32`, `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`\n */\n// https://discord.com/developers/docs/reference#image-formatting-cdn-endpoints\n\n\nexports.Endpoints = {\n  CDN(root) {\n    return {\n      Emoji: function (emojiId) {\n        let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'webp';\n        return `${root}/emojis/${emojiId}.${format}`;\n      },\n      Asset: name => `${root}/assets/${name}`,\n      DefaultAvatar: discriminator => `${root}/embed/avatars/${discriminator}.png`,\n      Avatar: function (userId, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        let dynamic = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n        if (dynamic) format = hash.startsWith('a_') ? 'gif' : format;\n        return makeImageUrl(`${root}/avatars/${userId}/${hash}`, {\n          format,\n          size\n        });\n      },\n      Banner: function (guildId, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        return makeImageUrl(`${root}/banners/${guildId}/${hash}`, {\n          format,\n          size\n        });\n      },\n      Icon: function (guildId, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        let dynamic = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n        if (dynamic) format = hash.startsWith('a_') ? 'gif' : format;\n        return makeImageUrl(`${root}/icons/${guildId}/${hash}`, {\n          format,\n          size\n        });\n      },\n      AppIcon: function (appId, hash) {\n        let {\n          format = 'webp',\n          size\n        } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return makeImageUrl(`${root}/app-icons/${appId}/${hash}`, {\n          size,\n          format\n        });\n      },\n      AppAsset: function (appId, hash) {\n        let {\n          format = 'webp',\n          size\n        } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return makeImageUrl(`${root}/app-assets/${appId}/${hash}`, {\n          size,\n          format\n        });\n      },\n      StickerPackBanner: function (bannerId) {\n        let format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'webp';\n        let size = arguments.length > 2 ? arguments[2] : undefined;\n        return makeImageUrl(`${root}/app-assets/710982414301790216/store/${bannerId}`, {\n          size,\n          format\n        });\n      },\n      GDMIcon: function (channelId, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        return makeImageUrl(`${root}/channel-icons/${channelId}/${hash}`, {\n          size,\n          format\n        });\n      },\n      Splash: function (guildId, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        return makeImageUrl(`${root}/splashes/${guildId}/${hash}`, {\n          size,\n          format\n        });\n      },\n      DiscoverySplash: function (guildId, hash) {\n        let format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'webp';\n        let size = arguments.length > 3 ? arguments[3] : undefined;\n        return makeImageUrl(`${root}/discovery-splashes/${guildId}/${hash}`, {\n          size,\n          format\n        });\n      },\n      TeamIcon: function (teamId, hash) {\n        let {\n          format = 'webp',\n          size\n        } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        return makeImageUrl(`${root}/team-icons/${teamId}/${hash}`, {\n          size,\n          format\n        });\n      },\n      Sticker: (stickerId, stickerFormat) => `${root}/stickers/${stickerId}.${stickerFormat === 'LOTTIE' ? 'json' : 'png'}`\n    };\n  },\n\n  invite: (root, code) => `${root}/${code}`,\n  botGateway: '/gateway/bot'\n};\n/**\n * The current status of the client. Here are the available statuses:\n * * READY: 0\n * * CONNECTING: 1\n * * RECONNECTING: 2\n * * IDLE: 3\n * * NEARLY: 4\n * * DISCONNECTED: 5\n * * WAITING_FOR_GUILDS: 6\n * * IDENTIFYING: 7\n * * RESUMING: 8\n * @typedef {number} Status\n */\n\nexports.Status = {\n  READY: 0,\n  CONNECTING: 1,\n  RECONNECTING: 2,\n  IDLE: 3,\n  NEARLY: 4,\n  DISCONNECTED: 5,\n  WAITING_FOR_GUILDS: 6,\n  IDENTIFYING: 7,\n  RESUMING: 8\n};\nexports.Opcodes = {\n  DISPATCH: 0,\n  HEARTBEAT: 1,\n  IDENTIFY: 2,\n  STATUS_UPDATE: 3,\n  VOICE_STATE_UPDATE: 4,\n  VOICE_GUILD_PING: 5,\n  RESUME: 6,\n  RECONNECT: 7,\n  REQUEST_GUILD_MEMBERS: 8,\n  INVALID_SESSION: 9,\n  HELLO: 10,\n  HEARTBEAT_ACK: 11\n};\nexports.Events = {\n  RATE_LIMIT: 'rateLimit',\n  INVALID_REQUEST_WARNING: 'invalidRequestWarning',\n  CLIENT_READY: 'ready',\n  APPLICATION_COMMAND_CREATE: 'applicationCommandCreate',\n  APPLICATION_COMMAND_DELETE: 'applicationCommandDelete',\n  APPLICATION_COMMAND_UPDATE: 'applicationCommandUpdate',\n  GUILD_CREATE: 'guildCreate',\n  GUILD_DELETE: 'guildDelete',\n  GUILD_UPDATE: 'guildUpdate',\n  GUILD_UNAVAILABLE: 'guildUnavailable',\n  GUILD_MEMBER_ADD: 'guildMemberAdd',\n  GUILD_MEMBER_REMOVE: 'guildMemberRemove',\n  GUILD_MEMBER_UPDATE: 'guildMemberUpdate',\n  GUILD_MEMBER_AVAILABLE: 'guildMemberAvailable',\n  GUILD_MEMBERS_CHUNK: 'guildMembersChunk',\n  GUILD_INTEGRATIONS_UPDATE: 'guildIntegrationsUpdate',\n  GUILD_ROLE_CREATE: 'roleCreate',\n  GUILD_ROLE_DELETE: 'roleDelete',\n  INVITE_CREATE: 'inviteCreate',\n  INVITE_DELETE: 'inviteDelete',\n  GUILD_ROLE_UPDATE: 'roleUpdate',\n  GUILD_EMOJI_CREATE: 'emojiCreate',\n  GUILD_EMOJI_DELETE: 'emojiDelete',\n  GUILD_EMOJI_UPDATE: 'emojiUpdate',\n  GUILD_BAN_ADD: 'guildBanAdd',\n  GUILD_BAN_REMOVE: 'guildBanRemove',\n  CHANNEL_CREATE: 'channelCreate',\n  CHANNEL_DELETE: 'channelDelete',\n  CHANNEL_UPDATE: 'channelUpdate',\n  CHANNEL_PINS_UPDATE: 'channelPinsUpdate',\n  MESSAGE_CREATE: 'messageCreate',\n  MESSAGE_DELETE: 'messageDelete',\n  MESSAGE_UPDATE: 'messageUpdate',\n  MESSAGE_BULK_DELETE: 'messageDeleteBulk',\n  MESSAGE_REACTION_ADD: 'messageReactionAdd',\n  MESSAGE_REACTION_REMOVE: 'messageReactionRemove',\n  MESSAGE_REACTION_REMOVE_ALL: 'messageReactionRemoveAll',\n  MESSAGE_REACTION_REMOVE_EMOJI: 'messageReactionRemoveEmoji',\n  THREAD_CREATE: 'threadCreate',\n  THREAD_DELETE: 'threadDelete',\n  THREAD_UPDATE: 'threadUpdate',\n  THREAD_LIST_SYNC: 'threadListSync',\n  THREAD_MEMBER_UPDATE: 'threadMemberUpdate',\n  THREAD_MEMBERS_UPDATE: 'threadMembersUpdate',\n  USER_UPDATE: 'userUpdate',\n  PRESENCE_UPDATE: 'presenceUpdate',\n  VOICE_SERVER_UPDATE: 'voiceServerUpdate',\n  VOICE_STATE_UPDATE: 'voiceStateUpdate',\n  TYPING_START: 'typingStart',\n  WEBHOOKS_UPDATE: 'webhookUpdate',\n  INTERACTION_CREATE: 'interactionCreate',\n  ERROR: 'error',\n  WARN: 'warn',\n  DEBUG: 'debug',\n  SHARD_DISCONNECT: 'shardDisconnect',\n  SHARD_ERROR: 'shardError',\n  SHARD_RECONNECTING: 'shardReconnecting',\n  SHARD_READY: 'shardReady',\n  SHARD_RESUME: 'shardResume',\n  INVALIDATED: 'invalidated',\n  RAW: 'raw',\n  STAGE_INSTANCE_CREATE: 'stageInstanceCreate',\n  STAGE_INSTANCE_UPDATE: 'stageInstanceUpdate',\n  STAGE_INSTANCE_DELETE: 'stageInstanceDelete',\n  GUILD_STICKER_CREATE: 'stickerCreate',\n  GUILD_STICKER_DELETE: 'stickerDelete',\n  GUILD_STICKER_UPDATE: 'stickerUpdate'\n};\nexports.ShardEvents = {\n  CLOSE: 'close',\n  DESTROYED: 'destroyed',\n  INVALID_SESSION: 'invalidSession',\n  READY: 'ready',\n  RESUMED: 'resumed',\n  ALL_READY: 'allReady'\n};\n/**\n * The type of Structure allowed to be a partial:\n * * USER\n * * CHANNEL (only affects DMChannels)\n * * GUILD_MEMBER\n * * MESSAGE\n * * REACTION\n * <warn>Partials require you to put checks in place when handling data. See the \"Partial Structures\" topic on the\n * [guide](https://discordjs.guide/popular-topics/partials.html) for more information.</warn>\n * @typedef {string} PartialType\n */\n\nexports.PartialTypes = keyMirror(['USER', 'CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION']);\n/**\n * The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n * * READY\n * * RESUMED\n * * APPLICATION_COMMAND_CREATE\n * * APPLICATION_COMMAND_DELETE\n * * APPLICATION_COMMAND_UPDATE\n * * GUILD_CREATE\n * * GUILD_DELETE\n * * GUILD_UPDATE\n * * INVITE_CREATE\n * * INVITE_DELETE\n * * GUILD_MEMBER_ADD\n * * GUILD_MEMBER_REMOVE\n * * GUILD_MEMBER_UPDATE\n * * GUILD_MEMBERS_CHUNK\n * * GUILD_INTEGRATIONS_UPDATE\n * * GUILD_ROLE_CREATE\n * * GUILD_ROLE_DELETE\n * * GUILD_ROLE_UPDATE\n * * GUILD_BAN_ADD\n * * GUILD_BAN_REMOVE\n * * GUILD_EMOJIS_UPDATE\n * * CHANNEL_CREATE\n * * CHANNEL_DELETE\n * * CHANNEL_UPDATE\n * * CHANNEL_PINS_UPDATE\n * * MESSAGE_CREATE\n * * MESSAGE_DELETE\n * * MESSAGE_UPDATE\n * * MESSAGE_DELETE_BULK\n * * MESSAGE_REACTION_ADD\n * * MESSAGE_REACTION_REMOVE\n * * MESSAGE_REACTION_REMOVE_ALL\n * * MESSAGE_REACTION_REMOVE_EMOJI\n * * THREAD_CREATE\n * * THREAD_UPDATE\n * * THREAD_DELETE\n * * THREAD_LIST_SYNC\n * * THREAD_MEMBER_UPDATE\n * * THREAD_MEMBERS_UPDATE\n * * USER_UPDATE\n * * PRESENCE_UPDATE\n * * TYPING_START\n * * VOICE_STATE_UPDATE\n * * VOICE_SERVER_UPDATE\n * * WEBHOOKS_UPDATE\n * * INTERACTION_CREATE\n * * STAGE_INSTANCE_CREATE\n * * STAGE_INSTANCE_UPDATE\n * * STAGE_INSTANCE_DELETE\n * * GUILD_STICKERS_UPDATE\n * @typedef {string} WSEventType\n * @see {@link https://discord.com/developers/docs/topics/gateway#commands-and-events-gateway-events}\n */\n\nexports.WSEvents = keyMirror(['READY', 'RESUMED', 'APPLICATION_COMMAND_CREATE', 'APPLICATION_COMMAND_DELETE', 'APPLICATION_COMMAND_UPDATE', 'GUILD_CREATE', 'GUILD_DELETE', 'GUILD_UPDATE', 'INVITE_CREATE', 'INVITE_DELETE', 'GUILD_MEMBER_ADD', 'GUILD_MEMBER_REMOVE', 'GUILD_MEMBER_UPDATE', 'GUILD_MEMBERS_CHUNK', 'GUILD_INTEGRATIONS_UPDATE', 'GUILD_ROLE_CREATE', 'GUILD_ROLE_DELETE', 'GUILD_ROLE_UPDATE', 'GUILD_BAN_ADD', 'GUILD_BAN_REMOVE', 'GUILD_EMOJIS_UPDATE', 'CHANNEL_CREATE', 'CHANNEL_DELETE', 'CHANNEL_UPDATE', 'CHANNEL_PINS_UPDATE', 'MESSAGE_CREATE', 'MESSAGE_DELETE', 'MESSAGE_UPDATE', 'MESSAGE_DELETE_BULK', 'MESSAGE_REACTION_ADD', 'MESSAGE_REACTION_REMOVE', 'MESSAGE_REACTION_REMOVE_ALL', 'MESSAGE_REACTION_REMOVE_EMOJI', 'THREAD_CREATE', 'THREAD_UPDATE', 'THREAD_DELETE', 'THREAD_LIST_SYNC', 'THREAD_MEMBER_UPDATE', 'THREAD_MEMBERS_UPDATE', 'USER_UPDATE', 'PRESENCE_UPDATE', 'TYPING_START', 'VOICE_STATE_UPDATE', 'VOICE_SERVER_UPDATE', 'WEBHOOKS_UPDATE', 'INTERACTION_CREATE', 'STAGE_INSTANCE_CREATE', 'STAGE_INSTANCE_UPDATE', 'STAGE_INSTANCE_DELETE', 'GUILD_STICKERS_UPDATE']);\n/**\n * A valid scope to request when generating an invite link.\n * <warn>Scopes that require whitelist are not considered valid for this generator</warn>\n * * `applications.builds.read`: allows reading build data for a users applications\n * * `applications.commands`: allows this bot to create commands in the server\n * * `applications.entitlements`: allows reading entitlements for a users applications\n * * `applications.store.update`: allows reading and updating of store data for a users applications\n * * `bot`: makes the bot join the selected guild\n * * `connections`: makes the endpoint for getting a users connections available\n * * `email`: allows the `/users/@me` endpoint return with an email\n * * `identify`: allows the `/users/@me` endpoint without an email\n * * `guilds`: makes the `/users/@me/guilds` endpoint available for a user\n * * `guilds.join`: allows the bot to join the user to any guild it is in using Guild#addMember\n * * `gdm.join`: allows joining the user to a group dm\n * * `webhook.incoming`: generates a webhook to a channel\n * @typedef {string} InviteScope\n * @see {@link https://discord.com/developers/docs/topics/oauth2#shared-resources-oauth2-scopes}\n */\n\nexports.InviteScopes = ['applications.builds.read', 'applications.commands', 'applications.entitlements', 'applications.store.update', 'bot', 'connections', 'email', 'identify', 'guilds', 'guilds.join', 'gdm.join', 'webhook.incoming'];\n/**\n * The type of a message, e.g. `DEFAULT`. Here are the available types:\n * * DEFAULT\n * * RECIPIENT_ADD\n * * RECIPIENT_REMOVE\n * * CALL\n * * CHANNEL_NAME_CHANGE\n * * CHANNEL_ICON_CHANGE\n * * CHANNEL_PINNED_MESSAGE\n * * GUILD_MEMBER_JOIN\n * * USER_PREMIUM_GUILD_SUBSCRIPTION\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3\n * * CHANNEL_FOLLOW_ADD\n * * GUILD_DISCOVERY_DISQUALIFIED\n * * GUILD_DISCOVERY_REQUALIFIED\n * * GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING\n * * GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING\n * * THREAD_CREATED\n * * REPLY\n * * APPLICATION_COMMAND\n * * THREAD_STARTER_MESSAGE\n * * GUILD_INVITE_REMINDER\n * @typedef {string} MessageType\n * @see {@link https://discord.com/developers/docs/resources/channel#message-object-message-types}\n */\n\nexports.MessageTypes = ['DEFAULT', 'RECIPIENT_ADD', 'RECIPIENT_REMOVE', 'CALL', 'CHANNEL_NAME_CHANGE', 'CHANNEL_ICON_CHANGE', 'CHANNEL_PINNED_MESSAGE', 'GUILD_MEMBER_JOIN', 'USER_PREMIUM_GUILD_SUBSCRIPTION', 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1', 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2', 'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3', 'CHANNEL_FOLLOW_ADD', null, 'GUILD_DISCOVERY_DISQUALIFIED', 'GUILD_DISCOVERY_REQUALIFIED', 'GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING', 'GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING', 'THREAD_CREATED', 'REPLY', 'APPLICATION_COMMAND', 'THREAD_STARTER_MESSAGE', 'GUILD_INVITE_REMINDER'];\n/**\n * The types of messages that are `System`. The available types are `MessageTypes` excluding:\n * * DEFAULT\n * * REPLY\n * * APPLICATION_COMMAND\n * @typedef {string} SystemMessageType\n */\n\nexports.SystemMessageTypes = exports.MessageTypes.filter(type => type && !['DEFAULT', 'REPLY', 'APPLICATION_COMMAND'].includes(type));\n/**\n * <info>Bots cannot set a `CUSTOM` activity type, it is only for custom statuses received from users</info>\n * The type of an activity of a user's presence. Here are the available types:\n * * PLAYING\n * * STREAMING\n * * LISTENING\n * * WATCHING\n * * CUSTOM\n * * COMPETING\n * @typedef {string} ActivityType\n * @see {@link https://discord.com/developers/docs/game-sdk/activities#data-models-activitytype-enum}\n */\n\nexports.ActivityTypes = createEnum(['PLAYING', 'STREAMING', 'LISTENING', 'WATCHING', 'CUSTOM', 'COMPETING']);\n/**\n * All available channel types:\n * * `GUILD_TEXT` - a guild text channel\n * * `DM` - a DM channel\n * * `GUILD_VOICE` - a guild voice channel\n * * `GROUP_DM` - a group DM channel\n * * `GUILD_CATEGORY` - a guild category channel\n * * `GUILD_NEWS` - a guild news channel\n * * `GUILD_STORE` - a guild store channel\n * * `GUILD_NEWS_THREAD` - a guild news channel's public thread channel\n * * `GUILD_PUBLIC_THREAD` - a guild text channel's public thread channel\n * * `GUILD_PRIVATE_THREAD` - a guild text channel's private thread channel\n * * `GUILD_STAGE_VOICE` - a guild stage voice channel\n * * `UNKNOWN` - a generic channel of unknown type, could be Channel or GuildChannel\n * @typedef {string} ChannelType\n * @see {@link https://discord.com/developers/docs/resources/channel#channel-object-channel-types}\n */\n\nexports.ChannelTypes = createEnum(['GUILD_TEXT', 'DM', 'GUILD_VOICE', 'GROUP_DM', 'GUILD_CATEGORY', 'GUILD_NEWS', 'GUILD_STORE', ...Array(3).fill(null), // 10\n'GUILD_NEWS_THREAD', 'GUILD_PUBLIC_THREAD', 'GUILD_PRIVATE_THREAD', 'GUILD_STAGE_VOICE']);\n/**\n * The channels that are text-based.\n * * DMChannel\n * * TextChannel\n * * NewsChannel\n * * ThreadChannel\n * @typedef {DMChannel|TextChannel|NewsChannel|ThreadChannel} TextBasedChannels\n */\n\n/**\n * The types of channels that are text-based. The available types are:\n * * DM\n * * GUILD_TEXT\n * * GUILD_NEWS\n * * GUILD_NEWS_THREAD\n * * GUILD_PUBLIC_THREAD\n * * GUILD_PRIVATE_THREAD\n * @typedef {string} TextBasedChannelTypes\n */\n\nexports.TextBasedChannelTypes = ['DM', 'GUILD_TEXT', 'GUILD_NEWS', 'GUILD_NEWS_THREAD', 'GUILD_PUBLIC_THREAD', 'GUILD_PRIVATE_THREAD'];\n/**\n * The types of channels that are threads. The available types are:\n * * GUILD_NEWS_THREAD\n * * GUILD_PUBLIC_THREAD\n * * GUILD_PRIVATE_THREAD\n * @typedef {string} ThreadChannelTypes\n */\n\nexports.ThreadChannelTypes = ['GUILD_NEWS_THREAD', 'GUILD_PUBLIC_THREAD', 'GUILD_PRIVATE_THREAD'];\n/**\n * The types of channels that are voice-based. The available types are:\n * * GUILD_VOICE\n * * GUILD_STAGE_VOICE\n * @typedef {string} VoiceBasedChannelTypes\n */\n\nexports.VoiceBasedChannelTypes = ['GUILD_VOICE', 'GUILD_STAGE_VOICE'];\nexports.ClientApplicationAssetTypes = {\n  SMALL: 1,\n  BIG: 2\n};\nexports.Colors = {\n  DEFAULT: 0x000000,\n  WHITE: 0xffffff,\n  AQUA: 0x1abc9c,\n  GREEN: 0x57f287,\n  BLUE: 0x3498db,\n  YELLOW: 0xfee75c,\n  PURPLE: 0x9b59b6,\n  LUMINOUS_VIVID_PINK: 0xe91e63,\n  FUCHSIA: 0xeb459e,\n  GOLD: 0xf1c40f,\n  ORANGE: 0xe67e22,\n  RED: 0xed4245,\n  GREY: 0x95a5a6,\n  NAVY: 0x34495e,\n  DARK_AQUA: 0x11806a,\n  DARK_GREEN: 0x1f8b4c,\n  DARK_BLUE: 0x206694,\n  DARK_PURPLE: 0x71368a,\n  DARK_VIVID_PINK: 0xad1457,\n  DARK_GOLD: 0xc27c0e,\n  DARK_ORANGE: 0xa84300,\n  DARK_RED: 0x992d22,\n  DARK_GREY: 0x979c9f,\n  DARKER_GREY: 0x7f8c8d,\n  LIGHT_GREY: 0xbcc0c0,\n  DARK_NAVY: 0x2c3e50,\n  BLURPLE: 0x5865f2,\n  GREYPLE: 0x99aab5,\n  DARK_BUT_NOT_BLACK: 0x2c2f33,\n  NOT_QUITE_BLACK: 0x23272a\n};\n/**\n * The value set for the explicit content filter levels for a guild:\n * * DISABLED\n * * MEMBERS_WITHOUT_ROLES\n * * ALL_MEMBERS\n * @typedef {string} ExplicitContentFilterLevel\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level}\n */\n\nexports.ExplicitContentFilterLevels = createEnum(['DISABLED', 'MEMBERS_WITHOUT_ROLES', 'ALL_MEMBERS']);\n/**\n * The value set for the verification levels for a guild:\n * * NONE\n * * LOW\n * * MEDIUM\n * * HIGH\n * * VERY_HIGH\n * @typedef {string} VerificationLevel\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-verification-level}\n */\n\nexports.VerificationLevels = createEnum(['NONE', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH']);\n/**\n * An error encountered while performing an API request. Here are the potential errors:\n * * UNKNOWN_ACCOUNT\n * * UNKNOWN_APPLICATION\n * * UNKNOWN_CHANNEL\n * * UNKNOWN_GUILD\n * * UNKNOWN_INTEGRATION\n * * UNKNOWN_INVITE\n * * UNKNOWN_MEMBER\n * * UNKNOWN_MESSAGE\n * * UNKNOWN_OVERWRITE\n * * UNKNOWN_PROVIDER\n * * UNKNOWN_ROLE\n * * UNKNOWN_TOKEN\n * * UNKNOWN_USER\n * * UNKNOWN_EMOJI\n * * UNKNOWN_WEBHOOK\n * * UNKNOWN_WEBHOOK_SERVICE\n * * UNKNOWN_SESSION\n * * UNKNOWN_BAN\n * * UNKNOWN_SKU\n * * UNKNOWN_STORE_LISTING\n * * UNKNOWN_ENTITLEMENT\n * * UNKNOWN_BUILD\n * * UNKNOWN_LOBBY\n * * UNKNOWN_BRANCH\n * * UNKNOWN_STORE_DIRECTORY_LAYOUT\n * * UNKNOWN_REDISTRIBUTABLE\n * * UNKNOWN_GIFT_CODE\n * * UNKNOWN_STREAM\n * * UNKNOWN_PREMIUM_SERVER_SUBSCRIBE_COOLDOWN\n * * UNKNOWN_GUILD_TEMPLATE\n * * UNKNOWN_DISCOVERABLE_SERVER_CATEGORY\n * * UNKNOWN_STICKER\n * * UNKNOWN_INTERACTION\n * * UNKNOWN_APPLICATION_COMMAND\n * * UNKNOWN_APPLICATION_COMMAND_PERMISSIONS\n * * UNKNOWN_STAGE_INSTANCE\n * * UNKNOWN_GUILD_MEMBER_VERIFICATION_FORM\n * * UNKNOWN_GUILD_WELCOME_SCREEN\n * * UNKNOWN_GUILD_SCHEDULED_EVENT\n * * UNKNOWN_GUILD_SCHEDULED_EVENT_USER\n * * BOT_PROHIBITED_ENDPOINT\n * * BOT_ONLY_ENDPOINT\n * * CANNOT_SEND_EXPLICIT_CONTENT\n * * NOT_AUTHORIZED\n * * SLOWMODE_RATE_LIMIT\n * * ACCOUNT_OWNER_ONLY\n * * ANNOUNCEMENT_EDIT_LIMIT_EXCEEDED\n * * CHANNEL_HIT_WRITE_RATELIMIT\n * * CONTENT_NOT_ALLOWED\n * * MAXIMUM_GUILDS\n * * MAXIMUM_FRIENDS\n * * MAXIMUM_PINS\n * * MAXIMUM_RECIPIENTS\n * * MAXIMUM_ROLES\n * * MAXIMUM_WEBHOOKS\n * * MAXIMUM_EMOJIS\n * * MAXIMUM_REACTIONS\n * * MAXIMUM_CHANNELS\n * * MAXIMUM_ATTACHMENTS\n * * MAXIMUM_INVITES\n * * MAXIMUM_ANIMATED_EMOJIS\n * * MAXIMUM_SERVER_MEMBERS\n * * MAXIMUM_NUMBER_OF_SERVER_CATEGORIES\n * * GUILD_ALREADY_HAS_TEMPLATE\n * * MAXIMUM_THREAD_PARTICIPANTS\n * * MAXIMUM_NON_GUILD_MEMBERS_BANS\n * * MAXIMUM_BAN_FETCHES\n * * MAXIMUM_NUMBER_OF_STICKERS_REACHED\n * * UNAUTHORIZED\n * * ACCOUNT_VERIFICATION_REQUIRED\n * * DIRECT_MESSAGES_TOO_FAST\n * * REQUEST_ENTITY_TOO_LARGE\n * * FEATURE_TEMPORARILY_DISABLED\n * * USER_BANNED\n * * TARGET_USER_NOT_CONNECTED_TO_VOICE\n * * ALREADY_CROSSPOSTED\n * * MISSING_ACCESS\n * * INVALID_ACCOUNT_TYPE\n * * CANNOT_EXECUTE_ON_DM\n * * EMBED_DISABLED\n * * CANNOT_EDIT_MESSAGE_BY_OTHER\n * * CANNOT_SEND_EMPTY_MESSAGE\n * * CANNOT_MESSAGE_USER\n * * CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n * * CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n * * OAUTH2_APPLICATION_BOT_ABSENT\n * * MAXIMUM_OAUTH2_APPLICATIONS\n * * INVALID_OAUTH_STATE\n * * MISSING_PERMISSIONS\n * * INVALID_AUTHENTICATION_TOKEN\n * * NOTE_TOO_LONG\n * * INVALID_BULK_DELETE_QUANTITY\n * * CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n * * INVALID_OR_TAKEN_INVITE_CODE\n * * CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n * * CANNOT_EXECUTE_ON_CHANNEL_TYPE\n * * INVALID_OAUTH_TOKEN\n * * MISSING_OAUTH_SCOPE\n * * INVALID_WEBHOOK_TOKEN\n * * INVALID_ROLE\n * * INVALID_RECIPIENTS\n * * BULK_DELETE_MESSAGE_TOO_OLD\n * * INVALID_FORM_BODY\n * * INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT\n * * INVALID_API_VERSION\n * * CANNOT_SELF_REDEEM_GIFT\n * * PAYMENT_SOURCE_REQUIRED\n * * CANNOT_DELETE_COMMUNITY_REQUIRED_CHANNEL\n * * INVALID_STICKER_SENT\n * * INVALID_OPERATION_ON_ARCHIVED_THREAD\n * * INVALID_THREAD_NOTIFICATION_SETTINGS\n * * PARAMETER_EARLIER_THAN_CREATION\n * * GUILD_NOT_AVAILABLE_IN_LOCATION\n * * GUILD_MONETIZATION_REQUIRED\n * * TWO_FACTOR_REQUIRED\n * * NO_USERS_WITH_DISCORDTAG_EXIST\n * * REACTION_BLOCKED\n * * RESOURCE_OVERLOADED\n * * STAGE_ALREADY_OPEN\n * * MESSAGE_ALREADY_HAS_THREAD\n * * THREAD_LOCKED\n * * MAXIMUM_ACTIVE_THREADS\n * * MAXIMUM_ACTIVE_ANNOUCEMENT_THREAD\n * @typedef {string} APIError\n * @see {@link https://discord.com/developers/docs/topics/opcodes-and-status-codes#json-json-error-codes}\n */\n\nexports.APIErrors = {\n  UNKNOWN_ACCOUNT: 10001,\n  UNKNOWN_APPLICATION: 10002,\n  UNKNOWN_CHANNEL: 10003,\n  UNKNOWN_GUILD: 10004,\n  UNKNOWN_INTEGRATION: 10005,\n  UNKNOWN_INVITE: 10006,\n  UNKNOWN_MEMBER: 10007,\n  UNKNOWN_MESSAGE: 10008,\n  UNKNOWN_OVERWRITE: 10009,\n  UNKNOWN_PROVIDER: 10010,\n  UNKNOWN_ROLE: 10011,\n  UNKNOWN_TOKEN: 10012,\n  UNKNOWN_USER: 10013,\n  UNKNOWN_EMOJI: 10014,\n  UNKNOWN_WEBHOOK: 10015,\n  UNKNOWN_WEBHOOK_SERVICE: 10016,\n  UNKNOWN_SESSION: 10020,\n  UNKNOWN_BAN: 10026,\n  UNKNOWN_SKU: 10027,\n  UNKNOWN_STORE_LISTING: 10028,\n  UNKNOWN_ENTITLEMENT: 10029,\n  UNKNOWN_BUILD: 10030,\n  UNKNOWN_LOBBY: 10031,\n  UNKNOWN_BRANCH: 10032,\n  UNKNOWN_STORE_DIRECTORY_LAYOUT: 10033,\n  UNKNOWN_REDISTRIBUTABLE: 10036,\n  UNKNOWN_GIFT_CODE: 10038,\n  UNKNOWN_STREAM: 10049,\n  UNKNOWN_PREMIUM_SERVER_SUBSCRIBE_COOLDOWN: 10050,\n  UNKNOWN_GUILD_TEMPLATE: 10057,\n  UNKNOWN_DISCOVERABLE_SERVER_CATEGORY: 10059,\n  UNKNOWN_STICKER: 10060,\n  UNKNOWN_INTERACTION: 10062,\n  UNKNOWN_APPLICATION_COMMAND: 10063,\n  UNKNOWN_APPLICATION_COMMAND_PERMISSIONS: 10066,\n  UNKNOWN_STAGE_INSTANCE: 10067,\n  UNKNOWN_GUILD_MEMBER_VERIFICATION_FORM: 10068,\n  UNKNOWN_GUILD_WELCOME_SCREEN: 10069,\n  UNKNOWN_GUILD_SCHEDULED_EVENT: 10070,\n  UNKNOWN_GUILD_SCHEDULED_EVENT_USER: 10071,\n  BOT_PROHIBITED_ENDPOINT: 20001,\n  BOT_ONLY_ENDPOINT: 20002,\n  CANNOT_SEND_EXPLICIT_CONTENT: 20009,\n  NOT_AUTHORIZED: 20012,\n  SLOWMODE_RATE_LIMIT: 20016,\n  ACCOUNT_OWNER_ONLY: 20018,\n  ANNOUNCEMENT_EDIT_LIMIT_EXCEEDED: 20022,\n  CHANNEL_HIT_WRITE_RATELIMIT: 20028,\n  CONTENT_NOT_ALLOWED: 20031,\n  GUILD_PREMIUM_LEVEL_TOO_LOW: 20035,\n  MAXIMUM_GUILDS: 30001,\n  MAXIMUM_FRIENDS: 30002,\n  MAXIMUM_PINS: 30003,\n  MAXIMUM_RECIPIENTS: 30004,\n  MAXIMUM_ROLES: 30005,\n  MAXIMUM_WEBHOOKS: 30007,\n  MAXIMUM_EMOJIS: 30008,\n  MAXIMUM_REACTIONS: 30010,\n  MAXIMUM_CHANNELS: 30013,\n  MAXIMUM_ATTACHMENTS: 30015,\n  MAXIMUM_INVITES: 30016,\n  MAXIMUM_ANIMATED_EMOJIS: 30018,\n  MAXIMUM_SERVER_MEMBERS: 30019,\n  MAXIMUM_NUMBER_OF_SERVER_CATEGORIES: 30030,\n  GUILD_ALREADY_HAS_TEMPLATE: 30031,\n  MAXIMUM_THREAD_PARTICIPANTS: 30033,\n  MAXIMUM_NON_GUILD_MEMBERS_BANS: 30035,\n  MAXIMUM_BAN_FETCHES: 30037,\n  MAXIMUM_NUMBER_OF_STICKERS_REACHED: 30039,\n  UNAUTHORIZED: 40001,\n  ACCOUNT_VERIFICATION_REQUIRED: 40002,\n  DIRECT_MESSAGES_TOO_FAST: 40003,\n  REQUEST_ENTITY_TOO_LARGE: 40005,\n  FEATURE_TEMPORARILY_DISABLED: 40006,\n  USER_BANNED: 40007,\n  TARGET_USER_NOT_CONNECTED_TO_VOICE: 40032,\n  ALREADY_CROSSPOSTED: 40033,\n  MISSING_ACCESS: 50001,\n  INVALID_ACCOUNT_TYPE: 50002,\n  CANNOT_EXECUTE_ON_DM: 50003,\n  EMBED_DISABLED: 50004,\n  CANNOT_EDIT_MESSAGE_BY_OTHER: 50005,\n  CANNOT_SEND_EMPTY_MESSAGE: 50006,\n  CANNOT_MESSAGE_USER: 50007,\n  CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL: 50008,\n  CHANNEL_VERIFICATION_LEVEL_TOO_HIGH: 50009,\n  OAUTH2_APPLICATION_BOT_ABSENT: 50010,\n  MAXIMUM_OAUTH2_APPLICATIONS: 50011,\n  INVALID_OAUTH_STATE: 50012,\n  MISSING_PERMISSIONS: 50013,\n  INVALID_AUTHENTICATION_TOKEN: 50014,\n  NOTE_TOO_LONG: 50015,\n  INVALID_BULK_DELETE_QUANTITY: 50016,\n  CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL: 50019,\n  INVALID_OR_TAKEN_INVITE_CODE: 50020,\n  CANNOT_EXECUTE_ON_SYSTEM_MESSAGE: 50021,\n  CANNOT_EXECUTE_ON_CHANNEL_TYPE: 50024,\n  INVALID_OAUTH_TOKEN: 50025,\n  MISSING_OAUTH_SCOPE: 50026,\n  INVALID_WEBHOOK_TOKEN: 50027,\n  INVALID_ROLE: 50028,\n  INVALID_RECIPIENTS: 50033,\n  BULK_DELETE_MESSAGE_TOO_OLD: 50034,\n  INVALID_FORM_BODY: 50035,\n  INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT: 50036,\n  INVALID_API_VERSION: 50041,\n  FILE_UPLOADED_EXCEEDS_MAXIMUM_SIZE: 50045,\n  INVALID_FILE_UPLOADED: 50046,\n  CANNOT_SELF_REDEEM_GIFT: 50054,\n  PAYMENT_SOURCE_REQUIRED: 50070,\n  CANNOT_DELETE_COMMUNITY_REQUIRED_CHANNEL: 50074,\n  INVALID_STICKER_SENT: 50081,\n  INVALID_OPERATION_ON_ARCHIVED_THREAD: 50083,\n  INVALID_THREAD_NOTIFICATION_SETTINGS: 50084,\n  PARAMETER_EARLIER_THAN_CREATION: 50085,\n  GUILD_NOT_AVAILABLE_IN_LOCATION: 50095,\n  GUILD_MONETIZATION_REQUIRED: 50097,\n  TWO_FACTOR_REQUIRED: 60003,\n  NO_USERS_WITH_DISCORDTAG_EXIST: 80004,\n  REACTION_BLOCKED: 90001,\n  RESOURCE_OVERLOADED: 130000,\n  STAGE_ALREADY_OPEN: 150006,\n  MESSAGE_ALREADY_HAS_THREAD: 160004,\n  THREAD_LOCKED: 160005,\n  MAXIMUM_ACTIVE_THREADS: 160006,\n  MAXIMUM_ACTIVE_ANNOUNCEMENT_THREADS: 160007,\n  INVALID_JSON_FOR_UPLOADED_LOTTIE_FILE: 170001,\n  UPLOADED_LOTTIES_CANNOT_CONTAIN_RASTERIZED_IMAGES: 170002,\n  STICKER_MAXIMUM_FRAMERATE_EXCEEDED: 170003,\n  STICKER_FRAME_COUNT_EXCEEDS_MAXIMUM_OF_1000_FRAMES: 170004,\n  LOTTIE_ANIMATION_MAXIMUM_DIMENSIONS_EXCEEDED: 170005,\n  STICKER_FRAME_RATE_IS_TOO_SMALL_OR_TOO_LARGE: 170006,\n  STICKER_ANIMATION_DURATION_EXCEEDS_MAXIMUM_OF_5_SECONDS: 170007\n};\n/**\n * The value set for a guild's default message notifications, e.g. `ALL_MESSAGES`. Here are the available types:\n * * ALL_MESSAGES\n * * ONLY_MENTIONS\n * @typedef {string} DefaultMessageNotificationLevel\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level}\n */\n\nexports.DefaultMessageNotificationLevels = createEnum(['ALL_MESSAGES', 'ONLY_MENTIONS']);\n/**\n * The value set for a team member's membership state:\n * * INVITED\n * * ACCEPTED\n * @typedef {string} MembershipState\n * @see {@link https://discord.com/developers/docs/topics/teams#data-models-membership-state-enum}\n */\n\nexports.MembershipStates = createEnum([null, 'INVITED', 'ACCEPTED']);\n/**\n * The value set for a webhook's type:\n * * Incoming\n * * Channel Follower\n * * Application\n * @typedef {string} WebhookType\n * @see {@link https://discord.com/developers/docs/resources/webhook#webhook-object-webhook-types}\n */\n\nexports.WebhookTypes = createEnum([null, 'Incoming', 'Channel Follower', 'Application']);\n/**\n * The value set for a sticker's type:\n * * STANDARD\n * * GUILD\n * @typedef {string} StickerType\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-types}\n */\n\nexports.StickerTypes = createEnum([null, 'STANDARD', 'GUILD']);\n/**\n * The value set for a sticker's format type:\n * * PNG\n * * APNG\n * * LOTTIE\n * @typedef {string} StickerFormatType\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-format-types}\n */\n\nexports.StickerFormatTypes = createEnum([null, 'PNG', 'APNG', 'LOTTIE']);\n/**\n * An overwrite type:\n * * role\n * * member\n * @typedef {string} OverwriteType\n * @see {@link https://discord.com/developers/docs/resources/channel#overwrite-object-overwrite-structure}\n */\n\nexports.OverwriteTypes = createEnum(['role', 'member']);\n/* eslint-disable max-len */\n\n/**\n * The type of an {@link ApplicationCommand} object:\n * * CHAT_INPUT\n * * USER\n * * MESSAGE\n * @typedef {string} ApplicationCommandType\n */\n\nexports.ApplicationCommandTypes = createEnum([null, 'CHAT_INPUT', 'USER', 'MESSAGE']);\n/**\n * The type of an {@link ApplicationCommandOption} object:\n * * SUB_COMMAND\n * * SUB_COMMAND_GROUP\n * * STRING\n * * INTEGER\n * * BOOLEAN\n * * USER\n * * CHANNEL\n * * ROLE\n * * MENTIONABLE\n * * NUMBER\n * @typedef {string} ApplicationCommandOptionType\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-type}\n */\n\nexports.ApplicationCommandOptionTypes = createEnum([null, 'SUB_COMMAND', 'SUB_COMMAND_GROUP', 'STRING', 'INTEGER', 'BOOLEAN', 'USER', 'CHANNEL', 'ROLE', 'MENTIONABLE', 'NUMBER']);\n/**\n * The type of an {@link ApplicationCommandPermissions} object:\n * * ROLE\n * * USER\n * @typedef {string} ApplicationCommandPermissionType\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permission-type}\n */\n\nexports.ApplicationCommandPermissionTypes = createEnum([null, 'ROLE', 'USER']);\n/**\n * The type of an {@link Interaction} object:\n * * PING\n * * APPLICATION_COMMAND\n * * MESSAGE_COMPONENT\n * @typedef {string} InteractionType\n * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-request-type}\n */\n\nexports.InteractionTypes = createEnum([null, 'PING', 'APPLICATION_COMMAND', 'MESSAGE_COMPONENT']);\n/**\n * The type of an interaction response:\n * * PONG\n * * CHANNEL_MESSAGE_WITH_SOURCE\n * * DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE\n * * DEFERRED_MESSAGE_UPDATE\n * * UPDATE_MESSAGE\n * @typedef {string} InteractionResponseType\n * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-type}\n */\n\nexports.InteractionResponseTypes = createEnum([null, 'PONG', null, null, 'CHANNEL_MESSAGE_WITH_SOURCE', 'DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE', 'DEFERRED_MESSAGE_UPDATE', 'UPDATE_MESSAGE']);\n/* eslint-enable max-len */\n\n/**\n * The type of a message component\n * * ACTION_ROW\n * * BUTTON\n * * SELECT_MENU\n * @typedef {string} MessageComponentType\n * @see {@link https://discord.com/developers/docs/interactions/message-components#component-object-component-types}\n */\n\nexports.MessageComponentTypes = createEnum([null, 'ACTION_ROW', 'BUTTON', 'SELECT_MENU']);\n/**\n * The style of a message button\n * * PRIMARY\n * * SECONDARY\n * * SUCCESS\n * * DANGER\n * * LINK\n * @typedef {string} MessageButtonStyle\n * @see {@link https://discord.com/developers/docs/interactions/message-components#button-object-button-styles}\n */\n\nexports.MessageButtonStyles = createEnum([null, 'PRIMARY', 'SECONDARY', 'SUCCESS', 'DANGER', 'LINK']);\n/**\n * The required MFA level for a guild\n * * NONE\n * * ELEVATED\n * @typedef {string} MFALevel\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-mfa-level}\n */\n\nexports.MFALevels = createEnum(['NONE', 'ELEVATED']);\n/**\n * NSFW level of a Guild:\n * * DEFAULT\n * * EXPLICIT\n * * SAFE\n * * AGE_RESTRICTED\n * @typedef {string} NSFWLevel\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-guild-nsfw-level}\n */\n\nexports.NSFWLevels = createEnum(['DEFAULT', 'EXPLICIT', 'SAFE', 'AGE_RESTRICTED']);\n/**\n * Privacy level of a {@link StageInstance} object:\n * * PUBLIC\n * * GUILD_ONLY\n * @typedef {string} PrivacyLevel\n * @see {@link https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-privacy-level}\n */\n\nexports.PrivacyLevels = createEnum([null, 'PUBLIC', 'GUILD_ONLY']);\n/**\n * The premium tier (Server Boost level) of a guild:\n * * NONE\n * * TIER_1\n * * TIER_2\n * * TIER_3\n * @typedef {string} PremiumTier\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-premium-tier}\n */\n\nexports.PremiumTiers = createEnum(['NONE', 'TIER_1', 'TIER_2', 'TIER_3']);\nexports._cleanupSymbol = Symbol('djsCleanup');\n\nfunction keyMirror(arr) {\n  let tmp = Object.create(null);\n\n  for (const value of arr) tmp[value] = value;\n\n  return tmp;\n}\n\nfunction createEnum(keys) {\n  const obj = {};\n\n  for (const [index, key] of keys.entries()) {\n    if (key === null) continue;\n    obj[key] = index;\n    obj[index] = key;\n  }\n\n  return obj;\n}\n/**\n * @typedef {Object} Constants Constants that can be used in an enum or object-like way.\n * @property {ActivityType} ActivityTypes The type of an activity of a users presence.\n * @property {APIError} APIErrors An error encountered while performing an API request.\n * @property {ApplicationCommandOptionType} ApplicationCommandOptionTypes\n * The type of an {@link ApplicationCommandOption} object.\n * @property {ApplicationCommandPermissionType} ApplicationCommandPermissionTypes\n * The type of an {@link ApplicationCommandPermissions} object.\n * @property {ChannelType} ChannelTypes All available channel types.\n * @property {DefaultMessageNotificationLevel} DefaultMessageNotificationLevels\n * The value set for a guild's default message notifications.\n * @property {ExplicitContentFilterLevel} ExplicitContentFilterLevels\n * The value set for the explicit content filter levels for a guild.\n * @property {InteractionResponseType} InteractionResponseTypes The type of an interaction response.\n * @property {InteractionType} InteractionTypes The type of an {@link Interaction} object.\n * @property {MembershipState} MembershipStates The value set for a team member's membership state.\n * @property {MessageButtonStyle} MessageButtonStyles The style of a message button.\n * @property {MessageComponentType} MessageComponentTypes The type of a message component.\n * @property {MFALevel} MFALevels The required MFA level for a guild.\n * @property {NSFWLevel} NSFWLevels NSFW level of a guild.\n * @property {OverwriteType} OverwriteTypes An overwrite type.\n * @property {PartialType} PartialTypes The type of Structure allowed to be a partial.\n * @property {PremiumTier} PremiumTiers The premium tier (Server Boost level) of a guild.\n * @property {PrivacyLevel} PrivacyLevels Privacy level of a {@link StageInstance} object.\n * @property {Status} Status The available statuses of the client.\n * @property {StickerFormatType} StickerFormatTypes The value set for a sticker's format type.\n * @property {StickerType} StickerTypes The value set for a sticker's type.\n * @property {VerificationLevel} VerificationLevels The value set for the verification levels for a guild.\n * @property {WebhookType} WebhookTypes The value set for a webhook's type.\n * @property {WSEventType} WSEvents The type of a websocket message event.\n */","map":{"version":3,"names":["Package","exports","require","Error","RangeError","UserAgent","homepage","split","version","process","WSCodes","AllowedImageFormats","AllowedImageSizes","Array","from","length","e","i","makeImageUrl","root","format","size","includes","Endpoints","CDN","Emoji","emojiId","Asset","name","DefaultAvatar","discriminator","Avatar","userId","hash","dynamic","startsWith","Banner","guildId","Icon","AppIcon","appId","AppAsset","StickerPackBanner","bannerId","GDMIcon","channelId","Splash","DiscoverySplash","TeamIcon","teamId","Sticker","stickerId","stickerFormat","invite","code","botGateway","Status","READY","CONNECTING","RECONNECTING","IDLE","NEARLY","DISCONNECTED","WAITING_FOR_GUILDS","IDENTIFYING","RESUMING","Opcodes","DISPATCH","HEARTBEAT","IDENTIFY","STATUS_UPDATE","VOICE_STATE_UPDATE","VOICE_GUILD_PING","RESUME","RECONNECT","REQUEST_GUILD_MEMBERS","INVALID_SESSION","HELLO","HEARTBEAT_ACK","Events","RATE_LIMIT","INVALID_REQUEST_WARNING","CLIENT_READY","APPLICATION_COMMAND_CREATE","APPLICATION_COMMAND_DELETE","APPLICATION_COMMAND_UPDATE","GUILD_CREATE","GUILD_DELETE","GUILD_UPDATE","GUILD_UNAVAILABLE","GUILD_MEMBER_ADD","GUILD_MEMBER_REMOVE","GUILD_MEMBER_UPDATE","GUILD_MEMBER_AVAILABLE","GUILD_MEMBERS_CHUNK","GUILD_INTEGRATIONS_UPDATE","GUILD_ROLE_CREATE","GUILD_ROLE_DELETE","INVITE_CREATE","INVITE_DELETE","GUILD_ROLE_UPDATE","GUILD_EMOJI_CREATE","GUILD_EMOJI_DELETE","GUILD_EMOJI_UPDATE","GUILD_BAN_ADD","GUILD_BAN_REMOVE","CHANNEL_CREATE","CHANNEL_DELETE","CHANNEL_UPDATE","CHANNEL_PINS_UPDATE","MESSAGE_CREATE","MESSAGE_DELETE","MESSAGE_UPDATE","MESSAGE_BULK_DELETE","MESSAGE_REACTION_ADD","MESSAGE_REACTION_REMOVE","MESSAGE_REACTION_REMOVE_ALL","MESSAGE_REACTION_REMOVE_EMOJI","THREAD_CREATE","THREAD_DELETE","THREAD_UPDATE","THREAD_LIST_SYNC","THREAD_MEMBER_UPDATE","THREAD_MEMBERS_UPDATE","USER_UPDATE","PRESENCE_UPDATE","VOICE_SERVER_UPDATE","TYPING_START","WEBHOOKS_UPDATE","INTERACTION_CREATE","ERROR","WARN","DEBUG","SHARD_DISCONNECT","SHARD_ERROR","SHARD_RECONNECTING","SHARD_READY","SHARD_RESUME","INVALIDATED","RAW","STAGE_INSTANCE_CREATE","STAGE_INSTANCE_UPDATE","STAGE_INSTANCE_DELETE","GUILD_STICKER_CREATE","GUILD_STICKER_DELETE","GUILD_STICKER_UPDATE","ShardEvents","CLOSE","DESTROYED","RESUMED","ALL_READY","PartialTypes","keyMirror","WSEvents","InviteScopes","MessageTypes","SystemMessageTypes","filter","type","ActivityTypes","createEnum","ChannelTypes","fill","TextBasedChannelTypes","ThreadChannelTypes","VoiceBasedChannelTypes","ClientApplicationAssetTypes","SMALL","BIG","Colors","DEFAULT","WHITE","AQUA","GREEN","BLUE","YELLOW","PURPLE","LUMINOUS_VIVID_PINK","FUCHSIA","GOLD","ORANGE","RED","GREY","NAVY","DARK_AQUA","DARK_GREEN","DARK_BLUE","DARK_PURPLE","DARK_VIVID_PINK","DARK_GOLD","DARK_ORANGE","DARK_RED","DARK_GREY","DARKER_GREY","LIGHT_GREY","DARK_NAVY","BLURPLE","GREYPLE","DARK_BUT_NOT_BLACK","NOT_QUITE_BLACK","ExplicitContentFilterLevels","VerificationLevels","APIErrors","UNKNOWN_ACCOUNT","UNKNOWN_APPLICATION","UNKNOWN_CHANNEL","UNKNOWN_GUILD","UNKNOWN_INTEGRATION","UNKNOWN_INVITE","UNKNOWN_MEMBER","UNKNOWN_MESSAGE","UNKNOWN_OVERWRITE","UNKNOWN_PROVIDER","UNKNOWN_ROLE","UNKNOWN_TOKEN","UNKNOWN_USER","UNKNOWN_EMOJI","UNKNOWN_WEBHOOK","UNKNOWN_WEBHOOK_SERVICE","UNKNOWN_SESSION","UNKNOWN_BAN","UNKNOWN_SKU","UNKNOWN_STORE_LISTING","UNKNOWN_ENTITLEMENT","UNKNOWN_BUILD","UNKNOWN_LOBBY","UNKNOWN_BRANCH","UNKNOWN_STORE_DIRECTORY_LAYOUT","UNKNOWN_REDISTRIBUTABLE","UNKNOWN_GIFT_CODE","UNKNOWN_STREAM","UNKNOWN_PREMIUM_SERVER_SUBSCRIBE_COOLDOWN","UNKNOWN_GUILD_TEMPLATE","UNKNOWN_DISCOVERABLE_SERVER_CATEGORY","UNKNOWN_STICKER","UNKNOWN_INTERACTION","UNKNOWN_APPLICATION_COMMAND","UNKNOWN_APPLICATION_COMMAND_PERMISSIONS","UNKNOWN_STAGE_INSTANCE","UNKNOWN_GUILD_MEMBER_VERIFICATION_FORM","UNKNOWN_GUILD_WELCOME_SCREEN","UNKNOWN_GUILD_SCHEDULED_EVENT","UNKNOWN_GUILD_SCHEDULED_EVENT_USER","BOT_PROHIBITED_ENDPOINT","BOT_ONLY_ENDPOINT","CANNOT_SEND_EXPLICIT_CONTENT","NOT_AUTHORIZED","SLOWMODE_RATE_LIMIT","ACCOUNT_OWNER_ONLY","ANNOUNCEMENT_EDIT_LIMIT_EXCEEDED","CHANNEL_HIT_WRITE_RATELIMIT","CONTENT_NOT_ALLOWED","GUILD_PREMIUM_LEVEL_TOO_LOW","MAXIMUM_GUILDS","MAXIMUM_FRIENDS","MAXIMUM_PINS","MAXIMUM_RECIPIENTS","MAXIMUM_ROLES","MAXIMUM_WEBHOOKS","MAXIMUM_EMOJIS","MAXIMUM_REACTIONS","MAXIMUM_CHANNELS","MAXIMUM_ATTACHMENTS","MAXIMUM_INVITES","MAXIMUM_ANIMATED_EMOJIS","MAXIMUM_SERVER_MEMBERS","MAXIMUM_NUMBER_OF_SERVER_CATEGORIES","GUILD_ALREADY_HAS_TEMPLATE","MAXIMUM_THREAD_PARTICIPANTS","MAXIMUM_NON_GUILD_MEMBERS_BANS","MAXIMUM_BAN_FETCHES","MAXIMUM_NUMBER_OF_STICKERS_REACHED","UNAUTHORIZED","ACCOUNT_VERIFICATION_REQUIRED","DIRECT_MESSAGES_TOO_FAST","REQUEST_ENTITY_TOO_LARGE","FEATURE_TEMPORARILY_DISABLED","USER_BANNED","TARGET_USER_NOT_CONNECTED_TO_VOICE","ALREADY_CROSSPOSTED","MISSING_ACCESS","INVALID_ACCOUNT_TYPE","CANNOT_EXECUTE_ON_DM","EMBED_DISABLED","CANNOT_EDIT_MESSAGE_BY_OTHER","CANNOT_SEND_EMPTY_MESSAGE","CANNOT_MESSAGE_USER","CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL","CHANNEL_VERIFICATION_LEVEL_TOO_HIGH","OAUTH2_APPLICATION_BOT_ABSENT","MAXIMUM_OAUTH2_APPLICATIONS","INVALID_OAUTH_STATE","MISSING_PERMISSIONS","INVALID_AUTHENTICATION_TOKEN","NOTE_TOO_LONG","INVALID_BULK_DELETE_QUANTITY","CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL","INVALID_OR_TAKEN_INVITE_CODE","CANNOT_EXECUTE_ON_SYSTEM_MESSAGE","CANNOT_EXECUTE_ON_CHANNEL_TYPE","INVALID_OAUTH_TOKEN","MISSING_OAUTH_SCOPE","INVALID_WEBHOOK_TOKEN","INVALID_ROLE","INVALID_RECIPIENTS","BULK_DELETE_MESSAGE_TOO_OLD","INVALID_FORM_BODY","INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT","INVALID_API_VERSION","FILE_UPLOADED_EXCEEDS_MAXIMUM_SIZE","INVALID_FILE_UPLOADED","CANNOT_SELF_REDEEM_GIFT","PAYMENT_SOURCE_REQUIRED","CANNOT_DELETE_COMMUNITY_REQUIRED_CHANNEL","INVALID_STICKER_SENT","INVALID_OPERATION_ON_ARCHIVED_THREAD","INVALID_THREAD_NOTIFICATION_SETTINGS","PARAMETER_EARLIER_THAN_CREATION","GUILD_NOT_AVAILABLE_IN_LOCATION","GUILD_MONETIZATION_REQUIRED","TWO_FACTOR_REQUIRED","NO_USERS_WITH_DISCORDTAG_EXIST","REACTION_BLOCKED","RESOURCE_OVERLOADED","STAGE_ALREADY_OPEN","MESSAGE_ALREADY_HAS_THREAD","THREAD_LOCKED","MAXIMUM_ACTIVE_THREADS","MAXIMUM_ACTIVE_ANNOUNCEMENT_THREADS","INVALID_JSON_FOR_UPLOADED_LOTTIE_FILE","UPLOADED_LOTTIES_CANNOT_CONTAIN_RASTERIZED_IMAGES","STICKER_MAXIMUM_FRAMERATE_EXCEEDED","STICKER_FRAME_COUNT_EXCEEDS_MAXIMUM_OF_1000_FRAMES","LOTTIE_ANIMATION_MAXIMUM_DIMENSIONS_EXCEEDED","STICKER_FRAME_RATE_IS_TOO_SMALL_OR_TOO_LARGE","STICKER_ANIMATION_DURATION_EXCEEDS_MAXIMUM_OF_5_SECONDS","DefaultMessageNotificationLevels","MembershipStates","WebhookTypes","StickerTypes","StickerFormatTypes","OverwriteTypes","ApplicationCommandTypes","ApplicationCommandOptionTypes","ApplicationCommandPermissionTypes","InteractionTypes","InteractionResponseTypes","MessageComponentTypes","MessageButtonStyles","MFALevels","NSFWLevels","PrivacyLevels","PremiumTiers","_cleanupSymbol","Symbol","arr","tmp","Object","create","value","keys","obj","index","key","entries"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/util/Constants.js"],"sourcesContent":["'use strict';\n\nconst Package = (exports.Package = require('../../package.json'));\nconst { Error, RangeError } = require('../errors');\n\nexports.UserAgent = `DiscordBot (${Package.homepage.split('#')[0]}, ${Package.version}) Node.js/${process.version}`;\n\nexports.WSCodes = {\n  1000: 'WS_CLOSE_REQUESTED',\n  4004: 'TOKEN_INVALID',\n  4010: 'SHARDING_INVALID',\n  4011: 'SHARDING_REQUIRED',\n  4013: 'INVALID_INTENTS',\n  4014: 'DISALLOWED_INTENTS',\n};\n\nconst AllowedImageFormats = ['webp', 'png', 'jpg', 'jpeg', 'gif'];\n\nconst AllowedImageSizes = Array.from({ length: 9 }, (e, i) => 2 ** (i + 4));\n\nfunction makeImageUrl(root, { format = 'webp', size } = {}) {\n  if (format && !AllowedImageFormats.includes(format)) throw new Error('IMAGE_FORMAT', format);\n  if (size && !AllowedImageSizes.includes(size)) throw new RangeError('IMAGE_SIZE', size);\n  return `${root}.${format}${size ? `?size=${size}` : ''}`;\n}\n\n/**\n * Options for Image URLs.\n * @typedef {StaticImageURLOptions} ImageURLOptions\n * @property {boolean} [dynamic] If true, the format will dynamically change to `gif` for\n * animated avatars; the default is false\n */\n\n/**\n * Options for static Image URLs.\n * @typedef {Object} StaticImageURLOptions\n * @property {string} [format='webp'] One of `webp`, `png`, `jpg`, `jpeg`.\n * @property {number} [size] One of `16`, `32`, `64`, `128`, `256`, `512`, `1024`, `2048`, `4096`\n */\n\n// https://discord.com/developers/docs/reference#image-formatting-cdn-endpoints\nexports.Endpoints = {\n  CDN(root) {\n    return {\n      Emoji: (emojiId, format = 'webp') => `${root}/emojis/${emojiId}.${format}`,\n      Asset: name => `${root}/assets/${name}`,\n      DefaultAvatar: discriminator => `${root}/embed/avatars/${discriminator}.png`,\n      Avatar: (userId, hash, format = 'webp', size, dynamic = false) => {\n        if (dynamic) format = hash.startsWith('a_') ? 'gif' : format;\n        return makeImageUrl(`${root}/avatars/${userId}/${hash}`, { format, size });\n      },\n      Banner: (guildId, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/banners/${guildId}/${hash}`, { format, size }),\n      Icon: (guildId, hash, format = 'webp', size, dynamic = false) => {\n        if (dynamic) format = hash.startsWith('a_') ? 'gif' : format;\n        return makeImageUrl(`${root}/icons/${guildId}/${hash}`, { format, size });\n      },\n      AppIcon: (appId, hash, { format = 'webp', size } = {}) =>\n        makeImageUrl(`${root}/app-icons/${appId}/${hash}`, { size, format }),\n      AppAsset: (appId, hash, { format = 'webp', size } = {}) =>\n        makeImageUrl(`${root}/app-assets/${appId}/${hash}`, { size, format }),\n      StickerPackBanner: (bannerId, format = 'webp', size) =>\n        makeImageUrl(`${root}/app-assets/710982414301790216/store/${bannerId}`, { size, format }),\n      GDMIcon: (channelId, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/channel-icons/${channelId}/${hash}`, { size, format }),\n      Splash: (guildId, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/splashes/${guildId}/${hash}`, { size, format }),\n      DiscoverySplash: (guildId, hash, format = 'webp', size) =>\n        makeImageUrl(`${root}/discovery-splashes/${guildId}/${hash}`, { size, format }),\n      TeamIcon: (teamId, hash, { format = 'webp', size } = {}) =>\n        makeImageUrl(`${root}/team-icons/${teamId}/${hash}`, { size, format }),\n      Sticker: (stickerId, stickerFormat) =>\n        `${root}/stickers/${stickerId}.${stickerFormat === 'LOTTIE' ? 'json' : 'png'}`,\n    };\n  },\n  invite: (root, code) => `${root}/${code}`,\n  botGateway: '/gateway/bot',\n};\n\n/**\n * The current status of the client. Here are the available statuses:\n * * READY: 0\n * * CONNECTING: 1\n * * RECONNECTING: 2\n * * IDLE: 3\n * * NEARLY: 4\n * * DISCONNECTED: 5\n * * WAITING_FOR_GUILDS: 6\n * * IDENTIFYING: 7\n * * RESUMING: 8\n * @typedef {number} Status\n */\nexports.Status = {\n  READY: 0,\n  CONNECTING: 1,\n  RECONNECTING: 2,\n  IDLE: 3,\n  NEARLY: 4,\n  DISCONNECTED: 5,\n  WAITING_FOR_GUILDS: 6,\n  IDENTIFYING: 7,\n  RESUMING: 8,\n};\n\nexports.Opcodes = {\n  DISPATCH: 0,\n  HEARTBEAT: 1,\n  IDENTIFY: 2,\n  STATUS_UPDATE: 3,\n  VOICE_STATE_UPDATE: 4,\n  VOICE_GUILD_PING: 5,\n  RESUME: 6,\n  RECONNECT: 7,\n  REQUEST_GUILD_MEMBERS: 8,\n  INVALID_SESSION: 9,\n  HELLO: 10,\n  HEARTBEAT_ACK: 11,\n};\n\nexports.Events = {\n  RATE_LIMIT: 'rateLimit',\n  INVALID_REQUEST_WARNING: 'invalidRequestWarning',\n  CLIENT_READY: 'ready',\n  APPLICATION_COMMAND_CREATE: 'applicationCommandCreate',\n  APPLICATION_COMMAND_DELETE: 'applicationCommandDelete',\n  APPLICATION_COMMAND_UPDATE: 'applicationCommandUpdate',\n  GUILD_CREATE: 'guildCreate',\n  GUILD_DELETE: 'guildDelete',\n  GUILD_UPDATE: 'guildUpdate',\n  GUILD_UNAVAILABLE: 'guildUnavailable',\n  GUILD_MEMBER_ADD: 'guildMemberAdd',\n  GUILD_MEMBER_REMOVE: 'guildMemberRemove',\n  GUILD_MEMBER_UPDATE: 'guildMemberUpdate',\n  GUILD_MEMBER_AVAILABLE: 'guildMemberAvailable',\n  GUILD_MEMBERS_CHUNK: 'guildMembersChunk',\n  GUILD_INTEGRATIONS_UPDATE: 'guildIntegrationsUpdate',\n  GUILD_ROLE_CREATE: 'roleCreate',\n  GUILD_ROLE_DELETE: 'roleDelete',\n  INVITE_CREATE: 'inviteCreate',\n  INVITE_DELETE: 'inviteDelete',\n  GUILD_ROLE_UPDATE: 'roleUpdate',\n  GUILD_EMOJI_CREATE: 'emojiCreate',\n  GUILD_EMOJI_DELETE: 'emojiDelete',\n  GUILD_EMOJI_UPDATE: 'emojiUpdate',\n  GUILD_BAN_ADD: 'guildBanAdd',\n  GUILD_BAN_REMOVE: 'guildBanRemove',\n  CHANNEL_CREATE: 'channelCreate',\n  CHANNEL_DELETE: 'channelDelete',\n  CHANNEL_UPDATE: 'channelUpdate',\n  CHANNEL_PINS_UPDATE: 'channelPinsUpdate',\n  MESSAGE_CREATE: 'messageCreate',\n  MESSAGE_DELETE: 'messageDelete',\n  MESSAGE_UPDATE: 'messageUpdate',\n  MESSAGE_BULK_DELETE: 'messageDeleteBulk',\n  MESSAGE_REACTION_ADD: 'messageReactionAdd',\n  MESSAGE_REACTION_REMOVE: 'messageReactionRemove',\n  MESSAGE_REACTION_REMOVE_ALL: 'messageReactionRemoveAll',\n  MESSAGE_REACTION_REMOVE_EMOJI: 'messageReactionRemoveEmoji',\n  THREAD_CREATE: 'threadCreate',\n  THREAD_DELETE: 'threadDelete',\n  THREAD_UPDATE: 'threadUpdate',\n  THREAD_LIST_SYNC: 'threadListSync',\n  THREAD_MEMBER_UPDATE: 'threadMemberUpdate',\n  THREAD_MEMBERS_UPDATE: 'threadMembersUpdate',\n  USER_UPDATE: 'userUpdate',\n  PRESENCE_UPDATE: 'presenceUpdate',\n  VOICE_SERVER_UPDATE: 'voiceServerUpdate',\n  VOICE_STATE_UPDATE: 'voiceStateUpdate',\n  TYPING_START: 'typingStart',\n  WEBHOOKS_UPDATE: 'webhookUpdate',\n  INTERACTION_CREATE: 'interactionCreate',\n  ERROR: 'error',\n  WARN: 'warn',\n  DEBUG: 'debug',\n  SHARD_DISCONNECT: 'shardDisconnect',\n  SHARD_ERROR: 'shardError',\n  SHARD_RECONNECTING: 'shardReconnecting',\n  SHARD_READY: 'shardReady',\n  SHARD_RESUME: 'shardResume',\n  INVALIDATED: 'invalidated',\n  RAW: 'raw',\n  STAGE_INSTANCE_CREATE: 'stageInstanceCreate',\n  STAGE_INSTANCE_UPDATE: 'stageInstanceUpdate',\n  STAGE_INSTANCE_DELETE: 'stageInstanceDelete',\n  GUILD_STICKER_CREATE: 'stickerCreate',\n  GUILD_STICKER_DELETE: 'stickerDelete',\n  GUILD_STICKER_UPDATE: 'stickerUpdate',\n};\n\nexports.ShardEvents = {\n  CLOSE: 'close',\n  DESTROYED: 'destroyed',\n  INVALID_SESSION: 'invalidSession',\n  READY: 'ready',\n  RESUMED: 'resumed',\n  ALL_READY: 'allReady',\n};\n\n/**\n * The type of Structure allowed to be a partial:\n * * USER\n * * CHANNEL (only affects DMChannels)\n * * GUILD_MEMBER\n * * MESSAGE\n * * REACTION\n * <warn>Partials require you to put checks in place when handling data. See the \"Partial Structures\" topic on the\n * [guide](https://discordjs.guide/popular-topics/partials.html) for more information.</warn>\n * @typedef {string} PartialType\n */\nexports.PartialTypes = keyMirror(['USER', 'CHANNEL', 'GUILD_MEMBER', 'MESSAGE', 'REACTION']);\n\n/**\n * The type of a websocket message event, e.g. `MESSAGE_CREATE`. Here are the available events:\n * * READY\n * * RESUMED\n * * APPLICATION_COMMAND_CREATE\n * * APPLICATION_COMMAND_DELETE\n * * APPLICATION_COMMAND_UPDATE\n * * GUILD_CREATE\n * * GUILD_DELETE\n * * GUILD_UPDATE\n * * INVITE_CREATE\n * * INVITE_DELETE\n * * GUILD_MEMBER_ADD\n * * GUILD_MEMBER_REMOVE\n * * GUILD_MEMBER_UPDATE\n * * GUILD_MEMBERS_CHUNK\n * * GUILD_INTEGRATIONS_UPDATE\n * * GUILD_ROLE_CREATE\n * * GUILD_ROLE_DELETE\n * * GUILD_ROLE_UPDATE\n * * GUILD_BAN_ADD\n * * GUILD_BAN_REMOVE\n * * GUILD_EMOJIS_UPDATE\n * * CHANNEL_CREATE\n * * CHANNEL_DELETE\n * * CHANNEL_UPDATE\n * * CHANNEL_PINS_UPDATE\n * * MESSAGE_CREATE\n * * MESSAGE_DELETE\n * * MESSAGE_UPDATE\n * * MESSAGE_DELETE_BULK\n * * MESSAGE_REACTION_ADD\n * * MESSAGE_REACTION_REMOVE\n * * MESSAGE_REACTION_REMOVE_ALL\n * * MESSAGE_REACTION_REMOVE_EMOJI\n * * THREAD_CREATE\n * * THREAD_UPDATE\n * * THREAD_DELETE\n * * THREAD_LIST_SYNC\n * * THREAD_MEMBER_UPDATE\n * * THREAD_MEMBERS_UPDATE\n * * USER_UPDATE\n * * PRESENCE_UPDATE\n * * TYPING_START\n * * VOICE_STATE_UPDATE\n * * VOICE_SERVER_UPDATE\n * * WEBHOOKS_UPDATE\n * * INTERACTION_CREATE\n * * STAGE_INSTANCE_CREATE\n * * STAGE_INSTANCE_UPDATE\n * * STAGE_INSTANCE_DELETE\n * * GUILD_STICKERS_UPDATE\n * @typedef {string} WSEventType\n * @see {@link https://discord.com/developers/docs/topics/gateway#commands-and-events-gateway-events}\n */\nexports.WSEvents = keyMirror([\n  'READY',\n  'RESUMED',\n  'APPLICATION_COMMAND_CREATE',\n  'APPLICATION_COMMAND_DELETE',\n  'APPLICATION_COMMAND_UPDATE',\n  'GUILD_CREATE',\n  'GUILD_DELETE',\n  'GUILD_UPDATE',\n  'INVITE_CREATE',\n  'INVITE_DELETE',\n  'GUILD_MEMBER_ADD',\n  'GUILD_MEMBER_REMOVE',\n  'GUILD_MEMBER_UPDATE',\n  'GUILD_MEMBERS_CHUNK',\n  'GUILD_INTEGRATIONS_UPDATE',\n  'GUILD_ROLE_CREATE',\n  'GUILD_ROLE_DELETE',\n  'GUILD_ROLE_UPDATE',\n  'GUILD_BAN_ADD',\n  'GUILD_BAN_REMOVE',\n  'GUILD_EMOJIS_UPDATE',\n  'CHANNEL_CREATE',\n  'CHANNEL_DELETE',\n  'CHANNEL_UPDATE',\n  'CHANNEL_PINS_UPDATE',\n  'MESSAGE_CREATE',\n  'MESSAGE_DELETE',\n  'MESSAGE_UPDATE',\n  'MESSAGE_DELETE_BULK',\n  'MESSAGE_REACTION_ADD',\n  'MESSAGE_REACTION_REMOVE',\n  'MESSAGE_REACTION_REMOVE_ALL',\n  'MESSAGE_REACTION_REMOVE_EMOJI',\n  'THREAD_CREATE',\n  'THREAD_UPDATE',\n  'THREAD_DELETE',\n  'THREAD_LIST_SYNC',\n  'THREAD_MEMBER_UPDATE',\n  'THREAD_MEMBERS_UPDATE',\n  'USER_UPDATE',\n  'PRESENCE_UPDATE',\n  'TYPING_START',\n  'VOICE_STATE_UPDATE',\n  'VOICE_SERVER_UPDATE',\n  'WEBHOOKS_UPDATE',\n  'INTERACTION_CREATE',\n  'STAGE_INSTANCE_CREATE',\n  'STAGE_INSTANCE_UPDATE',\n  'STAGE_INSTANCE_DELETE',\n  'GUILD_STICKERS_UPDATE',\n]);\n\n/**\n * A valid scope to request when generating an invite link.\n * <warn>Scopes that require whitelist are not considered valid for this generator</warn>\n * * `applications.builds.read`: allows reading build data for a users applications\n * * `applications.commands`: allows this bot to create commands in the server\n * * `applications.entitlements`: allows reading entitlements for a users applications\n * * `applications.store.update`: allows reading and updating of store data for a users applications\n * * `bot`: makes the bot join the selected guild\n * * `connections`: makes the endpoint for getting a users connections available\n * * `email`: allows the `/users/@me` endpoint return with an email\n * * `identify`: allows the `/users/@me` endpoint without an email\n * * `guilds`: makes the `/users/@me/guilds` endpoint available for a user\n * * `guilds.join`: allows the bot to join the user to any guild it is in using Guild#addMember\n * * `gdm.join`: allows joining the user to a group dm\n * * `webhook.incoming`: generates a webhook to a channel\n * @typedef {string} InviteScope\n * @see {@link https://discord.com/developers/docs/topics/oauth2#shared-resources-oauth2-scopes}\n */\nexports.InviteScopes = [\n  'applications.builds.read',\n  'applications.commands',\n  'applications.entitlements',\n  'applications.store.update',\n  'bot',\n  'connections',\n  'email',\n  'identify',\n  'guilds',\n  'guilds.join',\n  'gdm.join',\n  'webhook.incoming',\n];\n\n/**\n * The type of a message, e.g. `DEFAULT`. Here are the available types:\n * * DEFAULT\n * * RECIPIENT_ADD\n * * RECIPIENT_REMOVE\n * * CALL\n * * CHANNEL_NAME_CHANGE\n * * CHANNEL_ICON_CHANGE\n * * CHANNEL_PINNED_MESSAGE\n * * GUILD_MEMBER_JOIN\n * * USER_PREMIUM_GUILD_SUBSCRIPTION\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2\n * * USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3\n * * CHANNEL_FOLLOW_ADD\n * * GUILD_DISCOVERY_DISQUALIFIED\n * * GUILD_DISCOVERY_REQUALIFIED\n * * GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING\n * * GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING\n * * THREAD_CREATED\n * * REPLY\n * * APPLICATION_COMMAND\n * * THREAD_STARTER_MESSAGE\n * * GUILD_INVITE_REMINDER\n * @typedef {string} MessageType\n * @see {@link https://discord.com/developers/docs/resources/channel#message-object-message-types}\n */\nexports.MessageTypes = [\n  'DEFAULT',\n  'RECIPIENT_ADD',\n  'RECIPIENT_REMOVE',\n  'CALL',\n  'CHANNEL_NAME_CHANGE',\n  'CHANNEL_ICON_CHANGE',\n  'CHANNEL_PINNED_MESSAGE',\n  'GUILD_MEMBER_JOIN',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2',\n  'USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3',\n  'CHANNEL_FOLLOW_ADD',\n  null,\n  'GUILD_DISCOVERY_DISQUALIFIED',\n  'GUILD_DISCOVERY_REQUALIFIED',\n  'GUILD_DISCOVERY_GRACE_PERIOD_INITIAL_WARNING',\n  'GUILD_DISCOVERY_GRACE_PERIOD_FINAL_WARNING',\n  'THREAD_CREATED',\n  'REPLY',\n  'APPLICATION_COMMAND',\n  'THREAD_STARTER_MESSAGE',\n  'GUILD_INVITE_REMINDER',\n];\n\n/**\n * The types of messages that are `System`. The available types are `MessageTypes` excluding:\n * * DEFAULT\n * * REPLY\n * * APPLICATION_COMMAND\n * @typedef {string} SystemMessageType\n */\nexports.SystemMessageTypes = exports.MessageTypes.filter(\n  type => type && !['DEFAULT', 'REPLY', 'APPLICATION_COMMAND'].includes(type),\n);\n\n/**\n * <info>Bots cannot set a `CUSTOM` activity type, it is only for custom statuses received from users</info>\n * The type of an activity of a user's presence. Here are the available types:\n * * PLAYING\n * * STREAMING\n * * LISTENING\n * * WATCHING\n * * CUSTOM\n * * COMPETING\n * @typedef {string} ActivityType\n * @see {@link https://discord.com/developers/docs/game-sdk/activities#data-models-activitytype-enum}\n */\nexports.ActivityTypes = createEnum(['PLAYING', 'STREAMING', 'LISTENING', 'WATCHING', 'CUSTOM', 'COMPETING']);\n\n/**\n * All available channel types:\n * * `GUILD_TEXT` - a guild text channel\n * * `DM` - a DM channel\n * * `GUILD_VOICE` - a guild voice channel\n * * `GROUP_DM` - a group DM channel\n * * `GUILD_CATEGORY` - a guild category channel\n * * `GUILD_NEWS` - a guild news channel\n * * `GUILD_STORE` - a guild store channel\n * * `GUILD_NEWS_THREAD` - a guild news channel's public thread channel\n * * `GUILD_PUBLIC_THREAD` - a guild text channel's public thread channel\n * * `GUILD_PRIVATE_THREAD` - a guild text channel's private thread channel\n * * `GUILD_STAGE_VOICE` - a guild stage voice channel\n * * `UNKNOWN` - a generic channel of unknown type, could be Channel or GuildChannel\n * @typedef {string} ChannelType\n * @see {@link https://discord.com/developers/docs/resources/channel#channel-object-channel-types}\n */\nexports.ChannelTypes = createEnum([\n  'GUILD_TEXT',\n  'DM',\n  'GUILD_VOICE',\n  'GROUP_DM',\n  'GUILD_CATEGORY',\n  'GUILD_NEWS',\n  'GUILD_STORE',\n  ...Array(3).fill(null),\n  // 10\n  'GUILD_NEWS_THREAD',\n  'GUILD_PUBLIC_THREAD',\n  'GUILD_PRIVATE_THREAD',\n  'GUILD_STAGE_VOICE',\n]);\n\n/**\n * The channels that are text-based.\n * * DMChannel\n * * TextChannel\n * * NewsChannel\n * * ThreadChannel\n * @typedef {DMChannel|TextChannel|NewsChannel|ThreadChannel} TextBasedChannels\n */\n\n/**\n * The types of channels that are text-based. The available types are:\n * * DM\n * * GUILD_TEXT\n * * GUILD_NEWS\n * * GUILD_NEWS_THREAD\n * * GUILD_PUBLIC_THREAD\n * * GUILD_PRIVATE_THREAD\n * @typedef {string} TextBasedChannelTypes\n */\nexports.TextBasedChannelTypes = [\n  'DM',\n  'GUILD_TEXT',\n  'GUILD_NEWS',\n  'GUILD_NEWS_THREAD',\n  'GUILD_PUBLIC_THREAD',\n  'GUILD_PRIVATE_THREAD',\n];\n\n/**\n * The types of channels that are threads. The available types are:\n * * GUILD_NEWS_THREAD\n * * GUILD_PUBLIC_THREAD\n * * GUILD_PRIVATE_THREAD\n * @typedef {string} ThreadChannelTypes\n */\nexports.ThreadChannelTypes = ['GUILD_NEWS_THREAD', 'GUILD_PUBLIC_THREAD', 'GUILD_PRIVATE_THREAD'];\n\n/**\n * The types of channels that are voice-based. The available types are:\n * * GUILD_VOICE\n * * GUILD_STAGE_VOICE\n * @typedef {string} VoiceBasedChannelTypes\n */\nexports.VoiceBasedChannelTypes = ['GUILD_VOICE', 'GUILD_STAGE_VOICE'];\n\nexports.ClientApplicationAssetTypes = {\n  SMALL: 1,\n  BIG: 2,\n};\n\nexports.Colors = {\n  DEFAULT: 0x000000,\n  WHITE: 0xffffff,\n  AQUA: 0x1abc9c,\n  GREEN: 0x57f287,\n  BLUE: 0x3498db,\n  YELLOW: 0xfee75c,\n  PURPLE: 0x9b59b6,\n  LUMINOUS_VIVID_PINK: 0xe91e63,\n  FUCHSIA: 0xeb459e,\n  GOLD: 0xf1c40f,\n  ORANGE: 0xe67e22,\n  RED: 0xed4245,\n  GREY: 0x95a5a6,\n  NAVY: 0x34495e,\n  DARK_AQUA: 0x11806a,\n  DARK_GREEN: 0x1f8b4c,\n  DARK_BLUE: 0x206694,\n  DARK_PURPLE: 0x71368a,\n  DARK_VIVID_PINK: 0xad1457,\n  DARK_GOLD: 0xc27c0e,\n  DARK_ORANGE: 0xa84300,\n  DARK_RED: 0x992d22,\n  DARK_GREY: 0x979c9f,\n  DARKER_GREY: 0x7f8c8d,\n  LIGHT_GREY: 0xbcc0c0,\n  DARK_NAVY: 0x2c3e50,\n  BLURPLE: 0x5865f2,\n  GREYPLE: 0x99aab5,\n  DARK_BUT_NOT_BLACK: 0x2c2f33,\n  NOT_QUITE_BLACK: 0x23272a,\n};\n\n/**\n * The value set for the explicit content filter levels for a guild:\n * * DISABLED\n * * MEMBERS_WITHOUT_ROLES\n * * ALL_MEMBERS\n * @typedef {string} ExplicitContentFilterLevel\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level}\n */\nexports.ExplicitContentFilterLevels = createEnum(['DISABLED', 'MEMBERS_WITHOUT_ROLES', 'ALL_MEMBERS']);\n\n/**\n * The value set for the verification levels for a guild:\n * * NONE\n * * LOW\n * * MEDIUM\n * * HIGH\n * * VERY_HIGH\n * @typedef {string} VerificationLevel\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-verification-level}\n */\nexports.VerificationLevels = createEnum(['NONE', 'LOW', 'MEDIUM', 'HIGH', 'VERY_HIGH']);\n\n/**\n * An error encountered while performing an API request. Here are the potential errors:\n * * UNKNOWN_ACCOUNT\n * * UNKNOWN_APPLICATION\n * * UNKNOWN_CHANNEL\n * * UNKNOWN_GUILD\n * * UNKNOWN_INTEGRATION\n * * UNKNOWN_INVITE\n * * UNKNOWN_MEMBER\n * * UNKNOWN_MESSAGE\n * * UNKNOWN_OVERWRITE\n * * UNKNOWN_PROVIDER\n * * UNKNOWN_ROLE\n * * UNKNOWN_TOKEN\n * * UNKNOWN_USER\n * * UNKNOWN_EMOJI\n * * UNKNOWN_WEBHOOK\n * * UNKNOWN_WEBHOOK_SERVICE\n * * UNKNOWN_SESSION\n * * UNKNOWN_BAN\n * * UNKNOWN_SKU\n * * UNKNOWN_STORE_LISTING\n * * UNKNOWN_ENTITLEMENT\n * * UNKNOWN_BUILD\n * * UNKNOWN_LOBBY\n * * UNKNOWN_BRANCH\n * * UNKNOWN_STORE_DIRECTORY_LAYOUT\n * * UNKNOWN_REDISTRIBUTABLE\n * * UNKNOWN_GIFT_CODE\n * * UNKNOWN_STREAM\n * * UNKNOWN_PREMIUM_SERVER_SUBSCRIBE_COOLDOWN\n * * UNKNOWN_GUILD_TEMPLATE\n * * UNKNOWN_DISCOVERABLE_SERVER_CATEGORY\n * * UNKNOWN_STICKER\n * * UNKNOWN_INTERACTION\n * * UNKNOWN_APPLICATION_COMMAND\n * * UNKNOWN_APPLICATION_COMMAND_PERMISSIONS\n * * UNKNOWN_STAGE_INSTANCE\n * * UNKNOWN_GUILD_MEMBER_VERIFICATION_FORM\n * * UNKNOWN_GUILD_WELCOME_SCREEN\n * * UNKNOWN_GUILD_SCHEDULED_EVENT\n * * UNKNOWN_GUILD_SCHEDULED_EVENT_USER\n * * BOT_PROHIBITED_ENDPOINT\n * * BOT_ONLY_ENDPOINT\n * * CANNOT_SEND_EXPLICIT_CONTENT\n * * NOT_AUTHORIZED\n * * SLOWMODE_RATE_LIMIT\n * * ACCOUNT_OWNER_ONLY\n * * ANNOUNCEMENT_EDIT_LIMIT_EXCEEDED\n * * CHANNEL_HIT_WRITE_RATELIMIT\n * * CONTENT_NOT_ALLOWED\n * * MAXIMUM_GUILDS\n * * MAXIMUM_FRIENDS\n * * MAXIMUM_PINS\n * * MAXIMUM_RECIPIENTS\n * * MAXIMUM_ROLES\n * * MAXIMUM_WEBHOOKS\n * * MAXIMUM_EMOJIS\n * * MAXIMUM_REACTIONS\n * * MAXIMUM_CHANNELS\n * * MAXIMUM_ATTACHMENTS\n * * MAXIMUM_INVITES\n * * MAXIMUM_ANIMATED_EMOJIS\n * * MAXIMUM_SERVER_MEMBERS\n * * MAXIMUM_NUMBER_OF_SERVER_CATEGORIES\n * * GUILD_ALREADY_HAS_TEMPLATE\n * * MAXIMUM_THREAD_PARTICIPANTS\n * * MAXIMUM_NON_GUILD_MEMBERS_BANS\n * * MAXIMUM_BAN_FETCHES\n * * MAXIMUM_NUMBER_OF_STICKERS_REACHED\n * * UNAUTHORIZED\n * * ACCOUNT_VERIFICATION_REQUIRED\n * * DIRECT_MESSAGES_TOO_FAST\n * * REQUEST_ENTITY_TOO_LARGE\n * * FEATURE_TEMPORARILY_DISABLED\n * * USER_BANNED\n * * TARGET_USER_NOT_CONNECTED_TO_VOICE\n * * ALREADY_CROSSPOSTED\n * * MISSING_ACCESS\n * * INVALID_ACCOUNT_TYPE\n * * CANNOT_EXECUTE_ON_DM\n * * EMBED_DISABLED\n * * CANNOT_EDIT_MESSAGE_BY_OTHER\n * * CANNOT_SEND_EMPTY_MESSAGE\n * * CANNOT_MESSAGE_USER\n * * CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL\n * * CHANNEL_VERIFICATION_LEVEL_TOO_HIGH\n * * OAUTH2_APPLICATION_BOT_ABSENT\n * * MAXIMUM_OAUTH2_APPLICATIONS\n * * INVALID_OAUTH_STATE\n * * MISSING_PERMISSIONS\n * * INVALID_AUTHENTICATION_TOKEN\n * * NOTE_TOO_LONG\n * * INVALID_BULK_DELETE_QUANTITY\n * * CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL\n * * INVALID_OR_TAKEN_INVITE_CODE\n * * CANNOT_EXECUTE_ON_SYSTEM_MESSAGE\n * * CANNOT_EXECUTE_ON_CHANNEL_TYPE\n * * INVALID_OAUTH_TOKEN\n * * MISSING_OAUTH_SCOPE\n * * INVALID_WEBHOOK_TOKEN\n * * INVALID_ROLE\n * * INVALID_RECIPIENTS\n * * BULK_DELETE_MESSAGE_TOO_OLD\n * * INVALID_FORM_BODY\n * * INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT\n * * INVALID_API_VERSION\n * * CANNOT_SELF_REDEEM_GIFT\n * * PAYMENT_SOURCE_REQUIRED\n * * CANNOT_DELETE_COMMUNITY_REQUIRED_CHANNEL\n * * INVALID_STICKER_SENT\n * * INVALID_OPERATION_ON_ARCHIVED_THREAD\n * * INVALID_THREAD_NOTIFICATION_SETTINGS\n * * PARAMETER_EARLIER_THAN_CREATION\n * * GUILD_NOT_AVAILABLE_IN_LOCATION\n * * GUILD_MONETIZATION_REQUIRED\n * * TWO_FACTOR_REQUIRED\n * * NO_USERS_WITH_DISCORDTAG_EXIST\n * * REACTION_BLOCKED\n * * RESOURCE_OVERLOADED\n * * STAGE_ALREADY_OPEN\n * * MESSAGE_ALREADY_HAS_THREAD\n * * THREAD_LOCKED\n * * MAXIMUM_ACTIVE_THREADS\n * * MAXIMUM_ACTIVE_ANNOUCEMENT_THREAD\n * @typedef {string} APIError\n * @see {@link https://discord.com/developers/docs/topics/opcodes-and-status-codes#json-json-error-codes}\n */\nexports.APIErrors = {\n  UNKNOWN_ACCOUNT: 10001,\n  UNKNOWN_APPLICATION: 10002,\n  UNKNOWN_CHANNEL: 10003,\n  UNKNOWN_GUILD: 10004,\n  UNKNOWN_INTEGRATION: 10005,\n  UNKNOWN_INVITE: 10006,\n  UNKNOWN_MEMBER: 10007,\n  UNKNOWN_MESSAGE: 10008,\n  UNKNOWN_OVERWRITE: 10009,\n  UNKNOWN_PROVIDER: 10010,\n  UNKNOWN_ROLE: 10011,\n  UNKNOWN_TOKEN: 10012,\n  UNKNOWN_USER: 10013,\n  UNKNOWN_EMOJI: 10014,\n  UNKNOWN_WEBHOOK: 10015,\n  UNKNOWN_WEBHOOK_SERVICE: 10016,\n  UNKNOWN_SESSION: 10020,\n  UNKNOWN_BAN: 10026,\n  UNKNOWN_SKU: 10027,\n  UNKNOWN_STORE_LISTING: 10028,\n  UNKNOWN_ENTITLEMENT: 10029,\n  UNKNOWN_BUILD: 10030,\n  UNKNOWN_LOBBY: 10031,\n  UNKNOWN_BRANCH: 10032,\n  UNKNOWN_STORE_DIRECTORY_LAYOUT: 10033,\n  UNKNOWN_REDISTRIBUTABLE: 10036,\n  UNKNOWN_GIFT_CODE: 10038,\n  UNKNOWN_STREAM: 10049,\n  UNKNOWN_PREMIUM_SERVER_SUBSCRIBE_COOLDOWN: 10050,\n  UNKNOWN_GUILD_TEMPLATE: 10057,\n  UNKNOWN_DISCOVERABLE_SERVER_CATEGORY: 10059,\n  UNKNOWN_STICKER: 10060,\n  UNKNOWN_INTERACTION: 10062,\n  UNKNOWN_APPLICATION_COMMAND: 10063,\n  UNKNOWN_APPLICATION_COMMAND_PERMISSIONS: 10066,\n  UNKNOWN_STAGE_INSTANCE: 10067,\n  UNKNOWN_GUILD_MEMBER_VERIFICATION_FORM: 10068,\n  UNKNOWN_GUILD_WELCOME_SCREEN: 10069,\n  UNKNOWN_GUILD_SCHEDULED_EVENT: 10070,\n  UNKNOWN_GUILD_SCHEDULED_EVENT_USER: 10071,\n  BOT_PROHIBITED_ENDPOINT: 20001,\n  BOT_ONLY_ENDPOINT: 20002,\n  CANNOT_SEND_EXPLICIT_CONTENT: 20009,\n  NOT_AUTHORIZED: 20012,\n  SLOWMODE_RATE_LIMIT: 20016,\n  ACCOUNT_OWNER_ONLY: 20018,\n  ANNOUNCEMENT_EDIT_LIMIT_EXCEEDED: 20022,\n  CHANNEL_HIT_WRITE_RATELIMIT: 20028,\n  CONTENT_NOT_ALLOWED: 20031,\n  GUILD_PREMIUM_LEVEL_TOO_LOW: 20035,\n  MAXIMUM_GUILDS: 30001,\n  MAXIMUM_FRIENDS: 30002,\n  MAXIMUM_PINS: 30003,\n  MAXIMUM_RECIPIENTS: 30004,\n  MAXIMUM_ROLES: 30005,\n  MAXIMUM_WEBHOOKS: 30007,\n  MAXIMUM_EMOJIS: 30008,\n  MAXIMUM_REACTIONS: 30010,\n  MAXIMUM_CHANNELS: 30013,\n  MAXIMUM_ATTACHMENTS: 30015,\n  MAXIMUM_INVITES: 30016,\n  MAXIMUM_ANIMATED_EMOJIS: 30018,\n  MAXIMUM_SERVER_MEMBERS: 30019,\n  MAXIMUM_NUMBER_OF_SERVER_CATEGORIES: 30030,\n  GUILD_ALREADY_HAS_TEMPLATE: 30031,\n  MAXIMUM_THREAD_PARTICIPANTS: 30033,\n  MAXIMUM_NON_GUILD_MEMBERS_BANS: 30035,\n  MAXIMUM_BAN_FETCHES: 30037,\n  MAXIMUM_NUMBER_OF_STICKERS_REACHED: 30039,\n  UNAUTHORIZED: 40001,\n  ACCOUNT_VERIFICATION_REQUIRED: 40002,\n  DIRECT_MESSAGES_TOO_FAST: 40003,\n  REQUEST_ENTITY_TOO_LARGE: 40005,\n  FEATURE_TEMPORARILY_DISABLED: 40006,\n  USER_BANNED: 40007,\n  TARGET_USER_NOT_CONNECTED_TO_VOICE: 40032,\n  ALREADY_CROSSPOSTED: 40033,\n  MISSING_ACCESS: 50001,\n  INVALID_ACCOUNT_TYPE: 50002,\n  CANNOT_EXECUTE_ON_DM: 50003,\n  EMBED_DISABLED: 50004,\n  CANNOT_EDIT_MESSAGE_BY_OTHER: 50005,\n  CANNOT_SEND_EMPTY_MESSAGE: 50006,\n  CANNOT_MESSAGE_USER: 50007,\n  CANNOT_SEND_MESSAGES_IN_VOICE_CHANNEL: 50008,\n  CHANNEL_VERIFICATION_LEVEL_TOO_HIGH: 50009,\n  OAUTH2_APPLICATION_BOT_ABSENT: 50010,\n  MAXIMUM_OAUTH2_APPLICATIONS: 50011,\n  INVALID_OAUTH_STATE: 50012,\n  MISSING_PERMISSIONS: 50013,\n  INVALID_AUTHENTICATION_TOKEN: 50014,\n  NOTE_TOO_LONG: 50015,\n  INVALID_BULK_DELETE_QUANTITY: 50016,\n  CANNOT_PIN_MESSAGE_IN_OTHER_CHANNEL: 50019,\n  INVALID_OR_TAKEN_INVITE_CODE: 50020,\n  CANNOT_EXECUTE_ON_SYSTEM_MESSAGE: 50021,\n  CANNOT_EXECUTE_ON_CHANNEL_TYPE: 50024,\n  INVALID_OAUTH_TOKEN: 50025,\n  MISSING_OAUTH_SCOPE: 50026,\n  INVALID_WEBHOOK_TOKEN: 50027,\n  INVALID_ROLE: 50028,\n  INVALID_RECIPIENTS: 50033,\n  BULK_DELETE_MESSAGE_TOO_OLD: 50034,\n  INVALID_FORM_BODY: 50035,\n  INVITE_ACCEPTED_TO_GUILD_NOT_CONTAINING_BOT: 50036,\n  INVALID_API_VERSION: 50041,\n  FILE_UPLOADED_EXCEEDS_MAXIMUM_SIZE: 50045,\n  INVALID_FILE_UPLOADED: 50046,\n  CANNOT_SELF_REDEEM_GIFT: 50054,\n  PAYMENT_SOURCE_REQUIRED: 50070,\n  CANNOT_DELETE_COMMUNITY_REQUIRED_CHANNEL: 50074,\n  INVALID_STICKER_SENT: 50081,\n  INVALID_OPERATION_ON_ARCHIVED_THREAD: 50083,\n  INVALID_THREAD_NOTIFICATION_SETTINGS: 50084,\n  PARAMETER_EARLIER_THAN_CREATION: 50085,\n  GUILD_NOT_AVAILABLE_IN_LOCATION: 50095,\n  GUILD_MONETIZATION_REQUIRED: 50097,\n  TWO_FACTOR_REQUIRED: 60003,\n  NO_USERS_WITH_DISCORDTAG_EXIST: 80004,\n  REACTION_BLOCKED: 90001,\n  RESOURCE_OVERLOADED: 130000,\n  STAGE_ALREADY_OPEN: 150006,\n  MESSAGE_ALREADY_HAS_THREAD: 160004,\n  THREAD_LOCKED: 160005,\n  MAXIMUM_ACTIVE_THREADS: 160006,\n  MAXIMUM_ACTIVE_ANNOUNCEMENT_THREADS: 160007,\n  INVALID_JSON_FOR_UPLOADED_LOTTIE_FILE: 170001,\n  UPLOADED_LOTTIES_CANNOT_CONTAIN_RASTERIZED_IMAGES: 170002,\n  STICKER_MAXIMUM_FRAMERATE_EXCEEDED: 170003,\n  STICKER_FRAME_COUNT_EXCEEDS_MAXIMUM_OF_1000_FRAMES: 170004,\n  LOTTIE_ANIMATION_MAXIMUM_DIMENSIONS_EXCEEDED: 170005,\n  STICKER_FRAME_RATE_IS_TOO_SMALL_OR_TOO_LARGE: 170006,\n  STICKER_ANIMATION_DURATION_EXCEEDS_MAXIMUM_OF_5_SECONDS: 170007,\n};\n\n/**\n * The value set for a guild's default message notifications, e.g. `ALL_MESSAGES`. Here are the available types:\n * * ALL_MESSAGES\n * * ONLY_MENTIONS\n * @typedef {string} DefaultMessageNotificationLevel\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-default-message-notification-level}\n */\nexports.DefaultMessageNotificationLevels = createEnum(['ALL_MESSAGES', 'ONLY_MENTIONS']);\n\n/**\n * The value set for a team member's membership state:\n * * INVITED\n * * ACCEPTED\n * @typedef {string} MembershipState\n * @see {@link https://discord.com/developers/docs/topics/teams#data-models-membership-state-enum}\n */\nexports.MembershipStates = createEnum([null, 'INVITED', 'ACCEPTED']);\n\n/**\n * The value set for a webhook's type:\n * * Incoming\n * * Channel Follower\n * * Application\n * @typedef {string} WebhookType\n * @see {@link https://discord.com/developers/docs/resources/webhook#webhook-object-webhook-types}\n */\nexports.WebhookTypes = createEnum([null, 'Incoming', 'Channel Follower', 'Application']);\n\n/**\n * The value set for a sticker's type:\n * * STANDARD\n * * GUILD\n * @typedef {string} StickerType\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-types}\n */\nexports.StickerTypes = createEnum([null, 'STANDARD', 'GUILD']);\n\n/**\n * The value set for a sticker's format type:\n * * PNG\n * * APNG\n * * LOTTIE\n * @typedef {string} StickerFormatType\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-object-sticker-format-types}\n */\nexports.StickerFormatTypes = createEnum([null, 'PNG', 'APNG', 'LOTTIE']);\n\n/**\n * An overwrite type:\n * * role\n * * member\n * @typedef {string} OverwriteType\n * @see {@link https://discord.com/developers/docs/resources/channel#overwrite-object-overwrite-structure}\n */\nexports.OverwriteTypes = createEnum(['role', 'member']);\n\n/* eslint-disable max-len */\n/**\n * The type of an {@link ApplicationCommand} object:\n * * CHAT_INPUT\n * * USER\n * * MESSAGE\n * @typedef {string} ApplicationCommandType\n */\nexports.ApplicationCommandTypes = createEnum([null, 'CHAT_INPUT', 'USER', 'MESSAGE']);\n\n/**\n * The type of an {@link ApplicationCommandOption} object:\n * * SUB_COMMAND\n * * SUB_COMMAND_GROUP\n * * STRING\n * * INTEGER\n * * BOOLEAN\n * * USER\n * * CHANNEL\n * * ROLE\n * * MENTIONABLE\n * * NUMBER\n * @typedef {string} ApplicationCommandOptionType\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-type}\n */\nexports.ApplicationCommandOptionTypes = createEnum([\n  null,\n  'SUB_COMMAND',\n  'SUB_COMMAND_GROUP',\n  'STRING',\n  'INTEGER',\n  'BOOLEAN',\n  'USER',\n  'CHANNEL',\n  'ROLE',\n  'MENTIONABLE',\n  'NUMBER',\n]);\n\n/**\n * The type of an {@link ApplicationCommandPermissions} object:\n * * ROLE\n * * USER\n * @typedef {string} ApplicationCommandPermissionType\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permission-type}\n */\nexports.ApplicationCommandPermissionTypes = createEnum([null, 'ROLE', 'USER']);\n\n/**\n * The type of an {@link Interaction} object:\n * * PING\n * * APPLICATION_COMMAND\n * * MESSAGE_COMPONENT\n * @typedef {string} InteractionType\n * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-request-type}\n */\nexports.InteractionTypes = createEnum([null, 'PING', 'APPLICATION_COMMAND', 'MESSAGE_COMPONENT']);\n\n/**\n * The type of an interaction response:\n * * PONG\n * * CHANNEL_MESSAGE_WITH_SOURCE\n * * DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE\n * * DEFERRED_MESSAGE_UPDATE\n * * UPDATE_MESSAGE\n * @typedef {string} InteractionResponseType\n * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-type}\n */\nexports.InteractionResponseTypes = createEnum([\n  null,\n  'PONG',\n  null,\n  null,\n  'CHANNEL_MESSAGE_WITH_SOURCE',\n  'DEFERRED_CHANNEL_MESSAGE_WITH_SOURCE',\n  'DEFERRED_MESSAGE_UPDATE',\n  'UPDATE_MESSAGE',\n]);\n/* eslint-enable max-len */\n\n/**\n * The type of a message component\n * * ACTION_ROW\n * * BUTTON\n * * SELECT_MENU\n * @typedef {string} MessageComponentType\n * @see {@link https://discord.com/developers/docs/interactions/message-components#component-object-component-types}\n */\nexports.MessageComponentTypes = createEnum([null, 'ACTION_ROW', 'BUTTON', 'SELECT_MENU']);\n\n/**\n * The style of a message button\n * * PRIMARY\n * * SECONDARY\n * * SUCCESS\n * * DANGER\n * * LINK\n * @typedef {string} MessageButtonStyle\n * @see {@link https://discord.com/developers/docs/interactions/message-components#button-object-button-styles}\n */\nexports.MessageButtonStyles = createEnum([null, 'PRIMARY', 'SECONDARY', 'SUCCESS', 'DANGER', 'LINK']);\n\n/**\n * The required MFA level for a guild\n * * NONE\n * * ELEVATED\n * @typedef {string} MFALevel\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-mfa-level}\n */\nexports.MFALevels = createEnum(['NONE', 'ELEVATED']);\n\n/**\n * NSFW level of a Guild:\n * * DEFAULT\n * * EXPLICIT\n * * SAFE\n * * AGE_RESTRICTED\n * @typedef {string} NSFWLevel\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-guild-nsfw-level}\n */\nexports.NSFWLevels = createEnum(['DEFAULT', 'EXPLICIT', 'SAFE', 'AGE_RESTRICTED']);\n\n/**\n * Privacy level of a {@link StageInstance} object:\n * * PUBLIC\n * * GUILD_ONLY\n * @typedef {string} PrivacyLevel\n * @see {@link https://discord.com/developers/docs/resources/stage-instance#stage-instance-object-privacy-level}\n */\nexports.PrivacyLevels = createEnum([null, 'PUBLIC', 'GUILD_ONLY']);\n\n/**\n * The premium tier (Server Boost level) of a guild:\n * * NONE\n * * TIER_1\n * * TIER_2\n * * TIER_3\n * @typedef {string} PremiumTier\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-premium-tier}\n */\nexports.PremiumTiers = createEnum(['NONE', 'TIER_1', 'TIER_2', 'TIER_3']);\n\nexports._cleanupSymbol = Symbol('djsCleanup');\n\nfunction keyMirror(arr) {\n  let tmp = Object.create(null);\n  for (const value of arr) tmp[value] = value;\n  return tmp;\n}\n\nfunction createEnum(keys) {\n  const obj = {};\n  for (const [index, key] of keys.entries()) {\n    if (key === null) continue;\n    obj[key] = index;\n    obj[index] = key;\n  }\n  return obj;\n}\n\n/**\n * @typedef {Object} Constants Constants that can be used in an enum or object-like way.\n * @property {ActivityType} ActivityTypes The type of an activity of a users presence.\n * @property {APIError} APIErrors An error encountered while performing an API request.\n * @property {ApplicationCommandOptionType} ApplicationCommandOptionTypes\n * The type of an {@link ApplicationCommandOption} object.\n * @property {ApplicationCommandPermissionType} ApplicationCommandPermissionTypes\n * The type of an {@link ApplicationCommandPermissions} object.\n * @property {ChannelType} ChannelTypes All available channel types.\n * @property {DefaultMessageNotificationLevel} DefaultMessageNotificationLevels\n * The value set for a guild's default message notifications.\n * @property {ExplicitContentFilterLevel} ExplicitContentFilterLevels\n * The value set for the explicit content filter levels for a guild.\n * @property {InteractionResponseType} InteractionResponseTypes The type of an interaction response.\n * @property {InteractionType} InteractionTypes The type of an {@link Interaction} object.\n * @property {MembershipState} MembershipStates The value set for a team member's membership state.\n * @property {MessageButtonStyle} MessageButtonStyles The style of a message button.\n * @property {MessageComponentType} MessageComponentTypes The type of a message component.\n * @property {MFALevel} MFALevels The required MFA level for a guild.\n * @property {NSFWLevel} NSFWLevels NSFW level of a guild.\n * @property {OverwriteType} OverwriteTypes An overwrite type.\n * @property {PartialType} PartialTypes The type of Structure allowed to be a partial.\n * @property {PremiumTier} PremiumTiers The premium tier (Server Boost level) of a guild.\n * @property {PrivacyLevel} PrivacyLevels Privacy level of a {@link StageInstance} object.\n * @property {Status} Status The available statuses of the client.\n * @property {StickerFormatType} StickerFormatTypes The value set for a sticker's format type.\n * @property {StickerType} StickerTypes The value set for a sticker's type.\n * @property {VerificationLevel} VerificationLevels The value set for the verification levels for a guild.\n * @property {WebhookType} WebhookTypes The value set for a webhook's type.\n * @property {WSEventType} WSEvents The type of a websocket message event.\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}