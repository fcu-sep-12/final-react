{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SlashCommandSubcommandBuilder = exports.SlashCommandSubcommandGroupBuilder = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nrequire(\"discord-api-types/v9\");\n\nconst ts_mixer_1 = require(\"ts-mixer\");\n\nconst Assertions_1 = require(\"./Assertions\");\n\nconst CommandOptions_1 = require(\"./mixins/CommandOptions\");\n\nconst NameAndDescription_1 = require(\"./mixins/NameAndDescription\");\n/**\n * Represents a folder for subcommands\n *\n * For more information, go to https://discord.com/developers/docs/interactions/slash-commands#subcommands-and-subcommand-groups\n */\n\n\nlet SlashCommandSubcommandGroupBuilder = class SlashCommandSubcommandGroupBuilder {\n  constructor() {\n    /**\n     * The name of this subcommand group\n     */\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: undefined\n    });\n    /**\n     * The description of this subcommand group\n     */\n\n    Object.defineProperty(this, \"description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: undefined\n    });\n    /**\n     * The subcommands part of this subcommand group\n     */\n\n    Object.defineProperty(this, \"options\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n  /**\n   * Adds a new subcommand to this group\n   * @param input A function that returns a subcommand builder, or an already built builder\n   */\n\n\n  addSubcommand(input) {\n    const {\n      options\n    } = this; // First, assert options conditions - we cannot have more than 25 options\n\n    Assertions_1.validateMaxOptionsLength(options); // Get the final result\n\n    const result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n    Assertions_1.assertReturnOfBuilder(result, SlashCommandSubcommandBuilder); // Push it\n\n    options.push(result);\n    return this;\n  }\n\n  toJSON() {\n    Assertions_1.validateRequiredParameters(this.name, this.description, this.options);\n    return {\n      type: 2\n      /* SubcommandGroup */\n      ,\n      name: this.name,\n      description: this.description,\n      options: this.options.map(option => option.toJSON())\n    };\n  }\n\n};\nSlashCommandSubcommandGroupBuilder = tslib_1.__decorate([ts_mixer_1.mix(NameAndDescription_1.SharedNameAndDescription)], SlashCommandSubcommandGroupBuilder);\nexports.SlashCommandSubcommandGroupBuilder = SlashCommandSubcommandGroupBuilder;\n/**\n * Represents a subcommand\n *\n * For more information, go to https://discord.com/developers/docs/interactions/slash-commands#subcommands-and-subcommand-groups\n */\n\nlet SlashCommandSubcommandBuilder = class SlashCommandSubcommandBuilder {\n  constructor() {\n    /**\n     * The name of this subcommand\n     */\n    Object.defineProperty(this, \"name\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: undefined\n    });\n    /**\n     * The description of this subcommand\n     */\n\n    Object.defineProperty(this, \"description\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: undefined\n    });\n    /**\n     * The options of this subcommand\n     */\n\n    Object.defineProperty(this, \"options\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n  }\n\n  toJSON() {\n    Assertions_1.validateRequiredParameters(this.name, this.description, this.options);\n    return {\n      type: 1\n      /* Subcommand */\n      ,\n      name: this.name,\n      description: this.description,\n      options: this.options.map(option => option.toJSON())\n    };\n  }\n\n};\nSlashCommandSubcommandBuilder = tslib_1.__decorate([ts_mixer_1.mix(NameAndDescription_1.SharedNameAndDescription, CommandOptions_1.SharedSlashCommandOptions)], SlashCommandSubcommandBuilder);\nexports.SlashCommandSubcommandBuilder = SlashCommandSubcommandBuilder;","map":{"version":3,"mappings":";;;;;;;;;AAAAA;;AACA;;AACA;;AACA;;AACA;AAGA;;;;;;;AAMA,IAAaC,kCAAkC,GAA/C,MAAaA,kCAAb,CAA+C;EAA/CC;IACC;;;IAGAC;sBAAA;wBAAA;oBAAA;aAA+BC;IAA/B;IAEA;;;;IAGAD;sBAAA;wBAAA;oBAAA;aAAsCC;IAAtC;IAEA;;;;IAGAD;sBAAA;wBAAA;oBAAA;aAA4D;IAA5D;EAoCA;EAlCA;;;;;;EAIOE,aAAa,CACnBC,KADmB,EAGmE;IAEtF,MAAM;MAAEC;IAAF,IAAc,IAApB,CAFsF,CAItF;;IACAC,sCAAyBD,OAAzB,EALsF,CAOtF;;IACA,MAAME,MAAM,GAAG,OAAOH,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAAC,IAAII,6BAAJ,EAAD,CAAnC,GAA2EJ,KAA1F;IAEAE,mCAAsBC,MAAtB,EAA8BC,6BAA9B,EAVsF,CAYtF;;IACAH,OAAO,CAACI,IAAR,CAAaF,MAAb;IAEA,OAAO,IAAP;EACA;;EAEMG,MAAM;IACZJ,wCAA2B,KAAKK,IAAhC,EAAsC,KAAKC,WAA3C,EAAwD,KAAKP,OAA7D;IACA,OAAO;MACNQ,IAAI;MAAA;MADE;MAENF,IAAI,EAAE,KAAKA,IAFL;MAGNC,WAAW,EAAE,KAAKA,WAHZ;MAINP,OAAO,EAAE,KAAKA,OAAL,CAAaS,GAAb,CAAkBC,MAAD,IAAYA,MAAM,CAACL,MAAP,EAA7B;IAJH,CAAP;EAMA;;AAjD6C,CAA/C;AAAaX,kCAAkC,uBAD9CiB,eAAIC,6CAAJ,CAC8C,GAAlClB,kCAAkC,CAAlC;AAAAmB;AAsDb;;;;;;AAMA,IAAaV,6BAA6B,GAA1C,MAAaA,6BAAb,CAA0C;EAA1CR;IACC;;;IAGAC;sBAAA;wBAAA;oBAAA;aAA+BC;IAA/B;IAEA;;;;IAGAD;sBAAA;wBAAA;oBAAA;aAAsCC;IAAtC;IAEA;;;;IAGAD;sBAAA;wBAAA;oBAAA;aAA4D;IAA5D;EAWA;;EATOS,MAAM;IACZJ,wCAA2B,KAAKK,IAAhC,EAAsC,KAAKC,WAA3C,EAAwD,KAAKP,OAA7D;IACA,OAAO;MACNQ,IAAI;MAAA;MADE;MAENF,IAAI,EAAE,KAAKA,IAFL;MAGNC,WAAW,EAAE,KAAKA,WAHZ;MAINP,OAAO,EAAE,KAAKA,OAAL,CAAaS,GAAb,CAAkBC,MAAD,IAAYA,MAAM,CAACL,MAAP,EAA7B;IAJH,CAAP;EAMA;;AAxBwC,CAA1C;AAAaF,6BAA6B,uBADzCQ,eAAIC,6CAAJ,EAA8BE,0CAA9B,CACyC,GAA7BX,6BAA6B,CAA7B;AAAAU","names":["require","SlashCommandSubcommandGroupBuilder","constructor","Object","undefined","addSubcommand","input","options","Assertions_1","result","SlashCommandSubcommandBuilder","push","toJSON","name","description","type","map","option","ts_mixer_1","NameAndDescription_1","exports","CommandOptions_1"],"sources":["\\interactions\\slashCommands\\SlashCommandSubcommands.ts"],"sourcesContent":["import { ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport { mix } from 'ts-mixer';\nimport { assertReturnOfBuilder, validateMaxOptionsLength, validateRequiredParameters } from './Assertions';\nimport { SharedSlashCommandOptions } from './mixins/CommandOptions';\nimport { SharedNameAndDescription } from './mixins/NameAndDescription';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder';\n\n/**\n * Represents a folder for subcommands\n *\n * For more information, go to https://discord.com/developers/docs/interactions/slash-commands#subcommands-and-subcommand-groups\n */\n@mix(SharedNameAndDescription)\nexport class SlashCommandSubcommandGroupBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand group\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand group\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The subcommands part of this subcommand group\n\t */\n\tpublic readonly options: ToAPIApplicationCommandOptions[] = [];\n\n\t/**\n\t * Adds a new subcommand to this group\n\t * @param input A function that returns a subcommand builder, or an already built builder\n\t */\n\tpublic addSubcommand(\n\t\tinput:\n\t\t\t| SlashCommandSubcommandBuilder\n\t\t\t| ((subcommandGroup: SlashCommandSubcommandBuilder) => SlashCommandSubcommandBuilder),\n\t) {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new SlashCommandSubcommandBuilder()) : input;\n\n\t\tassertReturnOfBuilder(result, SlashCommandSubcommandBuilder);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n\n\tpublic toJSON() {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.SubcommandGroup,\n\t\t\tname: this.name,\n\t\t\tdescription: this.description,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandGroupBuilder extends SharedNameAndDescription {}\n\n/**\n * Represents a subcommand\n *\n * For more information, go to https://discord.com/developers/docs/interactions/slash-commands#subcommands-and-subcommand-groups\n */\n@mix(SharedNameAndDescription, SharedSlashCommandOptions)\nexport class SlashCommandSubcommandBuilder implements ToAPIApplicationCommandOptions {\n\t/**\n\t * The name of this subcommand\n\t */\n\tpublic readonly name: string = undefined!;\n\n\t/**\n\t * The description of this subcommand\n\t */\n\tpublic readonly description: string = undefined!;\n\n\t/**\n\t * The options of this subcommand\n\t */\n\tpublic readonly options: ToAPIApplicationCommandOptions[] = [];\n\n\tpublic toJSON() {\n\t\tvalidateRequiredParameters(this.name, this.description, this.options);\n\t\treturn {\n\t\t\ttype: ApplicationCommandOptionType.Subcommand,\n\t\t\tname: this.name,\n\t\t\tdescription: this.description,\n\t\t\toptions: this.options.map((option) => option.toJSON()),\n\t\t};\n\t}\n}\n\nexport interface SlashCommandSubcommandBuilder extends SharedNameAndDescription, SharedSlashCommandOptions<false> {}\n"]},"metadata":{},"sourceType":"script"}