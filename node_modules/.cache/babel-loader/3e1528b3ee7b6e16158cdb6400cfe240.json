{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst ApplicationCommandPermissionsManager = require('../managers/ApplicationCommandPermissionsManager');\n\nconst {\n  ApplicationCommandOptionTypes,\n  ApplicationCommandTypes\n} = require('../util/Constants');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * Represents an application command.\n * @extends {Base}\n */\n\n\nclass ApplicationCommand extends Base {\n  constructor(client, data, guild, guildId) {\n    super(client);\n    /**\n     * The command's id\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    /**\n     * The parent application's id\n     * @type {Snowflake}\n     */\n\n    this.applicationId = data.application_id;\n    /**\n     * The guild this command is part of\n     * @type {?Guild}\n     */\n\n    this.guild = guild ?? null;\n    /**\n     * The guild's id this command is part of, this may be non-null when `guild` is `null` if the command\n     * was fetched from the `ApplicationCommandManager`\n     * @type {?Snowflake}\n     */\n\n    this.guildId = guild?.id ?? guildId ?? null;\n    /**\n     * The manager for permissions of this command on its guild or arbitrary guilds when the command is global\n     * @type {ApplicationCommandPermissionsManager}\n     */\n\n    this.permissions = new ApplicationCommandPermissionsManager(this);\n    /**\n     * The type of this application command\n     * @type {ApplicationCommandType}\n     */\n\n    this.type = ApplicationCommandTypes[data.type];\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The name of this command\n     * @type {string}\n     */\n    this.name = data.name;\n    /**\n     * The description of this command\n     * @type {string}\n     */\n\n    this.description = data.description;\n    /**\n     * The options of this command\n     * @type {ApplicationCommandOption[]}\n     */\n\n    this.options = data.options?.map(o => this.constructor.transformOption(o, true)) ?? [];\n    /**\n     * Whether the command is enabled by default when the app is added to a guild\n     * @type {boolean}\n     */\n\n    this.defaultPermission = data.default_permission;\n  }\n  /**\n   * The timestamp the command was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the command was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * The manager that this command belongs to\n   * @type {ApplicationCommandManager}\n   * @readonly\n   */\n\n\n  get manager() {\n    return (this.guild ?? this.client.application).commands;\n  }\n  /**\n   * Data for creating or editing an application command.\n   * @typedef {Object} ApplicationCommandData\n   * @property {string} name The name of the command\n   * @property {string} description The description of the command\n   * @property {ApplicationCommandType} [type] The type of the command\n   * @property {ApplicationCommandOptionData[]} [options] Options for the command\n   * @property {boolean} [defaultPermission] Whether the command is enabled by default when the app is added to a guild\n   */\n\n  /**\n   * An option for an application command or subcommand.\n   * @typedef {Object} ApplicationCommandOptionData\n   * @property {ApplicationCommandOptionType|number} type The type of the option\n   * @property {string} name The name of the option\n   * @property {string} description The description of the option\n   * @property {boolean} [required] Whether the option is required\n   * @property {ApplicationCommandOptionChoice[]} [choices] The choices of the option for the user to pick from\n   * @property {ApplicationCommandOptionData[]} [options] Additional options if this option is a subcommand (group)\n   */\n\n  /**\n   * Edits this application command.\n   * @param {ApplicationCommandData} data The data to update the command with\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the description of this command\n   * command.edit({\n   *   description: 'New description',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  edit(data) {\n    return this.manager.edit(this, data, this.guildId);\n  }\n  /**\n   * Deletes this command.\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Delete this command\n   * command.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  delete() {\n    return this.manager.delete(this, this.guildId);\n  }\n  /**\n   * An option for an application command or subcommand.\n   * @typedef {Object} ApplicationCommandOption\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {string} name The name of the option\n   * @property {string} description The description of the option\n   * @property {boolean} [required] Whether the option is required\n   * @property {ApplicationCommandOptionChoice[]} [choices] The choices of the option for the user to pick from\n   * @property {ApplicationCommandOption[]} [options] Additional options if this option is a subcommand (group)\n   */\n\n  /**\n   * A choice for an application command option.\n   * @typedef {Object} ApplicationCommandOptionChoice\n   * @property {string} name The name of the choice\n   * @property {string|number} value The value of the choice\n   */\n\n  /**\n   * Transforms an {@link ApplicationCommandOptionData} object into something that can be used with the API.\n   * @param {ApplicationCommandOptionData} option The option to transform\n   * @param {boolean} [received] Whether this option has been received from Discord\n   * @returns {APIApplicationCommandOption}\n   * @private\n   */\n\n\n  static transformOption(option, received) {\n    const stringType = typeof option.type === 'string' ? option.type : ApplicationCommandOptionTypes[option.type];\n    return {\n      type: typeof option.type === 'number' && !received ? option.type : ApplicationCommandOptionTypes[option.type],\n      name: option.name,\n      description: option.description,\n      required: option.required ?? (stringType === 'SUB_COMMAND' || stringType === 'SUB_COMMAND_GROUP' ? undefined : false),\n      choices: option.choices,\n      options: option.options?.map(o => this.transformOption(o, received))\n    };\n  }\n\n}\n\nmodule.exports = ApplicationCommand;\n/* eslint-disable max-len */\n\n/**\n * @external APIApplicationCommand\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-structure}\n */\n\n/**\n * @external APIApplicationCommandOption\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-structure}\n */","map":{"version":3,"names":["Base","require","ApplicationCommandPermissionsManager","ApplicationCommandOptionTypes","ApplicationCommandTypes","SnowflakeUtil","ApplicationCommand","constructor","client","data","guild","guildId","id","applicationId","application_id","permissions","type","_patch","name","description","options","map","o","transformOption","defaultPermission","default_permission","createdTimestamp","deconstruct","timestamp","createdAt","Date","manager","application","commands","edit","delete","option","received","stringType","required","undefined","choices","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/ApplicationCommand.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst ApplicationCommandPermissionsManager = require('../managers/ApplicationCommandPermissionsManager');\nconst { ApplicationCommandOptionTypes, ApplicationCommandTypes } = require('../util/Constants');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * Represents an application command.\n * @extends {Base}\n */\nclass ApplicationCommand extends Base {\n  constructor(client, data, guild, guildId) {\n    super(client);\n\n    /**\n     * The command's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The parent application's id\n     * @type {Snowflake}\n     */\n    this.applicationId = data.application_id;\n\n    /**\n     * The guild this command is part of\n     * @type {?Guild}\n     */\n    this.guild = guild ?? null;\n\n    /**\n     * The guild's id this command is part of, this may be non-null when `guild` is `null` if the command\n     * was fetched from the `ApplicationCommandManager`\n     * @type {?Snowflake}\n     */\n    this.guildId = guild?.id ?? guildId ?? null;\n\n    /**\n     * The manager for permissions of this command on its guild or arbitrary guilds when the command is global\n     * @type {ApplicationCommandPermissionsManager}\n     */\n    this.permissions = new ApplicationCommandPermissionsManager(this);\n\n    /**\n     * The type of this application command\n     * @type {ApplicationCommandType}\n     */\n    this.type = ApplicationCommandTypes[data.type];\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The name of this command\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The description of this command\n     * @type {string}\n     */\n    this.description = data.description;\n\n    /**\n     * The options of this command\n     * @type {ApplicationCommandOption[]}\n     */\n    this.options = data.options?.map(o => this.constructor.transformOption(o, true)) ?? [];\n\n    /**\n     * Whether the command is enabled by default when the app is added to a guild\n     * @type {boolean}\n     */\n    this.defaultPermission = data.default_permission;\n  }\n\n  /**\n   * The timestamp the command was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the command was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The manager that this command belongs to\n   * @type {ApplicationCommandManager}\n   * @readonly\n   */\n  get manager() {\n    return (this.guild ?? this.client.application).commands;\n  }\n\n  /**\n   * Data for creating or editing an application command.\n   * @typedef {Object} ApplicationCommandData\n   * @property {string} name The name of the command\n   * @property {string} description The description of the command\n   * @property {ApplicationCommandType} [type] The type of the command\n   * @property {ApplicationCommandOptionData[]} [options] Options for the command\n   * @property {boolean} [defaultPermission] Whether the command is enabled by default when the app is added to a guild\n   */\n\n  /**\n   * An option for an application command or subcommand.\n   * @typedef {Object} ApplicationCommandOptionData\n   * @property {ApplicationCommandOptionType|number} type The type of the option\n   * @property {string} name The name of the option\n   * @property {string} description The description of the option\n   * @property {boolean} [required] Whether the option is required\n   * @property {ApplicationCommandOptionChoice[]} [choices] The choices of the option for the user to pick from\n   * @property {ApplicationCommandOptionData[]} [options] Additional options if this option is a subcommand (group)\n   */\n\n  /**\n   * Edits this application command.\n   * @param {ApplicationCommandData} data The data to update the command with\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Edit the description of this command\n   * command.edit({\n   *   description: 'New description',\n   * })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  edit(data) {\n    return this.manager.edit(this, data, this.guildId);\n  }\n\n  /**\n   * Deletes this command.\n   * @returns {Promise<ApplicationCommand>}\n   * @example\n   * // Delete this command\n   * command.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.manager.delete(this, this.guildId);\n  }\n\n  /**\n   * An option for an application command or subcommand.\n   * @typedef {Object} ApplicationCommandOption\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {string} name The name of the option\n   * @property {string} description The description of the option\n   * @property {boolean} [required] Whether the option is required\n   * @property {ApplicationCommandOptionChoice[]} [choices] The choices of the option for the user to pick from\n   * @property {ApplicationCommandOption[]} [options] Additional options if this option is a subcommand (group)\n   */\n\n  /**\n   * A choice for an application command option.\n   * @typedef {Object} ApplicationCommandOptionChoice\n   * @property {string} name The name of the choice\n   * @property {string|number} value The value of the choice\n   */\n\n  /**\n   * Transforms an {@link ApplicationCommandOptionData} object into something that can be used with the API.\n   * @param {ApplicationCommandOptionData} option The option to transform\n   * @param {boolean} [received] Whether this option has been received from Discord\n   * @returns {APIApplicationCommandOption}\n   * @private\n   */\n  static transformOption(option, received) {\n    const stringType = typeof option.type === 'string' ? option.type : ApplicationCommandOptionTypes[option.type];\n    return {\n      type: typeof option.type === 'number' && !received ? option.type : ApplicationCommandOptionTypes[option.type],\n      name: option.name,\n      description: option.description,\n      required:\n        option.required ?? (stringType === 'SUB_COMMAND' || stringType === 'SUB_COMMAND_GROUP' ? undefined : false),\n      choices: option.choices,\n      options: option.options?.map(o => this.transformOption(o, received)),\n    };\n  }\n}\n\nmodule.exports = ApplicationCommand;\n\n/* eslint-disable max-len */\n/**\n * @external APIApplicationCommand\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-structure}\n */\n\n/**\n * @external APIApplicationCommandOption\n * @see {@link https://discord.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-structure}\n */\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,oCAAoC,GAAGD,OAAO,CAAC,kDAAD,CAApD;;AACA,MAAM;EAAEE,6BAAF;EAAiCC;AAAjC,IAA6DH,OAAO,CAAC,mBAAD,CAA1E;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAC,uBAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AACA,MAAMK,kBAAN,SAAiCN,IAAjC,CAAsC;EACpCO,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsBC,OAAtB,EAA+B;IACxC,MAAMH,MAAN;IAEA;AACJ;AACA;AACA;;IACI,KAAKI,EAAL,GAAUH,IAAI,CAACG,EAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,aAAL,GAAqBJ,IAAI,CAACK,cAA1B;IAEA;AACJ;AACA;AACA;;IACI,KAAKJ,KAAL,GAAaA,KAAK,IAAI,IAAtB;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,OAAL,GAAeD,KAAK,EAAEE,EAAP,IAAaD,OAAb,IAAwB,IAAvC;IAEA;AACJ;AACA;AACA;;IACI,KAAKI,WAAL,GAAmB,IAAIb,oCAAJ,CAAyC,IAAzC,CAAnB;IAEA;AACJ;AACA;AACA;;IACI,KAAKc,IAAL,GAAYZ,uBAAuB,CAACK,IAAI,CAACO,IAAN,CAAnC;;IAEA,KAAKC,MAAL,CAAYR,IAAZ;EACD;;EAEDQ,MAAM,CAACR,IAAD,EAAO;IACX;AACJ;AACA;AACA;IACI,KAAKS,IAAL,GAAYT,IAAI,CAACS,IAAjB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,WAAL,GAAmBV,IAAI,CAACU,WAAxB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAeX,IAAI,CAACW,OAAL,EAAcC,GAAd,CAAkBC,CAAC,IAAI,KAAKf,WAAL,CAAiBgB,eAAjB,CAAiCD,CAAjC,EAAoC,IAApC,CAAvB,KAAqE,EAApF;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,iBAAL,GAAyBf,IAAI,CAACgB,kBAA9B;EACD;EAED;AACF;AACA;AACA;AACA;;;EACsB,IAAhBC,gBAAgB,GAAG;IACrB,OAAOrB,aAAa,CAACsB,WAAd,CAA0B,KAAKf,EAA/B,EAAmCgB,SAA1C;EACD;EAED;AACF;AACA;AACA;AACA;;;EACe,IAATC,SAAS,GAAG;IACd,OAAO,IAAIC,IAAJ,CAAS,KAAKJ,gBAAd,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACa,IAAPK,OAAO,GAAG;IACZ,OAAO,CAAC,KAAKrB,KAAL,IAAc,KAAKF,MAAL,CAAYwB,WAA3B,EAAwCC,QAA/C;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,IAAI,CAACzB,IAAD,EAAO;IACT,OAAO,KAAKsB,OAAL,CAAaG,IAAb,CAAkB,IAAlB,EAAwBzB,IAAxB,EAA8B,KAAKE,OAAnC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEwB,MAAM,GAAG;IACP,OAAO,KAAKJ,OAAL,CAAaI,MAAb,CAAoB,IAApB,EAA0B,KAAKxB,OAA/B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;;;EACwB,OAAfY,eAAe,CAACa,MAAD,EAASC,QAAT,EAAmB;IACvC,MAAMC,UAAU,GAAG,OAAOF,MAAM,CAACpB,IAAd,KAAuB,QAAvB,GAAkCoB,MAAM,CAACpB,IAAzC,GAAgDb,6BAA6B,CAACiC,MAAM,CAACpB,IAAR,CAAhG;IACA,OAAO;MACLA,IAAI,EAAE,OAAOoB,MAAM,CAACpB,IAAd,KAAuB,QAAvB,IAAmC,CAACqB,QAApC,GAA+CD,MAAM,CAACpB,IAAtD,GAA6Db,6BAA6B,CAACiC,MAAM,CAACpB,IAAR,CAD3F;MAELE,IAAI,EAAEkB,MAAM,CAAClB,IAFR;MAGLC,WAAW,EAAEiB,MAAM,CAACjB,WAHf;MAILoB,QAAQ,EACNH,MAAM,CAACG,QAAP,KAAoBD,UAAU,KAAK,aAAf,IAAgCA,UAAU,KAAK,mBAA/C,GAAqEE,SAArE,GAAiF,KAArG,CALG;MAMLC,OAAO,EAAEL,MAAM,CAACK,OANX;MAOLrB,OAAO,EAAEgB,MAAM,CAAChB,OAAP,EAAgBC,GAAhB,CAAoBC,CAAC,IAAI,KAAKC,eAAL,CAAqBD,CAArB,EAAwBe,QAAxB,CAAzB;IAPJ,CAAP;EASD;;AAvLmC;;AA0LtCK,MAAM,CAACC,OAAP,GAAiBrC,kBAAjB;AAEA;;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}