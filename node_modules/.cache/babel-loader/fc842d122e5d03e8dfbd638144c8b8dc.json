{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Collection = void 0;\n/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n * @extends {Map}\n * @property {number} size - The amount of elements in this collection.\n */\n\nclass Collection extends Map {\n  /**\n   * Identical to [Map.get()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get).\n   * Gets an element with the specified key, and returns its value, or `undefined` if the element does not exist.\n   * @param {*} key - The key to get from this collection\n   * @returns {* | undefined}\n   */\n  get(key) {\n    return super.get(key);\n  }\n  /**\n   * Identical to [Map.set()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set).\n   * Sets a new element in the collection with the specified key and value.\n   * @param {*} key - The key of the element to add\n   * @param {*} value - The value of the element to add\n   * @returns {Collection}\n   */\n\n\n  set(key, value) {\n    return super.set(key, value);\n  }\n  /**\n   * Identical to [Map.has()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has).\n   * Checks if an element exists in the collection.\n   * @param {*} key - The key of the element to check for\n   * @returns {boolean} `true` if the element exists, `false` if it does not exist.\n   */\n\n\n  has(key) {\n    return super.has(key);\n  }\n  /**\n   * Identical to [Map.delete()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete).\n   * Deletes an element from the collection.\n   * @param {*} key - The key to delete from the collection\n   * @returns {boolean} `true` if the element was removed, `false` if the element does not exist.\n   */\n\n\n  delete(key) {\n    return super.delete(key);\n  }\n  /**\n   * Identical to [Map.clear()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear).\n   * Removes all elements from the collection.\n   * @returns {undefined}\n   */\n\n\n  clear() {\n    return super.clear();\n  }\n  /**\n   * Checks if all of the elements exist in the collection.\n   * @param {...*} keys - The keys of the elements to check for\n   * @returns {boolean} `true` if all of the elements exist, `false` if at least one does not exist.\n   */\n\n\n  hasAll() {\n    for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n      keys[_key] = arguments[_key];\n    }\n\n    return keys.every(k => super.has(k));\n  }\n  /**\n   * Checks if any of the elements exist in the collection.\n   * @param {...*} keys - The keys of the elements to check for\n   * @returns {boolean} `true` if any of the elements exist, `false` if none exist.\n   */\n\n\n  hasAny() {\n    for (var _len2 = arguments.length, keys = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      keys[_key2] = arguments[_key2];\n    }\n\n    return keys.some(k => super.has(k));\n  }\n\n  first(amount) {\n    if (typeof amount === 'undefined') return this.values().next().value;\n    if (amount < 0) return this.last(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.values();\n    return Array.from({\n      length: amount\n    }, () => iter.next().value);\n  }\n\n  firstKey(amount) {\n    if (typeof amount === 'undefined') return this.keys().next().value;\n    if (amount < 0) return this.lastKey(amount * -1);\n    amount = Math.min(this.size, amount);\n    const iter = this.keys();\n    return Array.from({\n      length: amount\n    }, () => iter.next().value);\n  }\n\n  last(amount) {\n    const arr = [...this.values()];\n    if (typeof amount === 'undefined') return arr[arr.length - 1];\n    if (amount < 0) return this.first(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n\n  lastKey(amount) {\n    const arr = [...this.keys()];\n    if (typeof amount === 'undefined') return arr[arr.length - 1];\n    if (amount < 0) return this.firstKey(amount * -1);\n    if (!amount) return [];\n    return arr.slice(-amount);\n  }\n\n  random(amount) {\n    const arr = [...this.values()];\n    if (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n    if (!arr.length || !amount) return [];\n    return Array.from({\n      length: Math.min(amount, arr.length)\n    }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n  }\n\n  randomKey(amount) {\n    const arr = [...this.keys()];\n    if (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n    if (!arr.length || !amount) return [];\n    return Array.from({\n      length: Math.min(amount, arr.length)\n    }, () => arr.splice(Math.floor(Math.random() * arr.length), 1)[0]);\n  }\n\n  find(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return val;\n    }\n\n    return undefined;\n  }\n\n  findKey(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return key;\n    }\n\n    return undefined;\n  }\n\n  sweep(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const previousSize = this.size;\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) this.delete(key);\n    }\n\n    return previousSize - this.size;\n  }\n\n  filter(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const results = new this.constructor[Symbol.species]();\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) results.set(key, val);\n    }\n\n    return results;\n  }\n\n  partition(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const results = [new this.constructor[Symbol.species](), new this.constructor[Symbol.species]()];\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) {\n        results[0].set(key, val);\n      } else {\n        results[1].set(key, val);\n      }\n    }\n\n    return results;\n  }\n\n  flatMap(fn, thisArg) {\n    const collections = this.map(fn, thisArg);\n    return new this.constructor[Symbol.species]().concat(...collections);\n  }\n\n  map(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const iter = this.entries();\n    return Array.from({\n      length: this.size\n    }, () => {\n      const [key, value] = iter.next().value;\n      return fn(value, key, this);\n    });\n  }\n\n  mapValues(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    const coll = new this.constructor[Symbol.species]();\n\n    for (const [key, val] of this) coll.set(key, fn(val, key, this));\n\n    return coll;\n  }\n\n  some(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\n    for (const [key, val] of this) {\n      if (fn(val, key, this)) return true;\n    }\n\n    return false;\n  }\n\n  every(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\n    for (const [key, val] of this) {\n      if (!fn(val, key, this)) return false;\n    }\n\n    return true;\n  }\n  /**\n   * Applies a function to produce a single value. Identical in behavior to\n   * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n   * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n   * and `collection`\n   * @param {*} [initialValue] Starting value for the accumulator\n   * @returns {*}\n   * @example collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n   */\n\n\n  reduce(fn, initialValue) {\n    let accumulator;\n\n    if (typeof initialValue !== 'undefined') {\n      accumulator = initialValue;\n\n      for (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n\n      return accumulator;\n    }\n\n    let first = true;\n\n    for (const [key, val] of this) {\n      if (first) {\n        accumulator = val;\n        first = false;\n        continue;\n      }\n\n      accumulator = fn(accumulator, val, key, this);\n    } // No items iterated.\n\n\n    if (first) {\n      throw new TypeError('Reduce of empty collection with no initial value');\n    }\n\n    return accumulator;\n  }\n\n  each(fn, thisArg) {\n    this.forEach(fn, thisArg);\n    return this;\n  }\n\n  tap(fn, thisArg) {\n    if (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n    fn(this);\n    return this;\n  }\n  /**\n   * Creates an identical shallow copy of this collection.\n   * @returns {Collection}\n   * @example const newColl = someColl.clone();\n   */\n\n\n  clone() {\n    return new this.constructor[Symbol.species](this);\n  }\n  /**\n   * Combines this collection with others into a new collection. None of the source collections are modified.\n   * @param {...Collection} collections Collections to merge\n   * @returns {Collection}\n   * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n   */\n\n\n  concat() {\n    const newColl = this.clone();\n\n    for (var _len3 = arguments.length, collections = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      collections[_key3] = arguments[_key3];\n    }\n\n    for (const coll of collections) {\n      for (const [key, val] of coll) newColl.set(key, val);\n    }\n\n    return newColl;\n  }\n  /**\n   * Checks if this collection shares identical items with another.\n   * This is different to checking for equality using equal-signs, because\n   * the collections may be different objects, but contain the same data.\n   * @param {Collection} collection Collection to compare with\n   * @returns {boolean} Whether the collections have identical contents\n   */\n\n\n  equals(collection) {\n    // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n    if (!collection) return false; // runtime check\n\n    if (this === collection) return true;\n    if (this.size !== collection.size) return false;\n\n    for (const [key, value] of this) {\n      if (!collection.has(key) || value !== collection.get(key)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n  /**\n   * The sort method sorts the items of a collection in place and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value,\n   * according to the string conversion of each element.\n   * @returns {Collection}\n   * @example collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   */\n\n\n  sort() {\n    let compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Collection.defaultSort;\n    const entries = [...this.entries()];\n    entries.sort((a, b) => compareFunction(a[1], b[1], a[0], b[0])); // Perform clean-up\n\n    super.clear(); // Set the new entries\n\n    for (const [k, v] of entries) {\n      super.set(k, v);\n    }\n\n    return this;\n  }\n  /**\n   * The intersect method returns a new structure containing items where the keys are present in both original structures.\n   * @param {Collection} other The other Collection to filter against\n   * @returns {Collection}\n   */\n\n\n  intersect(other) {\n    const coll = new this.constructor[Symbol.species]();\n\n    for (const [k, v] of other) {\n      if (this.has(k)) coll.set(k, v);\n    }\n\n    return coll;\n  }\n  /**\n   * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.\n   * @param {Collection} other The other Collection to filter against\n   * @returns {Collection}\n   */\n\n\n  difference(other) {\n    const coll = new this.constructor[Symbol.species]();\n\n    for (const [k, v] of other) {\n      if (!this.has(k)) coll.set(k, v);\n    }\n\n    for (const [k, v] of this) {\n      if (!other.has(k)) coll.set(k, v);\n    }\n\n    return coll;\n  }\n  /**\n   * The sorted method sorts the items of a collection and returns it.\n   * The sort is not necessarily stable in Node 10 or older.\n   * The default sort order is according to string Unicode code points.\n   * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n   * If omitted, the collection is sorted according to each character's Unicode code point value,\n   * according to the string conversion of each element.\n   * @returns {Collection}\n   * @example collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n   */\n\n\n  sorted() {\n    let compareFunction = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Collection.defaultSort;\n    return new this.constructor[Symbol.species](this).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n  }\n\n  toJSON() {\n    // toJSON is called recursively by JSON.stringify.\n    return [...this.values()];\n  }\n\n  static defaultSort(firstValue, secondValue) {\n    return Number(firstValue > secondValue) || Number(firstValue === secondValue) - 1;\n  }\n\n}\n\nexports.Collection = Collection;\nCollection.default = Collection;\nexports.default = Collection;","map":{"version":3,"mappings":"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","names":["Collection","Map","get","key","set","value","has","delete","clear","hasAll","keys","every","k","hasAny","some","first","amount","values","next","last","Math","min","size","iter","Array","from","length","firstKey","lastKey","arr","slice","random","floor","splice","randomKey","find","fn","thisArg","bind","val","undefined","findKey","sweep","previousSize","filter","results","constructor","Symbol","species","partition","flatMap","collections","map","concat","entries","mapValues","coll","reduce","initialValue","accumulator","TypeError","each","forEach","tap","clone","newColl","equals","collection","sort","compareFunction","defaultSort","a","b","v","intersect","other","difference","sorted","av","bv","ak","bk","toJSON","firstValue","secondValue","Number","exports"],"sources":["\\index.ts"],"sourcesContent":["export interface CollectionConstructor {\n\tnew (): Collection<unknown, unknown>;\n\tnew <K, V>(entries?: ReadonlyArray<readonly [K, V]> | null): Collection<K, V>;\n\tnew <K, V>(iterable: Iterable<readonly [K, V]>): Collection<K, V>;\n\treadonly prototype: Collection<unknown, unknown>;\n\treadonly [Symbol.species]: CollectionConstructor;\n}\n\n/**\n * A Map with additional utility methods. This is used throughout discord.js rather than Arrays for anything that has\n * an ID, for significantly improved performance and ease-of-use.\n * @extends {Map}\n * @property {number} size - The amount of elements in this collection.\n */\nexport class Collection<K, V> extends Map<K, V> {\n\tpublic static readonly default: typeof Collection = Collection;\n\tpublic ['constructor']: CollectionConstructor;\n\n\t/**\n\t * Identical to [Map.get()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get).\n\t * Gets an element with the specified key, and returns its value, or `undefined` if the element does not exist.\n\t * @param {*} key - The key to get from this collection\n\t * @returns {* | undefined}\n\t */\n\tpublic get(key: K): V | undefined {\n\t\treturn super.get(key);\n\t}\n\n\t/**\n\t * Identical to [Map.set()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/set).\n\t * Sets a new element in the collection with the specified key and value.\n\t * @param {*} key - The key of the element to add\n\t * @param {*} value - The value of the element to add\n\t * @returns {Collection}\n\t */\n\tpublic set(key: K, value: V): this {\n\t\treturn super.set(key, value);\n\t}\n\n\t/**\n\t * Identical to [Map.has()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/has).\n\t * Checks if an element exists in the collection.\n\t * @param {*} key - The key of the element to check for\n\t * @returns {boolean} `true` if the element exists, `false` if it does not exist.\n\t */\n\tpublic has(key: K): boolean {\n\t\treturn super.has(key);\n\t}\n\n\t/**\n\t * Identical to [Map.delete()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/delete).\n\t * Deletes an element from the collection.\n\t * @param {*} key - The key to delete from the collection\n\t * @returns {boolean} `true` if the element was removed, `false` if the element does not exist.\n\t */\n\tpublic delete(key: K): boolean {\n\t\treturn super.delete(key);\n\t}\n\n\t/**\n\t * Identical to [Map.clear()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/clear).\n\t * Removes all elements from the collection.\n\t * @returns {undefined}\n\t */\n\tpublic clear(): void {\n\t\treturn super.clear();\n\t}\n\n\t/**\n\t * Checks if all of the elements exist in the collection.\n\t * @param {...*} keys - The keys of the elements to check for\n\t * @returns {boolean} `true` if all of the elements exist, `false` if at least one does not exist.\n\t */\n\tpublic hasAll(...keys: K[]): boolean {\n\t\treturn keys.every((k) => super.has(k));\n\t}\n\n\t/**\n\t * Checks if any of the elements exist in the collection.\n\t * @param {...*} keys - The keys of the elements to check for\n\t * @returns {boolean} `true` if any of the elements exist, `false` if none exist.\n\t */\n\tpublic hasAny(...keys: K[]): boolean {\n\t\treturn keys.some((k) => super.has(k));\n\t}\n\n\t/**\n\t * Obtains the first value(s) in this collection.\n\t * @param {number} [amount] Amount of values to obtain from the beginning\n\t * @returns {*|Array<*>} A single value if no amount is provided or an array of values, starting from the end if\n\t * amount is negative\n\t */\n\tpublic first(): V | undefined;\n\tpublic first(amount: number): V[];\n\tpublic first(amount?: number): V | V[] | undefined {\n\t\tif (typeof amount === 'undefined') return this.values().next().value;\n\t\tif (amount < 0) return this.last(amount * -1);\n\t\tamount = Math.min(this.size, amount);\n\t\tconst iter = this.values();\n\t\treturn Array.from({ length: amount }, (): V => iter.next().value);\n\t}\n\n\t/**\n\t * Obtains the first key(s) in this collection.\n\t * @param {number} [amount] Amount of keys to obtain from the beginning\n\t * @returns {*|Array<*>} A single key if no amount is provided or an array of keys, starting from the end if\n\t * amount is negative\n\t */\n\tpublic firstKey(): K | undefined;\n\tpublic firstKey(amount: number): K[];\n\tpublic firstKey(amount?: number): K | K[] | undefined {\n\t\tif (typeof amount === 'undefined') return this.keys().next().value;\n\t\tif (amount < 0) return this.lastKey(amount * -1);\n\t\tamount = Math.min(this.size, amount);\n\t\tconst iter = this.keys();\n\t\treturn Array.from({ length: amount }, (): K => iter.next().value);\n\t}\n\n\t/**\n\t * Obtains the last value(s) in this collection.\n\t * @param {number} [amount] Amount of values to obtain from the end\n\t * @returns {*|Array<*>} A single value if no amount is provided or an array of values, starting from the start if\n\t * amount is negative\n\t */\n\tpublic last(): V | undefined;\n\tpublic last(amount: number): V[];\n\tpublic last(amount?: number): V | V[] | undefined {\n\t\tconst arr = [...this.values()];\n\t\tif (typeof amount === 'undefined') return arr[arr.length - 1];\n\t\tif (amount < 0) return this.first(amount * -1);\n\t\tif (!amount) return [];\n\t\treturn arr.slice(-amount);\n\t}\n\n\t/**\n\t * Obtains the last key(s) in this collection.\n\t * @param {number} [amount] Amount of keys to obtain from the end\n\t * @returns {*|Array<*>} A single key if no amount is provided or an array of keys, starting from the start if\n\t * amount is negative\n\t */\n\tpublic lastKey(): K | undefined;\n\tpublic lastKey(amount: number): K[];\n\tpublic lastKey(amount?: number): K | K[] | undefined {\n\t\tconst arr = [...this.keys()];\n\t\tif (typeof amount === 'undefined') return arr[arr.length - 1];\n\t\tif (amount < 0) return this.firstKey(amount * -1);\n\t\tif (!amount) return [];\n\t\treturn arr.slice(-amount);\n\t}\n\n\t/**\n\t * Obtains unique random value(s) from this collection.\n\t * @param {number} [amount] Amount of values to obtain randomly\n\t * @returns {*|Array<*>} A single value if no amount is provided or an array of values\n\t */\n\tpublic random(): V;\n\tpublic random(amount: number): V[];\n\tpublic random(amount?: number): V | V[] {\n\t\tconst arr = [...this.values()];\n\t\tif (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n\t\tif (!arr.length || !amount) return [];\n\t\treturn Array.from(\n\t\t\t{ length: Math.min(amount, arr.length) },\n\t\t\t(): V => arr.splice(Math.floor(Math.random() * arr.length), 1)[0],\n\t\t);\n\t}\n\n\t/**\n\t * Obtains unique random key(s) from this collection.\n\t * @param {number} [amount] Amount of keys to obtain randomly\n\t * @returns {*|Array<*>} A single key if no amount is provided or an array\n\t */\n\tpublic randomKey(): K;\n\tpublic randomKey(amount: number): K[];\n\tpublic randomKey(amount?: number): K | K[] {\n\t\tconst arr = [...this.keys()];\n\t\tif (typeof amount === 'undefined') return arr[Math.floor(Math.random() * arr.length)];\n\t\tif (!arr.length || !amount) return [];\n\t\treturn Array.from(\n\t\t\t{ length: Math.min(amount, arr.length) },\n\t\t\t(): K => arr.splice(Math.floor(Math.random() * arr.length), 1)[0],\n\t\t);\n\t}\n\n\t/**\n\t * Searches for a single item where the given function returns a truthy value. This behaves like\n\t * [Array.find()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find).\n\t * <warn>All collections used in Discord.js are mapped using their `id` property, and if you want to find by id you\n\t * should use the `get` method. See\n\t * [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get) for details.</warn>\n\t * @param {Function} fn The function to test with (should return boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {*}\n\t * @example collection.find(user => user.username === 'Bob');\n\t */\n\tpublic find<V2 extends V>(fn: (value: V, key: K, collection: this) => value is V2): V2 | undefined;\n\tpublic find(fn: (value: V, key: K, collection: this) => boolean): V | undefined;\n\tpublic find<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): V2 | undefined;\n\tpublic find<This>(fn: (this: This, value: V, key: K, collection: this) => boolean, thisArg: This): V | undefined;\n\tpublic find(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): V | undefined {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return val;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Searches for the key of a single item where the given function returns a truthy value. This behaves like\n\t * [Array.findIndex()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex),\n\t * but returns the key rather than the positional index.\n\t * @param {Function} fn The function to test with (should return boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {*}\n\t * @example collection.findKey(user => user.username === 'Bob');\n\t */\n\tpublic findKey<K2 extends K>(fn: (value: V, key: K, collection: this) => key is K2): K2 | undefined;\n\tpublic findKey(fn: (value: V, key: K, collection: this) => boolean): K | undefined;\n\tpublic findKey<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): K2 | undefined;\n\tpublic findKey<This>(fn: (this: This, value: V, key: K, collection: this) => boolean, thisArg: This): K | undefined;\n\tpublic findKey(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): K | undefined {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return key;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Removes items that satisfy the provided filter function.\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {number} The number of removed entries\n\t */\n\tpublic sweep(fn: (value: V, key: K, collection: this) => boolean): number;\n\tpublic sweep<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): number;\n\tpublic sweep(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): number {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst previousSize = this.size;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) this.delete(key);\n\t\t}\n\t\treturn previousSize - this.size;\n\t}\n\n\t/**\n\t * Identical to\n\t * [Array.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n\t * but returns a Collection instead of an Array.\n\t * @param {Function} fn The function to test with (should return boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example collection.filter(user => user.username === 'Bob');\n\t */\n\tpublic filter<K2 extends K>(fn: (value: V, key: K, collection: this) => key is K2): Collection<K2, V>;\n\tpublic filter<V2 extends V>(fn: (value: V, key: K, collection: this) => value is V2): Collection<K, V2>;\n\tpublic filter(fn: (value: V, key: K, collection: this) => boolean): Collection<K, V>;\n\tpublic filter<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): Collection<K2, V>;\n\tpublic filter<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): Collection<K, V2>;\n\tpublic filter<This>(fn: (this: This, value: V, key: K, collection: this) => boolean, thisArg: This): Collection<K, V>;\n\tpublic filter(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): Collection<K, V> {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst results = new this.constructor[Symbol.species]<K, V>();\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) results.set(key, val);\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Partitions the collection into two collections where the first collection\n\t * contains the items that passed and the second contains the items that failed.\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection[]}\n\t * @example const [big, small] = collection.partition(guild => guild.memberCount > 250);\n\t */\n\tpublic partition<K2 extends K>(\n\t\tfn: (value: V, key: K, collection: this) => key is K2,\n\t): [Collection<K2, V>, Collection<Exclude<K, K2>, V>];\n\tpublic partition<V2 extends V>(\n\t\tfn: (value: V, key: K, collection: this) => value is V2,\n\t): [Collection<K, V2>, Collection<K, Exclude<V, V2>>];\n\tpublic partition(fn: (value: V, key: K, collection: this) => boolean): [Collection<K, V>, Collection<K, V>];\n\tpublic partition<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): [Collection<K2, V>, Collection<Exclude<K, K2>, V>];\n\tpublic partition<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): [Collection<K, V2>, Collection<K, Exclude<V, V2>>];\n\tpublic partition<This>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => boolean,\n\t\tthisArg: This,\n\t): [Collection<K, V>, Collection<K, V>];\n\tpublic partition(\n\t\tfn: (value: V, key: K, collection: this) => boolean,\n\t\tthisArg?: unknown,\n\t): [Collection<K, V>, Collection<K, V>] {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst results: [Collection<K, V>, Collection<K, V>] = [\n\t\t\tnew this.constructor[Symbol.species]<K, V>(),\n\t\t\tnew this.constructor[Symbol.species]<K, V>(),\n\t\t];\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) {\n\t\t\t\tresults[0].set(key, val);\n\t\t\t} else {\n\t\t\t\tresults[1].set(key, val);\n\t\t\t}\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t * Maps each item into a Collection, then joins the results into a single Collection. Identical in behavior to\n\t * [Array.flatMap()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap).\n\t * @param {Function} fn Function that produces a new Collection\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example collection.flatMap(guild => guild.members.cache);\n\t */\n\tpublic flatMap<T>(fn: (value: V, key: K, collection: this) => Collection<K, T>): Collection<K, T>;\n\tpublic flatMap<T, This>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => Collection<K, T>,\n\t\tthisArg: This,\n\t): Collection<K, T>;\n\tpublic flatMap<T>(fn: (value: V, key: K, collection: this) => Collection<K, T>, thisArg?: unknown): Collection<K, T> {\n\t\tconst collections = this.map(fn, thisArg);\n\t\treturn new this.constructor[Symbol.species]<K, T>().concat(...collections);\n\t}\n\n\t/**\n\t * Maps each item to another value into an array. Identical in behavior to\n\t * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\t * @param {Function} fn Function that produces an element of the new array, taking three arguments\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Array}\n\t * @example collection.map(user => user.tag);\n\t */\n\tpublic map<T>(fn: (value: V, key: K, collection: this) => T): T[];\n\tpublic map<This, T>(fn: (this: This, value: V, key: K, collection: this) => T, thisArg: This): T[];\n\tpublic map<T>(fn: (value: V, key: K, collection: this) => T, thisArg?: unknown): T[] {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst iter = this.entries();\n\t\treturn Array.from({ length: this.size }, (): T => {\n\t\t\tconst [key, value] = iter.next().value;\n\t\t\treturn fn(value, key, this);\n\t\t});\n\t}\n\n\t/**\n\t * Maps each item to another value into a collection. Identical in behavior to\n\t * [Array.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map).\n\t * @param {Function} fn Function that produces an element of the new collection, taking three arguments\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example collection.mapValues(user => user.tag);\n\t */\n\tpublic mapValues<T>(fn: (value: V, key: K, collection: this) => T): Collection<K, T>;\n\tpublic mapValues<This, T>(fn: (this: This, value: V, key: K, collection: this) => T, thisArg: This): Collection<K, T>;\n\tpublic mapValues<T>(fn: (value: V, key: K, collection: this) => T, thisArg?: unknown): Collection<K, T> {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tconst coll = new this.constructor[Symbol.species]<K, T>();\n\t\tfor (const [key, val] of this) coll.set(key, fn(val, key, this));\n\t\treturn coll;\n\t}\n\n\t/**\n\t * Checks if there exists an item that passes a test. Identical in behavior to\n\t * [Array.some()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some).\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {boolean}\n\t * @example collection.some(user => user.discriminator === '0000');\n\t */\n\tpublic some(fn: (value: V, key: K, collection: this) => boolean): boolean;\n\tpublic some<T>(fn: (this: T, value: V, key: K, collection: this) => boolean, thisArg: T): boolean;\n\tpublic some(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): boolean {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (fn(val, key, this)) return true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if all items passes a test. Identical in behavior to\n\t * [Array.every()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every).\n\t * @param {Function} fn Function used to test (should return a boolean)\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {boolean}\n\t * @example collection.every(user => !user.bot);\n\t */\n\tpublic every<K2 extends K>(fn: (value: V, key: K, collection: this) => key is K2): this is Collection<K2, V>;\n\tpublic every<V2 extends V>(fn: (value: V, key: K, collection: this) => value is V2): this is Collection<K, V2>;\n\tpublic every(fn: (value: V, key: K, collection: this) => boolean): boolean;\n\tpublic every<This, K2 extends K>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => key is K2,\n\t\tthisArg: This,\n\t): this is Collection<K2, V>;\n\tpublic every<This, V2 extends V>(\n\t\tfn: (this: This, value: V, key: K, collection: this) => value is V2,\n\t\tthisArg: This,\n\t): this is Collection<K, V2>;\n\tpublic every<This>(fn: (this: This, value: V, key: K, collection: this) => boolean, thisArg: This): boolean;\n\tpublic every(fn: (value: V, key: K, collection: this) => boolean, thisArg?: unknown): boolean {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfor (const [key, val] of this) {\n\t\t\tif (!fn(val, key, this)) return false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Applies a function to produce a single value. Identical in behavior to\n\t * [Array.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce).\n\t * @param {Function} fn Function used to reduce, taking four arguments; `accumulator`, `currentValue`, `currentKey`,\n\t * and `collection`\n\t * @param {*} [initialValue] Starting value for the accumulator\n\t * @returns {*}\n\t * @example collection.reduce((acc, guild) => acc + guild.memberCount, 0);\n\t */\n\tpublic reduce<T>(fn: (accumulator: T, value: V, key: K, collection: this) => T, initialValue?: T): T {\n\t\tlet accumulator!: T;\n\n\t\tif (typeof initialValue !== 'undefined') {\n\t\t\taccumulator = initialValue;\n\t\t\tfor (const [key, val] of this) accumulator = fn(accumulator, val, key, this);\n\t\t\treturn accumulator;\n\t\t}\n\t\tlet first = true;\n\t\tfor (const [key, val] of this) {\n\t\t\tif (first) {\n\t\t\t\taccumulator = val as unknown as T;\n\t\t\t\tfirst = false;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\taccumulator = fn(accumulator, val, key, this);\n\t\t}\n\n\t\t// No items iterated.\n\t\tif (first) {\n\t\t\tthrow new TypeError('Reduce of empty collection with no initial value');\n\t\t}\n\n\t\treturn accumulator;\n\t}\n\n\t/**\n\t * Identical to\n\t * [Map.forEach()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/forEach),\n\t * but returns the collection instead of undefined.\n\t * @param {Function} fn Function to execute for each element\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example\n\t * collection\n\t *  .each(user => console.log(user.username))\n\t *  .filter(user => user.bot)\n\t *  .each(user => console.log(user.username));\n\t */\n\tpublic each(fn: (value: V, key: K, collection: this) => void): this;\n\tpublic each<T>(fn: (this: T, value: V, key: K, collection: this) => void, thisArg: T): this;\n\tpublic each(fn: (value: V, key: K, collection: this) => void, thisArg?: unknown): this {\n\t\tthis.forEach(fn as (value: V, key: K, map: Map<K, V>) => void, thisArg);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Runs a function on the collection and returns the collection.\n\t * @param {Function} fn Function to execute\n\t * @param {*} [thisArg] Value to use as `this` when executing function\n\t * @returns {Collection}\n\t * @example\n\t * collection\n\t *  .tap(coll => console.log(coll.size))\n\t *  .filter(user => user.bot)\n\t *  .tap(coll => console.log(coll.size))\n\t */\n\tpublic tap(fn: (collection: this) => void): this;\n\tpublic tap<T>(fn: (this: T, collection: this) => void, thisArg: T): this;\n\tpublic tap(fn: (collection: this) => void, thisArg?: unknown): this {\n\t\tif (typeof thisArg !== 'undefined') fn = fn.bind(thisArg);\n\t\tfn(this);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Creates an identical shallow copy of this collection.\n\t * @returns {Collection}\n\t * @example const newColl = someColl.clone();\n\t */\n\tpublic clone(): Collection<K, V> {\n\t\treturn new this.constructor[Symbol.species](this);\n\t}\n\n\t/**\n\t * Combines this collection with others into a new collection. None of the source collections are modified.\n\t * @param {...Collection} collections Collections to merge\n\t * @returns {Collection}\n\t * @example const newColl = someColl.concat(someOtherColl, anotherColl, ohBoyAColl);\n\t */\n\tpublic concat(...collections: Collection<K, V>[]): Collection<K, V> {\n\t\tconst newColl = this.clone();\n\t\tfor (const coll of collections) {\n\t\t\tfor (const [key, val] of coll) newColl.set(key, val);\n\t\t}\n\t\treturn newColl;\n\t}\n\n\t/**\n\t * Checks if this collection shares identical items with another.\n\t * This is different to checking for equality using equal-signs, because\n\t * the collections may be different objects, but contain the same data.\n\t * @param {Collection} collection Collection to compare with\n\t * @returns {boolean} Whether the collections have identical contents\n\t */\n\tpublic equals(collection: Collection<K, V>): boolean {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n\t\tif (!collection) return false; // runtime check\n\t\tif (this === collection) return true;\n\t\tif (this.size !== collection.size) return false;\n\t\tfor (const [key, value] of this) {\n\t\t\tif (!collection.has(key) || value !== collection.get(key)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * The sort method sorts the items of a collection in place and returns it.\n\t * The sort is not necessarily stable in Node 10 or older.\n\t * The default sort order is according to string Unicode code points.\n\t * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n\t * If omitted, the collection is sorted according to each character's Unicode code point value,\n\t * according to the string conversion of each element.\n\t * @returns {Collection}\n\t * @example collection.sort((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n\t */\n\tpublic sort(compareFunction: Comparator<K, V> = Collection.defaultSort): this {\n\t\tconst entries = [...this.entries()];\n\t\tentries.sort((a, b): number => compareFunction(a[1], b[1], a[0], b[0]));\n\n\t\t// Perform clean-up\n\t\tsuper.clear();\n\n\t\t// Set the new entries\n\t\tfor (const [k, v] of entries) {\n\t\t\tsuper.set(k, v);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * The intersect method returns a new structure containing items where the keys are present in both original structures.\n\t * @param {Collection} other The other Collection to filter against\n\t * @returns {Collection}\n\t */\n\tpublic intersect(other: Collection<K, V>): Collection<K, V> {\n\t\tconst coll = new this.constructor[Symbol.species]<K, V>();\n\t\tfor (const [k, v] of other) {\n\t\t\tif (this.has(k)) coll.set(k, v);\n\t\t}\n\t\treturn coll;\n\t}\n\n\t/**\n\t * The difference method returns a new structure containing items where the key is present in one of the original structures but not the other.\n\t * @param {Collection} other The other Collection to filter against\n\t * @returns {Collection}\n\t */\n\tpublic difference(other: Collection<K, V>): Collection<K, V> {\n\t\tconst coll = new this.constructor[Symbol.species]<K, V>();\n\t\tfor (const [k, v] of other) {\n\t\t\tif (!this.has(k)) coll.set(k, v);\n\t\t}\n\t\tfor (const [k, v] of this) {\n\t\t\tif (!other.has(k)) coll.set(k, v);\n\t\t}\n\t\treturn coll;\n\t}\n\n\t/**\n\t * The sorted method sorts the items of a collection and returns it.\n\t * The sort is not necessarily stable in Node 10 or older.\n\t * The default sort order is according to string Unicode code points.\n\t * @param {Function} [compareFunction] Specifies a function that defines the sort order.\n\t * If omitted, the collection is sorted according to each character's Unicode code point value,\n\t * according to the string conversion of each element.\n\t * @returns {Collection}\n\t * @example collection.sorted((userA, userB) => userA.createdTimestamp - userB.createdTimestamp);\n\t */\n\tpublic sorted(compareFunction: Comparator<K, V> = Collection.defaultSort): Collection<K, V> {\n\t\treturn new this.constructor[Symbol.species](this).sort((av, bv, ak, bk) => compareFunction(av, bv, ak, bk));\n\t}\n\n\tpublic toJSON() {\n\t\t// toJSON is called recursively by JSON.stringify.\n\t\treturn [...this.values()];\n\t}\n\n\tprivate static defaultSort<V>(firstValue: V, secondValue: V): number {\n\t\treturn Number(firstValue > secondValue) || Number(firstValue === secondValue) - 1;\n\t}\n}\n\nexport type Comparator<K, V> = (firstValue: V, secondValue: V, firstKey: K, secondKey: K) => number;\n\nexport default Collection;\n"]},"metadata":{},"sourceType":"script"}