{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst CachedManager = require('./CachedManager');\n\nconst {\n  TypeError,\n  Error\n} = require('../errors');\n\nconst GuildBan = require('../structures/GuildBan');\n\nconst GuildMember = require('../structures/GuildMember');\n/**\n * Manages API methods for GuildBans and stores their cache.\n * @extends {CachedManager}\n */\n\n\nclass GuildBanManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, GuildBan, iterable);\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n  }\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildBan>}\n   * @name GuildBanManager#cache\n   */\n\n\n  _add(data, cache) {\n    return super._add(data, cache, {\n      id: data.user.id,\n      extras: [this.guild]\n    });\n  }\n  /**\n   * Data that resolves to give a GuildBan object. This can be:\n   * * A GuildBan object\n   * * A User resolvable\n   * @typedef {GuildBan|UserResolvable} GuildBanResolvable\n   */\n\n  /**\n   * Resolves a GuildBanResolvable to a GuildBan object.\n   * @param {GuildBanResolvable} ban The ban that is in the guild\n   * @returns {?GuildBan}\n   */\n\n\n  resolve(ban) {\n    return super.resolve(ban) ?? super.resolve(this.client.users.resolveId(ban));\n  }\n  /**\n   * Options used to fetch a single ban from a guild.\n   * @typedef {BaseFetchOptions} FetchBanOptions\n   * @property {UserResolvable} user The ban to fetch\n   */\n\n  /**\n   * Options used to fetch all bans from a guild.\n   * @typedef {Object} FetchBansOptions\n   * @property {boolean} cache Whether or not to cache the fetched bans\n   */\n\n  /**\n   * Fetches ban(s) from Discord.\n   * @param {UserResolvable|FetchBanOptions|FetchBansOptions} [options] Options for fetching guild ban(s)\n   * @returns {Promise<GuildBan|Collection<Snowflake, GuildBan>>}\n   * @example\n   * // Fetch all bans from a guild\n   * guild.bans.fetch()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch all bans from a guild without caching\n   * guild.bans.fetch({ cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single ban\n   * guild.bans.fetch('351871113346809860')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single ban without checking cache\n   * guild.bans.fetch({ user, force: true })\n   *   .then(console.log)\n   *   .catch(console.error)\n   * @example\n   * // Fetch a single ban without caching\n   * guild.bans.fetch({ user, cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  fetch(options) {\n    if (!options) return this._fetchMany();\n    const user = this.client.users.resolveId(options);\n    if (user) return this._fetchSingle({\n      user,\n      cache: true\n    });\n\n    if (options.user) {\n      options.user = this.client.users.resolveId(options.user);\n    }\n\n    if (!options.user) {\n      if ('cache' in options) return this._fetchMany(options.cache);\n      return Promise.reject(new Error('FETCH_BAN_RESOLVE_ID'));\n    }\n\n    return this._fetchSingle(options);\n  }\n\n  async _fetchSingle(_ref) {\n    let {\n      user,\n      cache,\n      force = false\n    } = _ref;\n\n    if (!force) {\n      const existing = this.cache.get(user);\n      if (existing && !existing.partial) return existing;\n    }\n\n    const data = await this.client.api.guilds(this.guild.id).bans(user).get();\n    return this._add(data, cache);\n  }\n\n  async _fetchMany(cache) {\n    const data = await this.client.api.guilds(this.guild.id).bans.get();\n    return data.reduce((col, ban) => col.set(ban.user.id, this._add(ban, cache)), new Collection());\n  }\n  /**\n   * Options used to ban a user from a guild.\n   * @typedef {Object} BanOptions\n   * @property {number} [days=0] Number of days of messages to delete, must be between 0 and 7, inclusive\n   * @property {string} [reason] The reason for the ban\n   */\n\n  /**\n   * Bans a user from the guild.\n   * @param {UserResolvable} user The user to ban\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.\n   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\n   * be resolved, the user id will be the result.\n   * @example\n   * // Ban a user by id (or with a user/guild member object)\n   * guild.bans.create('84484653687267328')\n   *   .then(banInfo => console.log(`Banned ${banInfo.user?.tag ?? banInfo.tag ?? banInfo}`))\n   *   .catch(console.error);\n   */\n\n\n  async create(user) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      days: 0\n    };\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new Error('BAN_RESOLVE_ID', true);\n    await this.client.api.guilds(this.guild.id).bans(id).put({\n      data: {\n        reason: options.reason,\n        delete_message_days: options.days\n      }\n    });\n    if (user instanceof GuildMember) return user;\n\n    const _user = this.client.users.resolve(id);\n\n    if (_user) {\n      return this.guild.members.resolve(_user) ?? _user;\n    }\n\n    return id;\n  }\n  /**\n   * Unbans a user from the guild.\n   * @param {UserResolvable} user The user to unban\n   * @param {string} [reason] Reason for unbanning user\n   * @returns {Promise<User>}\n   * @example\n   * // Unban a user by id (or with a user/guild member object)\n   * guild.bans.remove('84484653687267328')\n   *   .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n   *   .catch(console.error);\n   */\n\n\n  async remove(user, reason) {\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new Error('BAN_RESOLVE_ID');\n    await this.client.api.guilds(this.guild.id).bans(id).delete({\n      reason\n    });\n    return this.client.users.resolve(user);\n  }\n\n}\n\nmodule.exports = GuildBanManager;","map":{"version":3,"names":["Collection","require","CachedManager","TypeError","Error","GuildBan","GuildMember","GuildBanManager","constructor","guild","iterable","client","_add","data","cache","id","user","extras","resolve","ban","users","resolveId","fetch","options","_fetchMany","_fetchSingle","Promise","reject","force","existing","get","partial","api","guilds","bans","reduce","col","set","create","days","put","reason","delete_message_days","_user","members","remove","delete","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/GuildBanManager.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst CachedManager = require('./CachedManager');\nconst { TypeError, Error } = require('../errors');\nconst GuildBan = require('../structures/GuildBan');\nconst GuildMember = require('../structures/GuildMember');\n\n/**\n * Manages API methods for GuildBans and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildBanManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, GuildBan, iterable);\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildBan>}\n   * @name GuildBanManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.user.id, extras: [this.guild] });\n  }\n\n  /**\n   * Data that resolves to give a GuildBan object. This can be:\n   * * A GuildBan object\n   * * A User resolvable\n   * @typedef {GuildBan|UserResolvable} GuildBanResolvable\n   */\n\n  /**\n   * Resolves a GuildBanResolvable to a GuildBan object.\n   * @param {GuildBanResolvable} ban The ban that is in the guild\n   * @returns {?GuildBan}\n   */\n  resolve(ban) {\n    return super.resolve(ban) ?? super.resolve(this.client.users.resolveId(ban));\n  }\n\n  /**\n   * Options used to fetch a single ban from a guild.\n   * @typedef {BaseFetchOptions} FetchBanOptions\n   * @property {UserResolvable} user The ban to fetch\n   */\n\n  /**\n   * Options used to fetch all bans from a guild.\n   * @typedef {Object} FetchBansOptions\n   * @property {boolean} cache Whether or not to cache the fetched bans\n   */\n\n  /**\n   * Fetches ban(s) from Discord.\n   * @param {UserResolvable|FetchBanOptions|FetchBansOptions} [options] Options for fetching guild ban(s)\n   * @returns {Promise<GuildBan|Collection<Snowflake, GuildBan>>}\n   * @example\n   * // Fetch all bans from a guild\n   * guild.bans.fetch()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch all bans from a guild without caching\n   * guild.bans.fetch({ cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single ban\n   * guild.bans.fetch('351871113346809860')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single ban without checking cache\n   * guild.bans.fetch({ user, force: true })\n   *   .then(console.log)\n   *   .catch(console.error)\n   * @example\n   * // Fetch a single ban without caching\n   * guild.bans.fetch({ user, cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  fetch(options) {\n    if (!options) return this._fetchMany();\n    const user = this.client.users.resolveId(options);\n    if (user) return this._fetchSingle({ user, cache: true });\n    if (options.user) {\n      options.user = this.client.users.resolveId(options.user);\n    }\n    if (!options.user) {\n      if ('cache' in options) return this._fetchMany(options.cache);\n      return Promise.reject(new Error('FETCH_BAN_RESOLVE_ID'));\n    }\n    return this._fetchSingle(options);\n  }\n\n  async _fetchSingle({ user, cache, force = false }) {\n    if (!force) {\n      const existing = this.cache.get(user);\n      if (existing && !existing.partial) return existing;\n    }\n\n    const data = await this.client.api.guilds(this.guild.id).bans(user).get();\n    return this._add(data, cache);\n  }\n\n  async _fetchMany(cache) {\n    const data = await this.client.api.guilds(this.guild.id).bans.get();\n    return data.reduce((col, ban) => col.set(ban.user.id, this._add(ban, cache)), new Collection());\n  }\n\n  /**\n   * Options used to ban a user from a guild.\n   * @typedef {Object} BanOptions\n   * @property {number} [days=0] Number of days of messages to delete, must be between 0 and 7, inclusive\n   * @property {string} [reason] The reason for the ban\n   */\n\n  /**\n   * Bans a user from the guild.\n   * @param {UserResolvable} user The user to ban\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember|User|Snowflake>} Result object will be resolved as specifically as possible.\n   * If the GuildMember cannot be resolved, the User will instead be attempted to be resolved. If that also cannot\n   * be resolved, the user id will be the result.\n   * @example\n   * // Ban a user by id (or with a user/guild member object)\n   * guild.bans.create('84484653687267328')\n   *   .then(banInfo => console.log(`Banned ${banInfo.user?.tag ?? banInfo.tag ?? banInfo}`))\n   *   .catch(console.error);\n   */\n  async create(user, options = { days: 0 }) {\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new Error('BAN_RESOLVE_ID', true);\n    await this.client.api\n      .guilds(this.guild.id)\n      .bans(id)\n      .put({\n        data: {\n          reason: options.reason,\n          delete_message_days: options.days,\n        },\n      });\n    if (user instanceof GuildMember) return user;\n    const _user = this.client.users.resolve(id);\n    if (_user) {\n      return this.guild.members.resolve(_user) ?? _user;\n    }\n    return id;\n  }\n\n  /**\n   * Unbans a user from the guild.\n   * @param {UserResolvable} user The user to unban\n   * @param {string} [reason] Reason for unbanning user\n   * @returns {Promise<User>}\n   * @example\n   * // Unban a user by id (or with a user/guild member object)\n   * guild.bans.remove('84484653687267328')\n   *   .then(user => console.log(`Unbanned ${user.username} from ${guild.name}`))\n   *   .catch(console.error);\n   */\n  async remove(user, reason) {\n    const id = this.client.users.resolveId(user);\n    if (!id) throw new Error('BAN_RESOLVE_ID');\n    await this.client.api.guilds(this.guild.id).bans(id).delete({ reason });\n    return this.client.users.resolve(user);\n  }\n}\n\nmodule.exports = GuildBanManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}