{"ast":null,"code":"'use strict';\n\nconst BaseMessageComponent = require('./BaseMessageComponent');\n\nconst {\n  MessageComponentTypes\n} = require('../util/Constants');\n/**\n * Represents an action row containing message components.\n * @extends {BaseMessageComponent}\n */\n\n\nclass MessageActionRow extends BaseMessageComponent {\n  /**\n   * Components that can be placed in an action row\n   * * MessageButton\n   * * MessageSelectMenu\n   * @typedef {MessageButton|MessageSelectMenu} MessageActionRowComponent\n   */\n\n  /**\n   * Options for components that can be placed in an action row\n   * * MessageButtonOptions\n   * * MessageSelectMenuOptions\n   * @typedef {MessageButtonOptions|MessageSelectMenuOptions} MessageActionRowComponentOptions\n   */\n\n  /**\n   * Data that can be resolved into components that can be placed in an action row\n   * * MessageActionRowComponent\n   * * MessageActionRowComponentOptions\n   * @typedef {MessageActionRowComponent|MessageActionRowComponentOptions} MessageActionRowComponentResolvable\n   */\n\n  /**\n   * @typedef {BaseMessageComponentOptions} MessageActionRowOptions\n   * @property {MessageActionRowComponentResolvable[]} [components]\n   * The components to place in this action row\n   */\n\n  /**\n   * @param {MessageActionRow|MessageActionRowOptions} [data={}] MessageActionRow to clone or raw data\n   * @param {Client} [client] The client constructing this MessageActionRow, if provided\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let client = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    super({\n      type: 'ACTION_ROW'\n    });\n    /**\n     * The components in this action row\n     * @type {MessageActionRowComponent[]}\n     */\n\n    this.components = data.components?.map(c => BaseMessageComponent.create(c, client)) ?? [];\n  }\n  /**\n   * Adds components to the action row.\n   * @param {...MessageActionRowComponentResolvable[]} components The components to add\n   * @returns {MessageActionRow}\n   */\n\n\n  addComponents() {\n    for (var _len = arguments.length, components = new Array(_len), _key = 0; _key < _len; _key++) {\n      components[_key] = arguments[_key];\n    }\n\n    this.components.push(...components.flat(Infinity).map(c => BaseMessageComponent.create(c)));\n    return this;\n  }\n  /**\n   * Removes, replaces, and inserts components in the action row.\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of components to remove\n   * @param {...MessageActionRowComponentResolvable[]} [components] The replacing components\n   * @returns {MessageActionRow}\n   */\n\n\n  spliceComponents(index, deleteCount) {\n    for (var _len2 = arguments.length, components = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      components[_key2 - 2] = arguments[_key2];\n    }\n\n    this.components.splice(index, deleteCount, ...components.flat(Infinity).map(c => BaseMessageComponent.create(c)));\n    return this;\n  }\n  /**\n   * Transforms the action row to a plain object.\n   * @returns {APIMessageComponent} The raw data of this action row\n   */\n\n\n  toJSON() {\n    return {\n      components: this.components.map(c => c.toJSON()),\n      type: MessageComponentTypes[this.type]\n    };\n  }\n\n}\n\nmodule.exports = MessageActionRow;\n/**\n * @external APIMessageComponent\n * @see {@link https://discord.com/developers/docs/interactions/message-components#component-object}\n */","map":{"version":3,"names":["BaseMessageComponent","require","MessageComponentTypes","MessageActionRow","constructor","data","client","type","components","map","c","create","addComponents","push","flat","Infinity","spliceComponents","index","deleteCount","splice","toJSON","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/MessageActionRow.js"],"sourcesContent":["'use strict';\n\nconst BaseMessageComponent = require('./BaseMessageComponent');\nconst { MessageComponentTypes } = require('../util/Constants');\n\n/**\n * Represents an action row containing message components.\n * @extends {BaseMessageComponent}\n */\nclass MessageActionRow extends BaseMessageComponent {\n  /**\n   * Components that can be placed in an action row\n   * * MessageButton\n   * * MessageSelectMenu\n   * @typedef {MessageButton|MessageSelectMenu} MessageActionRowComponent\n   */\n\n  /**\n   * Options for components that can be placed in an action row\n   * * MessageButtonOptions\n   * * MessageSelectMenuOptions\n   * @typedef {MessageButtonOptions|MessageSelectMenuOptions} MessageActionRowComponentOptions\n   */\n\n  /**\n   * Data that can be resolved into components that can be placed in an action row\n   * * MessageActionRowComponent\n   * * MessageActionRowComponentOptions\n   * @typedef {MessageActionRowComponent|MessageActionRowComponentOptions} MessageActionRowComponentResolvable\n   */\n\n  /**\n   * @typedef {BaseMessageComponentOptions} MessageActionRowOptions\n   * @property {MessageActionRowComponentResolvable[]} [components]\n   * The components to place in this action row\n   */\n\n  /**\n   * @param {MessageActionRow|MessageActionRowOptions} [data={}] MessageActionRow to clone or raw data\n   * @param {Client} [client] The client constructing this MessageActionRow, if provided\n   */\n  constructor(data = {}, client = null) {\n    super({ type: 'ACTION_ROW' });\n\n    /**\n     * The components in this action row\n     * @type {MessageActionRowComponent[]}\n     */\n    this.components = data.components?.map(c => BaseMessageComponent.create(c, client)) ?? [];\n  }\n\n  /**\n   * Adds components to the action row.\n   * @param {...MessageActionRowComponentResolvable[]} components The components to add\n   * @returns {MessageActionRow}\n   */\n  addComponents(...components) {\n    this.components.push(...components.flat(Infinity).map(c => BaseMessageComponent.create(c)));\n    return this;\n  }\n\n  /**\n   * Removes, replaces, and inserts components in the action row.\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of components to remove\n   * @param {...MessageActionRowComponentResolvable[]} [components] The replacing components\n   * @returns {MessageActionRow}\n   */\n  spliceComponents(index, deleteCount, ...components) {\n    this.components.splice(index, deleteCount, ...components.flat(Infinity).map(c => BaseMessageComponent.create(c)));\n    return this;\n  }\n\n  /**\n   * Transforms the action row to a plain object.\n   * @returns {APIMessageComponent} The raw data of this action row\n   */\n  toJSON() {\n    return {\n      components: this.components.map(c => c.toJSON()),\n      type: MessageComponentTypes[this.type],\n    };\n  }\n}\n\nmodule.exports = MessageActionRow;\n\n/**\n * @external APIMessageComponent\n * @see {@link https://discord.com/developers/docs/interactions/message-components#component-object}\n */\n"],"mappings":"AAAA;;AAEA,MAAMA,oBAAoB,GAAGC,OAAO,CAAC,wBAAD,CAApC;;AACA,MAAM;EAAEC;AAAF,IAA4BD,OAAO,CAAC,mBAAD,CAAzC;AAEA;AACA;AACA;AACA;;;AACA,MAAME,gBAAN,SAA+BH,oBAA/B,CAAoD;EAClD;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;EACEI,WAAW,GAA2B;IAAA,IAA1BC,IAA0B,uEAAnB,EAAmB;IAAA,IAAfC,MAAe,uEAAN,IAAM;IACpC,MAAM;MAAEC,IAAI,EAAE;IAAR,CAAN;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,UAAL,GAAkBH,IAAI,CAACG,UAAL,EAAiBC,GAAjB,CAAqBC,CAAC,IAAIV,oBAAoB,CAACW,MAArB,CAA4BD,CAA5B,EAA+BJ,MAA/B,CAA1B,KAAqE,EAAvF;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEM,aAAa,GAAgB;IAAA,kCAAZJ,UAAY;MAAZA,UAAY;IAAA;;IAC3B,KAAKA,UAAL,CAAgBK,IAAhB,CAAqB,GAAGL,UAAU,CAACM,IAAX,CAAgBC,QAAhB,EAA0BN,GAA1B,CAA8BC,CAAC,IAAIV,oBAAoB,CAACW,MAArB,CAA4BD,CAA5B,CAAnC,CAAxB;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEM,gBAAgB,CAACC,KAAD,EAAQC,WAAR,EAAoC;IAAA,mCAAZV,UAAY;MAAZA,UAAY;IAAA;;IAClD,KAAKA,UAAL,CAAgBW,MAAhB,CAAuBF,KAAvB,EAA8BC,WAA9B,EAA2C,GAAGV,UAAU,CAACM,IAAX,CAAgBC,QAAhB,EAA0BN,GAA1B,CAA8BC,CAAC,IAAIV,oBAAoB,CAACW,MAArB,CAA4BD,CAA5B,CAAnC,CAA9C;IACA,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;;;EACEU,MAAM,GAAG;IACP,OAAO;MACLZ,UAAU,EAAE,KAAKA,UAAL,CAAgBC,GAAhB,CAAoBC,CAAC,IAAIA,CAAC,CAACU,MAAF,EAAzB,CADP;MAELb,IAAI,EAAEL,qBAAqB,CAAC,KAAKK,IAAN;IAFtB,CAAP;EAID;;AAzEiD;;AA4EpDc,MAAM,CAACC,OAAP,GAAiBnB,gBAAjB;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}