{"ast":null,"code":"'use strict';\n/**\n * Represents an error from the Discord API.\n * @extends Error\n */\n\nclass DiscordAPIError extends Error {\n  constructor(error, status, request) {\n    super();\n    const flattened = this.constructor.flattenErrors(error.errors ?? error).join('\\n');\n    this.name = 'DiscordAPIError';\n    this.message = error.message && flattened ? `${error.message}\\n${flattened}` : error.message ?? flattened;\n    /**\n     * The HTTP method used for the request\n     * @type {string}\n     */\n\n    this.method = request.method;\n    /**\n     * The path of the request relative to the HTTP endpoint\n     * @type {string}\n     */\n\n    this.path = request.path;\n    /**\n     * HTTP error code returned by Discord\n     * @type {number}\n     */\n\n    this.code = error.code;\n    /**\n     * The HTTP status code\n     * @type {number}\n     */\n\n    this.httpStatus = status;\n    /**\n     * The data associated with the request that caused this error\n     * @type {HTTPErrorData}\n     */\n\n    this.requestData = {\n      json: request.options.data,\n      files: request.options.files ?? []\n    };\n  }\n  /**\n   * Flattens an errors object returned from the API into an array.\n   * @param {APIError} obj Discord errors object\n   * @param {string} [key] Used internally to determine key names of nested fields\n   * @returns {string[]}\n   * @private\n   */\n\n\n  static flattenErrors(obj) {\n    let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let messages = [];\n\n    for (const [k, v] of Object.entries(obj)) {\n      if (k === 'message') continue;\n      const newKey = key ? isNaN(k) ? `${key}.${k}` : `${key}[${k}]` : k;\n\n      if (v._errors) {\n        messages.push(`${newKey}: ${v._errors.map(e => e.message).join(' ')}`);\n      } else if (v.code ?? v.message) {\n        messages.push(`${v.code ? `${v.code}: ` : ''}${v.message}`.trim());\n      } else if (typeof v === 'string') {\n        messages.push(v);\n      } else {\n        messages = messages.concat(this.flattenErrors(v, newKey));\n      }\n    }\n\n    return messages;\n  }\n\n}\n\nmodule.exports = DiscordAPIError;\n/**\n * @external APIError\n * @see {@link https://discord.com/developers/docs/reference#error-messages}\n */","map":{"version":3,"names":["DiscordAPIError","Error","constructor","error","status","request","flattened","flattenErrors","errors","join","name","message","method","path","code","httpStatus","requestData","json","options","data","files","obj","key","messages","k","v","Object","entries","newKey","isNaN","_errors","push","map","e","trim","concat","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/rest/DiscordAPIError.js"],"sourcesContent":["'use strict';\n\n/**\n * Represents an error from the Discord API.\n * @extends Error\n */\nclass DiscordAPIError extends Error {\n  constructor(error, status, request) {\n    super();\n    const flattened = this.constructor.flattenErrors(error.errors ?? error).join('\\n');\n    this.name = 'DiscordAPIError';\n    this.message = error.message && flattened ? `${error.message}\\n${flattened}` : error.message ?? flattened;\n\n    /**\n     * The HTTP method used for the request\n     * @type {string}\n     */\n    this.method = request.method;\n\n    /**\n     * The path of the request relative to the HTTP endpoint\n     * @type {string}\n     */\n    this.path = request.path;\n\n    /**\n     * HTTP error code returned by Discord\n     * @type {number}\n     */\n    this.code = error.code;\n\n    /**\n     * The HTTP status code\n     * @type {number}\n     */\n    this.httpStatus = status;\n\n    /**\n     * The data associated with the request that caused this error\n     * @type {HTTPErrorData}\n     */\n    this.requestData = {\n      json: request.options.data,\n      files: request.options.files ?? [],\n    };\n  }\n\n  /**\n   * Flattens an errors object returned from the API into an array.\n   * @param {APIError} obj Discord errors object\n   * @param {string} [key] Used internally to determine key names of nested fields\n   * @returns {string[]}\n   * @private\n   */\n  static flattenErrors(obj, key = '') {\n    let messages = [];\n\n    for (const [k, v] of Object.entries(obj)) {\n      if (k === 'message') continue;\n      const newKey = key ? (isNaN(k) ? `${key}.${k}` : `${key}[${k}]`) : k;\n\n      if (v._errors) {\n        messages.push(`${newKey}: ${v._errors.map(e => e.message).join(' ')}`);\n      } else if (v.code ?? v.message) {\n        messages.push(`${v.code ? `${v.code}: ` : ''}${v.message}`.trim());\n      } else if (typeof v === 'string') {\n        messages.push(v);\n      } else {\n        messages = messages.concat(this.flattenErrors(v, newKey));\n      }\n    }\n\n    return messages;\n  }\n}\n\nmodule.exports = DiscordAPIError;\n\n/**\n * @external APIError\n * @see {@link https://discord.com/developers/docs/reference#error-messages}\n */\n"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;;AACA,MAAMA,eAAN,SAA8BC,KAA9B,CAAoC;EAClCC,WAAW,CAACC,KAAD,EAAQC,MAAR,EAAgBC,OAAhB,EAAyB;IAClC;IACA,MAAMC,SAAS,GAAG,KAAKJ,WAAL,CAAiBK,aAAjB,CAA+BJ,KAAK,CAACK,MAAN,IAAgBL,KAA/C,EAAsDM,IAAtD,CAA2D,IAA3D,CAAlB;IACA,KAAKC,IAAL,GAAY,iBAAZ;IACA,KAAKC,OAAL,GAAeR,KAAK,CAACQ,OAAN,IAAiBL,SAAjB,GAA8B,GAAEH,KAAK,CAACQ,OAAQ,KAAIL,SAAU,EAA5D,GAAgEH,KAAK,CAACQ,OAAN,IAAiBL,SAAhG;IAEA;AACJ;AACA;AACA;;IACI,KAAKM,MAAL,GAAcP,OAAO,CAACO,MAAtB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,IAAL,GAAYR,OAAO,CAACQ,IAApB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,IAAL,GAAYX,KAAK,CAACW,IAAlB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,UAAL,GAAkBX,MAAlB;IAEA;AACJ;AACA;AACA;;IACI,KAAKY,WAAL,GAAmB;MACjBC,IAAI,EAAEZ,OAAO,CAACa,OAAR,CAAgBC,IADL;MAEjBC,KAAK,EAAEf,OAAO,CAACa,OAAR,CAAgBE,KAAhB,IAAyB;IAFf,CAAnB;EAID;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACsB,OAAbb,aAAa,CAACc,GAAD,EAAgB;IAAA,IAAVC,GAAU,uEAAJ,EAAI;IAClC,IAAIC,QAAQ,GAAG,EAAf;;IAEA,KAAK,MAAM,CAACC,CAAD,EAAIC,CAAJ,CAAX,IAAqBC,MAAM,CAACC,OAAP,CAAeN,GAAf,CAArB,EAA0C;MACxC,IAAIG,CAAC,KAAK,SAAV,EAAqB;MACrB,MAAMI,MAAM,GAAGN,GAAG,GAAIO,KAAK,CAACL,CAAD,CAAL,GAAY,GAAEF,GAAI,IAAGE,CAAE,EAAvB,GAA4B,GAAEF,GAAI,IAAGE,CAAE,GAA3C,GAAiDA,CAAnE;;MAEA,IAAIC,CAAC,CAACK,OAAN,EAAe;QACbP,QAAQ,CAACQ,IAAT,CAAe,GAAEH,MAAO,KAAIH,CAAC,CAACK,OAAF,CAAUE,GAAV,CAAcC,CAAC,IAAIA,CAAC,CAACtB,OAArB,EAA8BF,IAA9B,CAAmC,GAAnC,CAAwC,EAApE;MACD,CAFD,MAEO,IAAIgB,CAAC,CAACX,IAAF,IAAUW,CAAC,CAACd,OAAhB,EAAyB;QAC9BY,QAAQ,CAACQ,IAAT,CAAe,GAAEN,CAAC,CAACX,IAAF,GAAU,GAAEW,CAAC,CAACX,IAAK,IAAnB,GAAyB,EAAG,GAAEW,CAAC,CAACd,OAAQ,EAA3C,CAA6CuB,IAA7C,EAAd;MACD,CAFM,MAEA,IAAI,OAAOT,CAAP,KAAa,QAAjB,EAA2B;QAChCF,QAAQ,CAACQ,IAAT,CAAcN,CAAd;MACD,CAFM,MAEA;QACLF,QAAQ,GAAGA,QAAQ,CAACY,MAAT,CAAgB,KAAK5B,aAAL,CAAmBkB,CAAnB,EAAsBG,MAAtB,CAAhB,CAAX;MACD;IACF;;IAED,OAAOL,QAAP;EACD;;AAnEiC;;AAsEpCa,MAAM,CAACC,OAAP,GAAiBrC,eAAjB;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}