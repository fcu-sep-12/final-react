{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst BaseClient = require('./BaseClient');\n\nconst ActionsManager = require('./actions/ActionsManager');\n\nconst ClientVoiceManager = require('./voice/ClientVoiceManager');\n\nconst WebSocketManager = require('./websocket/WebSocketManager');\n\nconst {\n  Error,\n  TypeError,\n  RangeError\n} = require('../errors');\n\nconst BaseGuildEmojiManager = require('../managers/BaseGuildEmojiManager');\n\nconst ChannelManager = require('../managers/ChannelManager');\n\nconst GuildManager = require('../managers/GuildManager');\n\nconst UserManager = require('../managers/UserManager');\n\nconst ShardClientUtil = require('../sharding/ShardClientUtil');\n\nconst ClientPresence = require('../structures/ClientPresence');\n\nconst GuildPreview = require('../structures/GuildPreview');\n\nconst GuildTemplate = require('../structures/GuildTemplate');\n\nconst Invite = require('../structures/Invite');\n\nconst Sticker = require('../structures/Sticker');\n\nconst StickerPack = require('../structures/StickerPack');\n\nconst VoiceRegion = require('../structures/VoiceRegion');\n\nconst Webhook = require('../structures/Webhook');\n\nconst Widget = require('../structures/Widget');\n\nconst {\n  Events,\n  InviteScopes,\n  Status\n} = require('../util/Constants');\n\nconst DataResolver = require('../util/DataResolver');\n\nconst Intents = require('../util/Intents');\n\nconst Options = require('../util/Options');\n\nconst Permissions = require('../util/Permissions');\n/**\n * The main hub for interacting with the Discord API, and the starting point for any bot.\n * @extends {BaseClient}\n */\n\n\nclass Client extends BaseClient {\n  /**\n   * @param {ClientOptions} options Options for the client\n   */\n  constructor(options) {\n    super(Object.assign({\n      _tokenType: 'Bot'\n    }, options));\n    const data = require('worker_threads').workerData ?? process.env;\n    const defaults = Options.createDefault();\n\n    if (this.options.shards === defaults.shards) {\n      if ('SHARDS' in data) {\n        this.options.shards = JSON.parse(data.SHARDS);\n      }\n    }\n\n    if (this.options.shardCount === defaults.shardCount) {\n      if ('SHARD_COUNT' in data) {\n        this.options.shardCount = Number(data.SHARD_COUNT);\n      } else if (Array.isArray(this.options.shards)) {\n        this.options.shardCount = this.options.shards.length;\n      }\n    }\n\n    const typeofShards = typeof this.options.shards;\n\n    if (typeofShards === 'undefined' && typeof this.options.shardCount === 'number') {\n      this.options.shards = Array.from({\n        length: this.options.shardCount\n      }, (_, i) => i);\n    }\n\n    if (typeofShards === 'number') this.options.shards = [this.options.shards];\n\n    if (Array.isArray(this.options.shards)) {\n      this.options.shards = [...new Set(this.options.shards.filter(item => !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0)))];\n    }\n\n    this._validateOptions();\n    /**\n     * Functions called when a cache is garbage collected or the Client is destroyed\n     * @type {Set<Function>}\n     * @private\n     */\n\n\n    this._cleanups = new Set();\n    /**\n     * The finalizers used to cleanup items.\n     * @type {FinalizationRegistry}\n     * @private\n     */\n\n    this._finalizers = new FinalizationRegistry(this._finalize.bind(this));\n    /**\n     * The WebSocket manager of the client\n     * @type {WebSocketManager}\n     */\n\n    this.ws = new WebSocketManager(this);\n    /**\n     * The action manager of the client\n     * @type {ActionsManager}\n     * @private\n     */\n\n    this.actions = new ActionsManager(this);\n    /**\n     * The voice manager of the client\n     * @type {ClientVoiceManager}\n     */\n\n    this.voice = new ClientVoiceManager(this);\n    /**\n     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})\n     * @type {?ShardClientUtil}\n     */\n\n    this.shard = process.env.SHARDING_MANAGER ? ShardClientUtil.singleton(this, process.env.SHARDING_MANAGER_MODE) : null;\n    /**\n     * All of the {@link User} objects that have been cached at any point, mapped by their ids\n     * @type {UserManager}\n     */\n\n    this.users = new UserManager(this);\n    /**\n     * All of the guilds the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* guild the bot is a member of\n     * @type {GuildManager}\n     */\n\n    this.guilds = new GuildManager(this);\n    /**\n     * All of the {@link Channel}s that the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot\n     * is a member of. Note that DM channels will not be initially cached, and thus not be present\n     * in the Manager without their explicit fetching or use.\n     * @type {ChannelManager}\n     */\n\n    this.channels = new ChannelManager(this);\n    /**\n     * The presence of the Client\n     * @private\n     * @type {ClientPresence}\n     */\n\n    this.presence = new ClientPresence(this, this.options.presence);\n    Object.defineProperty(this, 'token', {\n      writable: true\n    });\n\n    if (!this.token && 'DISCORD_TOKEN' in process.env) {\n      /**\n       * Authorization token for the logged in bot.\n       * If present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client\n       * <warn>This should be kept private at all times.</warn>\n       * @type {?string}\n       */\n      this.token = process.env.DISCORD_TOKEN;\n    } else {\n      this.token = null;\n    }\n    /**\n     * User that the client is logged in as\n     * @type {?ClientUser}\n     */\n\n\n    this.user = null;\n    /**\n     * The application of this bot\n     * @type {?ClientApplication}\n     */\n\n    this.application = null;\n    /**\n     * Time at which the client was last regarded as being in the `READY` state\n     * (each time the client disconnects and successfully reconnects, this will be overwritten)\n     * @type {?Date}\n     */\n\n    this.readyAt = null;\n\n    if (this.options.messageSweepInterval > 0) {\n      process.emitWarning('The message sweeping client options are deprecated, use the makeCache option with LimitedCollection instead.', 'DeprecationWarning');\n      this.sweepMessageInterval = setInterval(this.sweepMessages.bind(this), this.options.messageSweepInterval * 1000).unref();\n    }\n  }\n  /**\n   * All custom emojis that the client has access to, mapped by their ids\n   * @type {BaseGuildEmojiManager}\n   * @readonly\n   */\n\n\n  get emojis() {\n    const emojis = new BaseGuildEmojiManager(this);\n\n    for (const guild of this.guilds.cache.values()) {\n      if (guild.available) for (const emoji of guild.emojis.cache.values()) emojis.cache.set(emoji.id, emoji);\n    }\n\n    return emojis;\n  }\n  /**\n   * Timestamp of the time the client was last `READY` at\n   * @type {?number}\n   * @readonly\n   */\n\n\n  get readyTimestamp() {\n    return this.readyAt?.getTime() ?? null;\n  }\n  /**\n   * How long it has been since the client last entered the `READY` state in milliseconds\n   * @type {?number}\n   * @readonly\n   */\n\n\n  get uptime() {\n    return this.readyAt ? Date.now() - this.readyAt : null;\n  }\n  /**\n   * Logs the client in, establishing a websocket connection to Discord.\n   * @param {string} [token=this.token] Token of the account to log in with\n   * @returns {Promise<string>} Token of the account used\n   * @example\n   * client.login('my token');\n   */\n\n\n  async login() {\n    let token = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.token;\n    if (!token || typeof token !== 'string') throw new Error('TOKEN_INVALID');\n    this.token = token = token.replace(/^(Bot|Bearer)\\s*/i, '');\n    this.emit(Events.DEBUG, `Provided token: ${token.split('.').map((val, i) => i > 1 ? val.replace(/./g, '*') : val).join('.')}`);\n\n    if (this.options.presence) {\n      this.options.ws.presence = this.presence._parse(this.options.presence);\n    }\n\n    this.emit(Events.DEBUG, 'Preparing to connect to the gateway...');\n\n    try {\n      await this.ws.connect();\n      return this.token;\n    } catch (error) {\n      this.destroy();\n      throw error;\n    }\n  }\n  /**\n   * Returns whether the client has logged in, indicative of being able to access\n   * properties such as `user` and `application`.\n   * @returns {boolean}\n   */\n\n\n  isReady() {\n    return this.ws.status === Status.READY;\n  }\n  /**\n   * Logs out, terminates the connection to Discord, and destroys the client.\n   * @returns {void}\n   */\n\n\n  destroy() {\n    super.destroy();\n\n    for (const fn of this._cleanups) fn();\n\n    this._cleanups.clear();\n\n    if (this.sweepMessageInterval) clearInterval(this.sweepMessageInterval);\n    this.ws.destroy();\n    this.token = null;\n  }\n  /**\n   * Obtains an invite from Discord.\n   * @param {InviteResolvable} invite Invite code or URL\n   * @returns {Promise<Invite>}\n   * @example\n   * client.fetchInvite('https://discord.gg/djs')\n   *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchInvite(invite) {\n    const code = DataResolver.resolveInviteCode(invite);\n    const data = await this.api.invites(code).get({\n      query: {\n        with_counts: true,\n        with_expiration: true\n      }\n    });\n    return new Invite(this, data);\n  }\n  /**\n   * Obtains a template from Discord.\n   * @param {GuildTemplateResolvable} template Template code or URL\n   * @returns {Promise<GuildTemplate>}\n   * @example\n   * client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')\n   *   .then(template => console.log(`Obtained template with code: ${template.code}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchGuildTemplate(template) {\n    const code = DataResolver.resolveGuildTemplateCode(template);\n    const data = await this.api.guilds.templates(code).get();\n    return new GuildTemplate(this, data);\n  }\n  /**\n   * Obtains a webhook from Discord.\n   * @param {Snowflake} id The webhook's id\n   * @param {string} [token] Token for the webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * client.fetchWebhook('id', 'token')\n   *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchWebhook(id, token) {\n    const data = await this.api.webhooks(id, token).get();\n    return new Webhook(this, {\n      token,\n      ...data\n    });\n  }\n  /**\n   * Obtains the available voice regions from Discord.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   * @example\n   * client.fetchVoiceRegions()\n   *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchVoiceRegions() {\n    const apiRegions = await this.api.voice.regions.get();\n    const regions = new Collection();\n\n    for (const region of apiRegions) regions.set(region.id, new VoiceRegion(region));\n\n    return regions;\n  }\n  /**\n   * Obtains a sticker from Discord.\n   * @param {Snowflake} id The sticker's id\n   * @returns {Promise<Sticker>}\n   * @example\n   * client.fetchSticker('id')\n   *   .then(sticker => console.log(`Obtained sticker with name: ${sticker.name}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchSticker(id) {\n    const data = await this.api.stickers(id).get();\n    return new Sticker(this, data);\n  }\n  /**\n   * Obtains the list of sticker packs available to Nitro subscribers from Discord.\n   * @returns {Promise<Collection<Snowflake, StickerPack>>}\n   * @example\n   * client.fetchPremiumStickerPacks()\n   *   .then(packs => console.log(`Available sticker packs are: ${packs.map(pack => pack.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchPremiumStickerPacks() {\n    const data = await this.api('sticker-packs').get();\n    return new Collection(data.sticker_packs.map(p => [p.id, new StickerPack(this, p)]));\n  }\n  /**\n   * A last ditch cleanup function for garbage collection.\n   * @param {Function} options.cleanup The function called to GC\n   * @param {string} [options.message] The message to send after a successful GC\n   * @param {string} [options.name] The name of the item being GCed\n   * @private\n   */\n\n\n  _finalize(_ref) {\n    let {\n      cleanup,\n      message,\n      name\n    } = _ref;\n\n    try {\n      cleanup();\n\n      this._cleanups.delete(cleanup);\n\n      if (message) {\n        this.emit(Events.DEBUG, message);\n      }\n    } catch {\n      this.emit(Events.DEBUG, `Garbage collection failed on ${name ?? 'an unknown item'}.`);\n    }\n  }\n  /**\n   * Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\n   * If the message has been edited, the time of the edit is used rather than the time of the original message.\n   * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)\n   * will be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}\n   * @returns {number} Amount of messages that were removed from the caches,\n   * or -1 if the message cache lifetime is unlimited\n   * @example\n   * // Remove all messages older than 1800 seconds from the messages cache\n   * const amount = client.sweepMessages(1800);\n   * console.log(`Successfully removed ${amount} messages from the cache.`);\n   */\n\n\n  sweepMessages() {\n    let lifetime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.messageCacheLifetime;\n\n    if (typeof lifetime !== 'number' || isNaN(lifetime)) {\n      throw new TypeError('INVALID_TYPE', 'lifetime', 'number');\n    }\n\n    if (lifetime <= 0) {\n      this.emit(Events.DEBUG, \"Didn't sweep messages - lifetime is unlimited\");\n      return -1;\n    }\n\n    const lifetimeMs = lifetime * 1000;\n    const now = Date.now();\n    let channels = 0;\n    let messages = 0;\n\n    for (const channel of this.channels.cache.values()) {\n      if (!channel.messages) continue;\n      channels++;\n      messages += channel.messages.cache.sweep(message => now - (message.editedTimestamp ?? message.createdTimestamp) > lifetimeMs);\n    }\n\n    this.emit(Events.DEBUG, `Swept ${messages} messages older than ${lifetime} seconds in ${channels} text-based channels`);\n    return messages;\n  }\n  /**\n   * Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.\n   * @param {GuildResolvable} guild The guild to fetch the preview for\n   * @returns {Promise<GuildPreview>}\n   */\n\n\n  async fetchGuildPreview(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');\n    const data = await this.api.guilds(id).preview.get();\n    return new GuildPreview(this, data);\n  }\n  /**\n   * Obtains the widget data of a guild from Discord, available for guilds with the widget enabled.\n   * @param {GuildResolvable} guild The guild to fetch the widget data for\n   * @returns {Promise<Widget>}\n   */\n\n\n  async fetchGuildWidget(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');\n    const data = await this.api.guilds(id, 'widget.json').get();\n    return new Widget(this, data);\n  }\n  /**\n   * Options for {@link Client#generateInvite}.\n   * @typedef {Object} InviteGenerationOptions\n   * @property {InviteScope[]} scopes Scopes that should be requested\n   * @property {PermissionResolvable} [permissions] Permissions to request\n   * @property {GuildResolvable} [guild] Guild to preselect\n   * @property {boolean} [disableGuildSelect] Whether to disable the guild selection\n   */\n\n  /**\n   * Generates a link that can be used to invite the bot to a guild.\n   * @param {InviteGenerationOptions} [options={}] Options for the invite\n   * @returns {string}\n   * @example\n   * const link = client.generateInvite({\n   *   scopes: ['applications.commands'],\n   * });\n   * console.log(`Generated application invite link: ${link}`);\n   * @example\n   * const link = client.generateInvite({\n   *   permissions: [\n   *     Permissions.FLAGS.SEND_MESSAGES,\n   *     Permissions.FLAGS.MANAGE_GUILD,\n   *     Permissions.FLAGS.MENTION_EVERYONE,\n   *   ],\n   *   scopes: ['bot'],\n   * });\n   * console.log(`Generated bot invite link: ${link}`);\n   */\n\n\n  generateInvite() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    if (!this.application) throw new Error('CLIENT_NOT_READY', 'generate an invite link');\n    const query = new URLSearchParams({\n      client_id: this.application.id\n    });\n    const {\n      scopes\n    } = options;\n\n    if (typeof scopes === 'undefined') {\n      throw new TypeError('INVITE_MISSING_SCOPES');\n    }\n\n    if (!Array.isArray(scopes)) {\n      throw new TypeError('INVALID_TYPE', 'scopes', 'Array of Invite Scopes', true);\n    }\n\n    if (!scopes.some(scope => ['bot', 'applications.commands'].includes(scope))) {\n      throw new TypeError('INVITE_MISSING_SCOPES');\n    }\n\n    const invalidScope = scopes.find(scope => !InviteScopes.includes(scope));\n\n    if (invalidScope) {\n      throw new TypeError('INVALID_ELEMENT', 'Array', 'scopes', invalidScope);\n    }\n\n    query.set('scope', scopes.join(' '));\n\n    if (options.permissions) {\n      const permissions = Permissions.resolve(options.permissions);\n      if (permissions) query.set('permissions', permissions);\n    }\n\n    if (options.disableGuildSelect) {\n      query.set('disable_guild_select', true);\n    }\n\n    if (options.guild) {\n      const guildId = this.guilds.resolveId(options.guild);\n      if (!guildId) throw new TypeError('INVALID_TYPE', 'options.guild', 'GuildResolvable');\n      query.set('guild_id', guildId);\n    }\n\n    return `${this.options.http.api}${this.api.oauth2.authorize}?${query}`;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      readyAt: false\n    });\n  }\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\n   * with the client as `this`.\n   * @param {string} script Script to eval\n   * @returns {*}\n   * @private\n   */\n\n\n  _eval(script) {\n    return eval(script);\n  }\n  /**\n   * Validates the client options.\n   * @param {ClientOptions} [options=this.options] Options to validate\n   * @private\n   */\n\n\n  _validateOptions() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options;\n\n    if (typeof options.intents === 'undefined') {\n      throw new TypeError('CLIENT_MISSING_INTENTS');\n    } else {\n      options.intents = Intents.resolve(options.intents);\n    }\n\n    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'shardCount', 'a number greater than or equal to 1');\n    }\n\n    if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'shards', \"'auto', a number or array of numbers\");\n    }\n\n    if (options.shards && !options.shards.length) throw new RangeError('CLIENT_INVALID_PROVIDED_SHARDS');\n\n    if (typeof options.makeCache !== 'function') {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'makeCache', 'a function');\n    }\n\n    if (typeof options.messageCacheLifetime !== 'number' || isNaN(options.messageCacheLifetime)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'The messageCacheLifetime', 'a number');\n    }\n\n    if (typeof options.messageSweepInterval !== 'number' || isNaN(options.messageSweepInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'messageSweepInterval', 'a number');\n    }\n\n    if (typeof options.invalidRequestWarningInterval !== 'number' || isNaN(options.invalidRequestWarningInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'invalidRequestWarningInterval', 'a number');\n    }\n\n    if (!Array.isArray(options.partials)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'partials', 'an Array');\n    }\n\n    if (typeof options.restWsBridgeTimeout !== 'number' || isNaN(options.restWsBridgeTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restWsBridgeTimeout', 'a number');\n    }\n\n    if (typeof options.restRequestTimeout !== 'number' || isNaN(options.restRequestTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restRequestTimeout', 'a number');\n    }\n\n    if (typeof options.restGlobalRateLimit !== 'number' || isNaN(options.restGlobalRateLimit)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restGlobalRateLimit', 'a number');\n    }\n\n    if (typeof options.restSweepInterval !== 'number' || isNaN(options.restSweepInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restSweepInterval', 'a number');\n    }\n\n    if (typeof options.retryLimit !== 'number' || isNaN(options.retryLimit)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'retryLimit', 'a number');\n    }\n\n    if (typeof options.failIfNotExists !== 'boolean') {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'failIfNotExists', 'a boolean');\n    }\n\n    if (!Array.isArray(options.userAgentSuffix)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'userAgentSuffix', 'an array of strings');\n    }\n\n    if (typeof options.rejectOnRateLimit !== 'undefined' && !(typeof options.rejectOnRateLimit === 'function' || Array.isArray(options.rejectOnRateLimit))) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'rejectOnRateLimit', 'an array or a function');\n    }\n  }\n\n}\n\nmodule.exports = Client;\n/**\n * Emitted for general warnings.\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * Emitted for general debugging information.\n * @event Client#debug\n * @param {string} info The debug information\n */\n\n/**\n * @external Collection\n * @see {@link https://discord.js.org/#/docs/collection/main/class/Collection}\n */","map":{"version":3,"names":["Collection","require","BaseClient","ActionsManager","ClientVoiceManager","WebSocketManager","Error","TypeError","RangeError","BaseGuildEmojiManager","ChannelManager","GuildManager","UserManager","ShardClientUtil","ClientPresence","GuildPreview","GuildTemplate","Invite","Sticker","StickerPack","VoiceRegion","Webhook","Widget","Events","InviteScopes","Status","DataResolver","Intents","Options","Permissions","Client","constructor","options","Object","assign","_tokenType","data","workerData","process","env","defaults","createDefault","shards","JSON","parse","SHARDS","shardCount","Number","SHARD_COUNT","Array","isArray","length","typeofShards","from","_","i","Set","filter","item","isNaN","Infinity","_validateOptions","_cleanups","_finalizers","FinalizationRegistry","_finalize","bind","ws","actions","voice","shard","SHARDING_MANAGER","singleton","SHARDING_MANAGER_MODE","users","guilds","channels","presence","defineProperty","writable","token","DISCORD_TOKEN","user","application","readyAt","messageSweepInterval","emitWarning","sweepMessageInterval","setInterval","sweepMessages","unref","emojis","guild","cache","values","available","emoji","set","id","readyTimestamp","getTime","uptime","Date","now","login","replace","emit","DEBUG","split","map","val","join","_parse","connect","error","destroy","isReady","status","READY","fn","clear","clearInterval","fetchInvite","invite","code","resolveInviteCode","api","invites","get","query","with_counts","with_expiration","fetchGuildTemplate","template","resolveGuildTemplateCode","templates","fetchWebhook","webhooks","fetchVoiceRegions","apiRegions","regions","region","fetchSticker","stickers","fetchPremiumStickerPacks","sticker_packs","p","cleanup","message","name","delete","lifetime","messageCacheLifetime","lifetimeMs","messages","channel","sweep","editedTimestamp","createdTimestamp","fetchGuildPreview","resolveId","preview","fetchGuildWidget","generateInvite","URLSearchParams","client_id","scopes","some","scope","includes","invalidScope","find","permissions","resolve","disableGuildSelect","guildId","http","oauth2","authorize","toJSON","_eval","script","eval","intents","makeCache","invalidRequestWarningInterval","partials","restWsBridgeTimeout","restRequestTimeout","restGlobalRateLimit","restSweepInterval","retryLimit","failIfNotExists","userAgentSuffix","rejectOnRateLimit","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/Client.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst BaseClient = require('./BaseClient');\nconst ActionsManager = require('./actions/ActionsManager');\nconst ClientVoiceManager = require('./voice/ClientVoiceManager');\nconst WebSocketManager = require('./websocket/WebSocketManager');\nconst { Error, TypeError, RangeError } = require('../errors');\nconst BaseGuildEmojiManager = require('../managers/BaseGuildEmojiManager');\nconst ChannelManager = require('../managers/ChannelManager');\nconst GuildManager = require('../managers/GuildManager');\nconst UserManager = require('../managers/UserManager');\nconst ShardClientUtil = require('../sharding/ShardClientUtil');\nconst ClientPresence = require('../structures/ClientPresence');\nconst GuildPreview = require('../structures/GuildPreview');\nconst GuildTemplate = require('../structures/GuildTemplate');\nconst Invite = require('../structures/Invite');\nconst Sticker = require('../structures/Sticker');\nconst StickerPack = require('../structures/StickerPack');\nconst VoiceRegion = require('../structures/VoiceRegion');\nconst Webhook = require('../structures/Webhook');\nconst Widget = require('../structures/Widget');\nconst { Events, InviteScopes, Status } = require('../util/Constants');\nconst DataResolver = require('../util/DataResolver');\nconst Intents = require('../util/Intents');\nconst Options = require('../util/Options');\nconst Permissions = require('../util/Permissions');\n\n/**\n * The main hub for interacting with the Discord API, and the starting point for any bot.\n * @extends {BaseClient}\n */\nclass Client extends BaseClient {\n  /**\n   * @param {ClientOptions} options Options for the client\n   */\n  constructor(options) {\n    super(Object.assign({ _tokenType: 'Bot' }, options));\n\n    const data = require('worker_threads').workerData ?? process.env;\n    const defaults = Options.createDefault();\n\n    if (this.options.shards === defaults.shards) {\n      if ('SHARDS' in data) {\n        this.options.shards = JSON.parse(data.SHARDS);\n      }\n    }\n\n    if (this.options.shardCount === defaults.shardCount) {\n      if ('SHARD_COUNT' in data) {\n        this.options.shardCount = Number(data.SHARD_COUNT);\n      } else if (Array.isArray(this.options.shards)) {\n        this.options.shardCount = this.options.shards.length;\n      }\n    }\n\n    const typeofShards = typeof this.options.shards;\n\n    if (typeofShards === 'undefined' && typeof this.options.shardCount === 'number') {\n      this.options.shards = Array.from({ length: this.options.shardCount }, (_, i) => i);\n    }\n\n    if (typeofShards === 'number') this.options.shards = [this.options.shards];\n\n    if (Array.isArray(this.options.shards)) {\n      this.options.shards = [\n        ...new Set(\n          this.options.shards.filter(item => !isNaN(item) && item >= 0 && item < Infinity && item === (item | 0)),\n        ),\n      ];\n    }\n\n    this._validateOptions();\n\n    /**\n     * Functions called when a cache is garbage collected or the Client is destroyed\n     * @type {Set<Function>}\n     * @private\n     */\n    this._cleanups = new Set();\n\n    /**\n     * The finalizers used to cleanup items.\n     * @type {FinalizationRegistry}\n     * @private\n     */\n    this._finalizers = new FinalizationRegistry(this._finalize.bind(this));\n\n    /**\n     * The WebSocket manager of the client\n     * @type {WebSocketManager}\n     */\n    this.ws = new WebSocketManager(this);\n\n    /**\n     * The action manager of the client\n     * @type {ActionsManager}\n     * @private\n     */\n    this.actions = new ActionsManager(this);\n\n    /**\n     * The voice manager of the client\n     * @type {ClientVoiceManager}\n     */\n    this.voice = new ClientVoiceManager(this);\n\n    /**\n     * Shard helpers for the client (only if the process was spawned from a {@link ShardingManager})\n     * @type {?ShardClientUtil}\n     */\n    this.shard = process.env.SHARDING_MANAGER\n      ? ShardClientUtil.singleton(this, process.env.SHARDING_MANAGER_MODE)\n      : null;\n\n    /**\n     * All of the {@link User} objects that have been cached at any point, mapped by their ids\n     * @type {UserManager}\n     */\n    this.users = new UserManager(this);\n\n    /**\n     * All of the guilds the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* guild the bot is a member of\n     * @type {GuildManager}\n     */\n    this.guilds = new GuildManager(this);\n\n    /**\n     * All of the {@link Channel}s that the client is currently handling, mapped by their ids -\n     * as long as sharding isn't being used, this will be *every* channel in *every* guild the bot\n     * is a member of. Note that DM channels will not be initially cached, and thus not be present\n     * in the Manager without their explicit fetching or use.\n     * @type {ChannelManager}\n     */\n    this.channels = new ChannelManager(this);\n\n    /**\n     * The presence of the Client\n     * @private\n     * @type {ClientPresence}\n     */\n    this.presence = new ClientPresence(this, this.options.presence);\n\n    Object.defineProperty(this, 'token', { writable: true });\n    if (!this.token && 'DISCORD_TOKEN' in process.env) {\n      /**\n       * Authorization token for the logged in bot.\n       * If present, this defaults to `process.env.DISCORD_TOKEN` when instantiating the client\n       * <warn>This should be kept private at all times.</warn>\n       * @type {?string}\n       */\n      this.token = process.env.DISCORD_TOKEN;\n    } else {\n      this.token = null;\n    }\n\n    /**\n     * User that the client is logged in as\n     * @type {?ClientUser}\n     */\n    this.user = null;\n\n    /**\n     * The application of this bot\n     * @type {?ClientApplication}\n     */\n    this.application = null;\n\n    /**\n     * Time at which the client was last regarded as being in the `READY` state\n     * (each time the client disconnects and successfully reconnects, this will be overwritten)\n     * @type {?Date}\n     */\n    this.readyAt = null;\n\n    if (this.options.messageSweepInterval > 0) {\n      process.emitWarning(\n        'The message sweeping client options are deprecated, use the makeCache option with LimitedCollection instead.',\n        'DeprecationWarning',\n      );\n      this.sweepMessageInterval = setInterval(\n        this.sweepMessages.bind(this),\n        this.options.messageSweepInterval * 1000,\n      ).unref();\n    }\n  }\n\n  /**\n   * All custom emojis that the client has access to, mapped by their ids\n   * @type {BaseGuildEmojiManager}\n   * @readonly\n   */\n  get emojis() {\n    const emojis = new BaseGuildEmojiManager(this);\n    for (const guild of this.guilds.cache.values()) {\n      if (guild.available) for (const emoji of guild.emojis.cache.values()) emojis.cache.set(emoji.id, emoji);\n    }\n    return emojis;\n  }\n\n  /**\n   * Timestamp of the time the client was last `READY` at\n   * @type {?number}\n   * @readonly\n   */\n  get readyTimestamp() {\n    return this.readyAt?.getTime() ?? null;\n  }\n\n  /**\n   * How long it has been since the client last entered the `READY` state in milliseconds\n   * @type {?number}\n   * @readonly\n   */\n  get uptime() {\n    return this.readyAt ? Date.now() - this.readyAt : null;\n  }\n\n  /**\n   * Logs the client in, establishing a websocket connection to Discord.\n   * @param {string} [token=this.token] Token of the account to log in with\n   * @returns {Promise<string>} Token of the account used\n   * @example\n   * client.login('my token');\n   */\n  async login(token = this.token) {\n    if (!token || typeof token !== 'string') throw new Error('TOKEN_INVALID');\n    this.token = token = token.replace(/^(Bot|Bearer)\\s*/i, '');\n    this.emit(\n      Events.DEBUG,\n      `Provided token: ${token\n        .split('.')\n        .map((val, i) => (i > 1 ? val.replace(/./g, '*') : val))\n        .join('.')}`,\n    );\n\n    if (this.options.presence) {\n      this.options.ws.presence = this.presence._parse(this.options.presence);\n    }\n\n    this.emit(Events.DEBUG, 'Preparing to connect to the gateway...');\n\n    try {\n      await this.ws.connect();\n      return this.token;\n    } catch (error) {\n      this.destroy();\n      throw error;\n    }\n  }\n\n  /**\n   * Returns whether the client has logged in, indicative of being able to access\n   * properties such as `user` and `application`.\n   * @returns {boolean}\n   */\n  isReady() {\n    return this.ws.status === Status.READY;\n  }\n\n  /**\n   * Logs out, terminates the connection to Discord, and destroys the client.\n   * @returns {void}\n   */\n  destroy() {\n    super.destroy();\n\n    for (const fn of this._cleanups) fn();\n    this._cleanups.clear();\n\n    if (this.sweepMessageInterval) clearInterval(this.sweepMessageInterval);\n\n    this.ws.destroy();\n    this.token = null;\n  }\n\n  /**\n   * Obtains an invite from Discord.\n   * @param {InviteResolvable} invite Invite code or URL\n   * @returns {Promise<Invite>}\n   * @example\n   * client.fetchInvite('https://discord.gg/djs')\n   *   .then(invite => console.log(`Obtained invite with code: ${invite.code}`))\n   *   .catch(console.error);\n   */\n  async fetchInvite(invite) {\n    const code = DataResolver.resolveInviteCode(invite);\n    const data = await this.api.invites(code).get({ query: { with_counts: true, with_expiration: true } });\n    return new Invite(this, data);\n  }\n\n  /**\n   * Obtains a template from Discord.\n   * @param {GuildTemplateResolvable} template Template code or URL\n   * @returns {Promise<GuildTemplate>}\n   * @example\n   * client.fetchGuildTemplate('https://discord.new/FKvmczH2HyUf')\n   *   .then(template => console.log(`Obtained template with code: ${template.code}`))\n   *   .catch(console.error);\n   */\n  async fetchGuildTemplate(template) {\n    const code = DataResolver.resolveGuildTemplateCode(template);\n    const data = await this.api.guilds.templates(code).get();\n    return new GuildTemplate(this, data);\n  }\n\n  /**\n   * Obtains a webhook from Discord.\n   * @param {Snowflake} id The webhook's id\n   * @param {string} [token] Token for the webhook\n   * @returns {Promise<Webhook>}\n   * @example\n   * client.fetchWebhook('id', 'token')\n   *   .then(webhook => console.log(`Obtained webhook with name: ${webhook.name}`))\n   *   .catch(console.error);\n   */\n  async fetchWebhook(id, token) {\n    const data = await this.api.webhooks(id, token).get();\n    return new Webhook(this, { token, ...data });\n  }\n\n  /**\n   * Obtains the available voice regions from Discord.\n   * @returns {Promise<Collection<string, VoiceRegion>>}\n   * @example\n   * client.fetchVoiceRegions()\n   *   .then(regions => console.log(`Available regions are: ${regions.map(region => region.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n  async fetchVoiceRegions() {\n    const apiRegions = await this.api.voice.regions.get();\n    const regions = new Collection();\n    for (const region of apiRegions) regions.set(region.id, new VoiceRegion(region));\n    return regions;\n  }\n\n  /**\n   * Obtains a sticker from Discord.\n   * @param {Snowflake} id The sticker's id\n   * @returns {Promise<Sticker>}\n   * @example\n   * client.fetchSticker('id')\n   *   .then(sticker => console.log(`Obtained sticker with name: ${sticker.name}`))\n   *   .catch(console.error);\n   */\n  async fetchSticker(id) {\n    const data = await this.api.stickers(id).get();\n    return new Sticker(this, data);\n  }\n\n  /**\n   * Obtains the list of sticker packs available to Nitro subscribers from Discord.\n   * @returns {Promise<Collection<Snowflake, StickerPack>>}\n   * @example\n   * client.fetchPremiumStickerPacks()\n   *   .then(packs => console.log(`Available sticker packs are: ${packs.map(pack => pack.name).join(', ')}`))\n   *   .catch(console.error);\n   */\n  async fetchPremiumStickerPacks() {\n    const data = await this.api('sticker-packs').get();\n    return new Collection(data.sticker_packs.map(p => [p.id, new StickerPack(this, p)]));\n  }\n  /**\n   * A last ditch cleanup function for garbage collection.\n   * @param {Function} options.cleanup The function called to GC\n   * @param {string} [options.message] The message to send after a successful GC\n   * @param {string} [options.name] The name of the item being GCed\n   * @private\n   */\n  _finalize({ cleanup, message, name }) {\n    try {\n      cleanup();\n      this._cleanups.delete(cleanup);\n      if (message) {\n        this.emit(Events.DEBUG, message);\n      }\n    } catch {\n      this.emit(Events.DEBUG, `Garbage collection failed on ${name ?? 'an unknown item'}.`);\n    }\n  }\n\n  /**\n   * Sweeps all text-based channels' messages and removes the ones older than the max message lifetime.\n   * If the message has been edited, the time of the edit is used rather than the time of the original message.\n   * @param {number} [lifetime=this.options.messageCacheLifetime] Messages that are older than this (in seconds)\n   * will be removed from the caches. The default is based on {@link ClientOptions#messageCacheLifetime}\n   * @returns {number} Amount of messages that were removed from the caches,\n   * or -1 if the message cache lifetime is unlimited\n   * @example\n   * // Remove all messages older than 1800 seconds from the messages cache\n   * const amount = client.sweepMessages(1800);\n   * console.log(`Successfully removed ${amount} messages from the cache.`);\n   */\n  sweepMessages(lifetime = this.options.messageCacheLifetime) {\n    if (typeof lifetime !== 'number' || isNaN(lifetime)) {\n      throw new TypeError('INVALID_TYPE', 'lifetime', 'number');\n    }\n    if (lifetime <= 0) {\n      this.emit(Events.DEBUG, \"Didn't sweep messages - lifetime is unlimited\");\n      return -1;\n    }\n\n    const lifetimeMs = lifetime * 1000;\n    const now = Date.now();\n    let channels = 0;\n    let messages = 0;\n\n    for (const channel of this.channels.cache.values()) {\n      if (!channel.messages) continue;\n      channels++;\n\n      messages += channel.messages.cache.sweep(\n        message => now - (message.editedTimestamp ?? message.createdTimestamp) > lifetimeMs,\n      );\n    }\n\n    this.emit(\n      Events.DEBUG,\n      `Swept ${messages} messages older than ${lifetime} seconds in ${channels} text-based channels`,\n    );\n    return messages;\n  }\n\n  /**\n   * Obtains a guild preview from Discord, available for all guilds the bot is in and all Discoverable guilds.\n   * @param {GuildResolvable} guild The guild to fetch the preview for\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetchGuildPreview(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');\n    const data = await this.api.guilds(id).preview.get();\n    return new GuildPreview(this, data);\n  }\n\n  /**\n   * Obtains the widget data of a guild from Discord, available for guilds with the widget enabled.\n   * @param {GuildResolvable} guild The guild to fetch the widget data for\n   * @returns {Promise<Widget>}\n   */\n  async fetchGuildWidget(guild) {\n    const id = this.guilds.resolveId(guild);\n    if (!id) throw new TypeError('INVALID_TYPE', 'guild', 'GuildResolvable');\n    const data = await this.api.guilds(id, 'widget.json').get();\n    return new Widget(this, data);\n  }\n\n  /**\n   * Options for {@link Client#generateInvite}.\n   * @typedef {Object} InviteGenerationOptions\n   * @property {InviteScope[]} scopes Scopes that should be requested\n   * @property {PermissionResolvable} [permissions] Permissions to request\n   * @property {GuildResolvable} [guild] Guild to preselect\n   * @property {boolean} [disableGuildSelect] Whether to disable the guild selection\n   */\n\n  /**\n   * Generates a link that can be used to invite the bot to a guild.\n   * @param {InviteGenerationOptions} [options={}] Options for the invite\n   * @returns {string}\n   * @example\n   * const link = client.generateInvite({\n   *   scopes: ['applications.commands'],\n   * });\n   * console.log(`Generated application invite link: ${link}`);\n   * @example\n   * const link = client.generateInvite({\n   *   permissions: [\n   *     Permissions.FLAGS.SEND_MESSAGES,\n   *     Permissions.FLAGS.MANAGE_GUILD,\n   *     Permissions.FLAGS.MENTION_EVERYONE,\n   *   ],\n   *   scopes: ['bot'],\n   * });\n   * console.log(`Generated bot invite link: ${link}`);\n   */\n  generateInvite(options = {}) {\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    if (!this.application) throw new Error('CLIENT_NOT_READY', 'generate an invite link');\n\n    const query = new URLSearchParams({\n      client_id: this.application.id,\n    });\n\n    const { scopes } = options;\n    if (typeof scopes === 'undefined') {\n      throw new TypeError('INVITE_MISSING_SCOPES');\n    }\n    if (!Array.isArray(scopes)) {\n      throw new TypeError('INVALID_TYPE', 'scopes', 'Array of Invite Scopes', true);\n    }\n    if (!scopes.some(scope => ['bot', 'applications.commands'].includes(scope))) {\n      throw new TypeError('INVITE_MISSING_SCOPES');\n    }\n    const invalidScope = scopes.find(scope => !InviteScopes.includes(scope));\n    if (invalidScope) {\n      throw new TypeError('INVALID_ELEMENT', 'Array', 'scopes', invalidScope);\n    }\n    query.set('scope', scopes.join(' '));\n\n    if (options.permissions) {\n      const permissions = Permissions.resolve(options.permissions);\n      if (permissions) query.set('permissions', permissions);\n    }\n\n    if (options.disableGuildSelect) {\n      query.set('disable_guild_select', true);\n    }\n\n    if (options.guild) {\n      const guildId = this.guilds.resolveId(options.guild);\n      if (!guildId) throw new TypeError('INVALID_TYPE', 'options.guild', 'GuildResolvable');\n      query.set('guild_id', guildId);\n    }\n\n    return `${this.options.http.api}${this.api.oauth2.authorize}?${query}`;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      readyAt: false,\n    });\n  }\n\n  /**\n   * Calls {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval} on a script\n   * with the client as `this`.\n   * @param {string} script Script to eval\n   * @returns {*}\n   * @private\n   */\n  _eval(script) {\n    return eval(script);\n  }\n\n  /**\n   * Validates the client options.\n   * @param {ClientOptions} [options=this.options] Options to validate\n   * @private\n   */\n  _validateOptions(options = this.options) {\n    if (typeof options.intents === 'undefined') {\n      throw new TypeError('CLIENT_MISSING_INTENTS');\n    } else {\n      options.intents = Intents.resolve(options.intents);\n    }\n    if (typeof options.shardCount !== 'number' || isNaN(options.shardCount) || options.shardCount < 1) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'shardCount', 'a number greater than or equal to 1');\n    }\n    if (options.shards && !(options.shards === 'auto' || Array.isArray(options.shards))) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'shards', \"'auto', a number or array of numbers\");\n    }\n    if (options.shards && !options.shards.length) throw new RangeError('CLIENT_INVALID_PROVIDED_SHARDS');\n    if (typeof options.makeCache !== 'function') {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'makeCache', 'a function');\n    }\n    if (typeof options.messageCacheLifetime !== 'number' || isNaN(options.messageCacheLifetime)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'The messageCacheLifetime', 'a number');\n    }\n    if (typeof options.messageSweepInterval !== 'number' || isNaN(options.messageSweepInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'messageSweepInterval', 'a number');\n    }\n    if (typeof options.invalidRequestWarningInterval !== 'number' || isNaN(options.invalidRequestWarningInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'invalidRequestWarningInterval', 'a number');\n    }\n    if (!Array.isArray(options.partials)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'partials', 'an Array');\n    }\n    if (typeof options.restWsBridgeTimeout !== 'number' || isNaN(options.restWsBridgeTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restWsBridgeTimeout', 'a number');\n    }\n    if (typeof options.restRequestTimeout !== 'number' || isNaN(options.restRequestTimeout)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restRequestTimeout', 'a number');\n    }\n    if (typeof options.restGlobalRateLimit !== 'number' || isNaN(options.restGlobalRateLimit)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restGlobalRateLimit', 'a number');\n    }\n    if (typeof options.restSweepInterval !== 'number' || isNaN(options.restSweepInterval)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'restSweepInterval', 'a number');\n    }\n    if (typeof options.retryLimit !== 'number' || isNaN(options.retryLimit)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'retryLimit', 'a number');\n    }\n    if (typeof options.failIfNotExists !== 'boolean') {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'failIfNotExists', 'a boolean');\n    }\n    if (!Array.isArray(options.userAgentSuffix)) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'userAgentSuffix', 'an array of strings');\n    }\n    if (\n      typeof options.rejectOnRateLimit !== 'undefined' &&\n      !(typeof options.rejectOnRateLimit === 'function' || Array.isArray(options.rejectOnRateLimit))\n    ) {\n      throw new TypeError('CLIENT_INVALID_OPTION', 'rejectOnRateLimit', 'an array or a function');\n    }\n  }\n}\n\nmodule.exports = Client;\n\n/**\n * Emitted for general warnings.\n * @event Client#warn\n * @param {string} info The warning\n */\n\n/**\n * Emitted for general debugging information.\n * @event Client#debug\n * @param {string} info The debug information\n */\n\n/**\n * @external Collection\n * @see {@link https://discord.js.org/#/docs/collection/main/class/Collection}\n */\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAiBC,OAAO,CAAC,uBAAD,CAA9B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAME,cAAc,GAAGF,OAAO,CAAC,0BAAD,CAA9B;;AACA,MAAMG,kBAAkB,GAAGH,OAAO,CAAC,4BAAD,CAAlC;;AACA,MAAMI,gBAAgB,GAAGJ,OAAO,CAAC,8BAAD,CAAhC;;AACA,MAAM;EAAEK,KAAF;EAASC,SAAT;EAAoBC;AAApB,IAAmCP,OAAO,CAAC,WAAD,CAAhD;;AACA,MAAMQ,qBAAqB,GAAGR,OAAO,CAAC,mCAAD,CAArC;;AACA,MAAMS,cAAc,GAAGT,OAAO,CAAC,4BAAD,CAA9B;;AACA,MAAMU,YAAY,GAAGV,OAAO,CAAC,0BAAD,CAA5B;;AACA,MAAMW,WAAW,GAAGX,OAAO,CAAC,yBAAD,CAA3B;;AACA,MAAMY,eAAe,GAAGZ,OAAO,CAAC,6BAAD,CAA/B;;AACA,MAAMa,cAAc,GAAGb,OAAO,CAAC,8BAAD,CAA9B;;AACA,MAAMc,YAAY,GAAGd,OAAO,CAAC,4BAAD,CAA5B;;AACA,MAAMe,aAAa,GAAGf,OAAO,CAAC,6BAAD,CAA7B;;AACA,MAAMgB,MAAM,GAAGhB,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAMiB,OAAO,GAAGjB,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAMkB,WAAW,GAAGlB,OAAO,CAAC,2BAAD,CAA3B;;AACA,MAAMmB,WAAW,GAAGnB,OAAO,CAAC,2BAAD,CAA3B;;AACA,MAAMoB,OAAO,GAAGpB,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAMqB,MAAM,GAAGrB,OAAO,CAAC,sBAAD,CAAtB;;AACA,MAAM;EAAEsB,MAAF;EAAUC,YAAV;EAAwBC;AAAxB,IAAmCxB,OAAO,CAAC,mBAAD,CAAhD;;AACA,MAAMyB,YAAY,GAAGzB,OAAO,CAAC,sBAAD,CAA5B;;AACA,MAAM0B,OAAO,GAAG1B,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAM2B,OAAO,GAAG3B,OAAO,CAAC,iBAAD,CAAvB;;AACA,MAAM4B,WAAW,GAAG5B,OAAO,CAAC,qBAAD,CAA3B;AAEA;AACA;AACA;AACA;;;AACA,MAAM6B,MAAN,SAAqB5B,UAArB,CAAgC;EAC9B;AACF;AACA;EACE6B,WAAW,CAACC,OAAD,EAAU;IACnB,MAAMC,MAAM,CAACC,MAAP,CAAc;MAAEC,UAAU,EAAE;IAAd,CAAd,EAAqCH,OAArC,CAAN;IAEA,MAAMI,IAAI,GAAGnC,OAAO,CAAC,gBAAD,CAAP,CAA0BoC,UAA1B,IAAwCC,OAAO,CAACC,GAA7D;IACA,MAAMC,QAAQ,GAAGZ,OAAO,CAACa,aAAR,EAAjB;;IAEA,IAAI,KAAKT,OAAL,CAAaU,MAAb,KAAwBF,QAAQ,CAACE,MAArC,EAA6C;MAC3C,IAAI,YAAYN,IAAhB,EAAsB;QACpB,KAAKJ,OAAL,CAAaU,MAAb,GAAsBC,IAAI,CAACC,KAAL,CAAWR,IAAI,CAACS,MAAhB,CAAtB;MACD;IACF;;IAED,IAAI,KAAKb,OAAL,CAAac,UAAb,KAA4BN,QAAQ,CAACM,UAAzC,EAAqD;MACnD,IAAI,iBAAiBV,IAArB,EAA2B;QACzB,KAAKJ,OAAL,CAAac,UAAb,GAA0BC,MAAM,CAACX,IAAI,CAACY,WAAN,CAAhC;MACD,CAFD,MAEO,IAAIC,KAAK,CAACC,OAAN,CAAc,KAAKlB,OAAL,CAAaU,MAA3B,CAAJ,EAAwC;QAC7C,KAAKV,OAAL,CAAac,UAAb,GAA0B,KAAKd,OAAL,CAAaU,MAAb,CAAoBS,MAA9C;MACD;IACF;;IAED,MAAMC,YAAY,GAAG,OAAO,KAAKpB,OAAL,CAAaU,MAAzC;;IAEA,IAAIU,YAAY,KAAK,WAAjB,IAAgC,OAAO,KAAKpB,OAAL,CAAac,UAApB,KAAmC,QAAvE,EAAiF;MAC/E,KAAKd,OAAL,CAAaU,MAAb,GAAsBO,KAAK,CAACI,IAAN,CAAW;QAAEF,MAAM,EAAE,KAAKnB,OAAL,CAAac;MAAvB,CAAX,EAAgD,CAACQ,CAAD,EAAIC,CAAJ,KAAUA,CAA1D,CAAtB;IACD;;IAED,IAAIH,YAAY,KAAK,QAArB,EAA+B,KAAKpB,OAAL,CAAaU,MAAb,GAAsB,CAAC,KAAKV,OAAL,CAAaU,MAAd,CAAtB;;IAE/B,IAAIO,KAAK,CAACC,OAAN,CAAc,KAAKlB,OAAL,CAAaU,MAA3B,CAAJ,EAAwC;MACtC,KAAKV,OAAL,CAAaU,MAAb,GAAsB,CACpB,GAAG,IAAIc,GAAJ,CACD,KAAKxB,OAAL,CAAaU,MAAb,CAAoBe,MAApB,CAA2BC,IAAI,IAAI,CAACC,KAAK,CAACD,IAAD,CAAN,IAAgBA,IAAI,IAAI,CAAxB,IAA6BA,IAAI,GAAGE,QAApC,IAAgDF,IAAI,MAAMA,IAAI,GAAG,CAAb,CAAvF,CADC,CADiB,CAAtB;IAKD;;IAED,KAAKG,gBAAL;IAEA;AACJ;AACA;AACA;AACA;;;IACI,KAAKC,SAAL,GAAiB,IAAIN,GAAJ,EAAjB;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKO,WAAL,GAAmB,IAAIC,oBAAJ,CAAyB,KAAKC,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAzB,CAAnB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,EAAL,GAAU,IAAI9D,gBAAJ,CAAqB,IAArB,CAAV;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAK+D,OAAL,GAAe,IAAIjE,cAAJ,CAAmB,IAAnB,CAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKkE,KAAL,GAAa,IAAIjE,kBAAJ,CAAuB,IAAvB,CAAb;IAEA;AACJ;AACA;AACA;;IACI,KAAKkE,KAAL,GAAahC,OAAO,CAACC,GAAR,CAAYgC,gBAAZ,GACT1D,eAAe,CAAC2D,SAAhB,CAA0B,IAA1B,EAAgClC,OAAO,CAACC,GAAR,CAAYkC,qBAA5C,CADS,GAET,IAFJ;IAIA;AACJ;AACA;AACA;;IACI,KAAKC,KAAL,GAAa,IAAI9D,WAAJ,CAAgB,IAAhB,CAAb;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAK+D,MAAL,GAAc,IAAIhE,YAAJ,CAAiB,IAAjB,CAAd;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACI,KAAKiE,QAAL,GAAgB,IAAIlE,cAAJ,CAAmB,IAAnB,CAAhB;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKmE,QAAL,GAAgB,IAAI/D,cAAJ,CAAmB,IAAnB,EAAyB,KAAKkB,OAAL,CAAa6C,QAAtC,CAAhB;IAEA5C,MAAM,CAAC6C,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;MAAEC,QAAQ,EAAE;IAAZ,CAArC;;IACA,IAAI,CAAC,KAAKC,KAAN,IAAe,mBAAmB1C,OAAO,CAACC,GAA9C,EAAmD;MACjD;AACN;AACA;AACA;AACA;AACA;MACM,KAAKyC,KAAL,GAAa1C,OAAO,CAACC,GAAR,CAAY0C,aAAzB;IACD,CARD,MAQO;MACL,KAAKD,KAAL,GAAa,IAAb;IACD;IAED;AACJ;AACA;AACA;;;IACI,KAAKE,IAAL,GAAY,IAAZ;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,WAAL,GAAmB,IAAnB;IAEA;AACJ;AACA;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,IAAf;;IAEA,IAAI,KAAKpD,OAAL,CAAaqD,oBAAb,GAAoC,CAAxC,EAA2C;MACzC/C,OAAO,CAACgD,WAAR,CACE,8GADF,EAEE,oBAFF;MAIA,KAAKC,oBAAL,GAA4BC,WAAW,CACrC,KAAKC,aAAL,CAAmBvB,IAAnB,CAAwB,IAAxB,CADqC,EAErC,KAAKlC,OAAL,CAAaqD,oBAAb,GAAoC,IAFC,CAAX,CAG1BK,KAH0B,EAA5B;IAID;EACF;EAED;AACF;AACA;AACA;AACA;;;EACY,IAANC,MAAM,GAAG;IACX,MAAMA,MAAM,GAAG,IAAIlF,qBAAJ,CAA0B,IAA1B,CAAf;;IACA,KAAK,MAAMmF,KAAX,IAAoB,KAAKjB,MAAL,CAAYkB,KAAZ,CAAkBC,MAAlB,EAApB,EAAgD;MAC9C,IAAIF,KAAK,CAACG,SAAV,EAAqB,KAAK,MAAMC,KAAX,IAAoBJ,KAAK,CAACD,MAAN,CAAaE,KAAb,CAAmBC,MAAnB,EAApB,EAAiDH,MAAM,CAACE,KAAP,CAAaI,GAAb,CAAiBD,KAAK,CAACE,EAAvB,EAA2BF,KAA3B;IACvE;;IACD,OAAOL,MAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACoB,IAAdQ,cAAc,GAAG;IACnB,OAAO,KAAKf,OAAL,EAAcgB,OAAd,MAA2B,IAAlC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACY,IAANC,MAAM,GAAG;IACX,OAAO,KAAKjB,OAAL,GAAekB,IAAI,CAACC,GAAL,KAAa,KAAKnB,OAAjC,GAA2C,IAAlD;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACa,MAALoB,KAAK,GAAqB;IAAA,IAApBxB,KAAoB,uEAAZ,KAAKA,KAAO;IAC9B,IAAI,CAACA,KAAD,IAAU,OAAOA,KAAP,KAAiB,QAA/B,EAAyC,MAAM,IAAI1E,KAAJ,CAAU,eAAV,CAAN;IACzC,KAAK0E,KAAL,GAAaA,KAAK,GAAGA,KAAK,CAACyB,OAAN,CAAc,mBAAd,EAAmC,EAAnC,CAArB;IACA,KAAKC,IAAL,CACEnF,MAAM,CAACoF,KADT,EAEG,mBAAkB3B,KAAK,CACrB4B,KADgB,CACV,GADU,EAEhBC,GAFgB,CAEZ,CAACC,GAAD,EAAMvD,CAAN,KAAaA,CAAC,GAAG,CAAJ,GAAQuD,GAAG,CAACL,OAAJ,CAAY,IAAZ,EAAkB,GAAlB,CAAR,GAAiCK,GAFlC,EAGhBC,IAHgB,CAGX,GAHW,CAGN,EALf;;IAQA,IAAI,KAAK/E,OAAL,CAAa6C,QAAjB,EAA2B;MACzB,KAAK7C,OAAL,CAAamC,EAAb,CAAgBU,QAAhB,GAA2B,KAAKA,QAAL,CAAcmC,MAAd,CAAqB,KAAKhF,OAAL,CAAa6C,QAAlC,CAA3B;IACD;;IAED,KAAK6B,IAAL,CAAUnF,MAAM,CAACoF,KAAjB,EAAwB,wCAAxB;;IAEA,IAAI;MACF,MAAM,KAAKxC,EAAL,CAAQ8C,OAAR,EAAN;MACA,OAAO,KAAKjC,KAAZ;IACD,CAHD,CAGE,OAAOkC,KAAP,EAAc;MACd,KAAKC,OAAL;MACA,MAAMD,KAAN;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACEE,OAAO,GAAG;IACR,OAAO,KAAKjD,EAAL,CAAQkD,MAAR,KAAmB5F,MAAM,CAAC6F,KAAjC;EACD;EAED;AACF;AACA;AACA;;;EACEH,OAAO,GAAG;IACR,MAAMA,OAAN;;IAEA,KAAK,MAAMI,EAAX,IAAiB,KAAKzD,SAAtB,EAAiCyD,EAAE;;IACnC,KAAKzD,SAAL,CAAe0D,KAAf;;IAEA,IAAI,KAAKjC,oBAAT,EAA+BkC,aAAa,CAAC,KAAKlC,oBAAN,CAAb;IAE/B,KAAKpB,EAAL,CAAQgD,OAAR;IACA,KAAKnC,KAAL,GAAa,IAAb;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACmB,MAAX0C,WAAW,CAACC,MAAD,EAAS;IACxB,MAAMC,IAAI,GAAGlG,YAAY,CAACmG,iBAAb,CAA+BF,MAA/B,CAAb;IACA,MAAMvF,IAAI,GAAG,MAAM,KAAK0F,GAAL,CAASC,OAAT,CAAiBH,IAAjB,EAAuBI,GAAvB,CAA2B;MAAEC,KAAK,EAAE;QAAEC,WAAW,EAAE,IAAf;QAAqBC,eAAe,EAAE;MAAtC;IAAT,CAA3B,CAAnB;IACA,OAAO,IAAIlH,MAAJ,CAAW,IAAX,EAAiBmB,IAAjB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC0B,MAAlBgG,kBAAkB,CAACC,QAAD,EAAW;IACjC,MAAMT,IAAI,GAAGlG,YAAY,CAAC4G,wBAAb,CAAsCD,QAAtC,CAAb;IACA,MAAMjG,IAAI,GAAG,MAAM,KAAK0F,GAAL,CAASnD,MAAT,CAAgB4D,SAAhB,CAA0BX,IAA1B,EAAgCI,GAAhC,EAAnB;IACA,OAAO,IAAIhH,aAAJ,CAAkB,IAAlB,EAAwBoB,IAAxB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACoB,MAAZoG,YAAY,CAACtC,EAAD,EAAKlB,KAAL,EAAY;IAC5B,MAAM5C,IAAI,GAAG,MAAM,KAAK0F,GAAL,CAASW,QAAT,CAAkBvC,EAAlB,EAAsBlB,KAAtB,EAA6BgD,GAA7B,EAAnB;IACA,OAAO,IAAI3G,OAAJ,CAAY,IAAZ,EAAkB;MAAE2D,KAAF;MAAS,GAAG5C;IAAZ,CAAlB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACyB,MAAjBsG,iBAAiB,GAAG;IACxB,MAAMC,UAAU,GAAG,MAAM,KAAKb,GAAL,CAASzD,KAAT,CAAeuE,OAAf,CAAuBZ,GAAvB,EAAzB;IACA,MAAMY,OAAO,GAAG,IAAI5I,UAAJ,EAAhB;;IACA,KAAK,MAAM6I,MAAX,IAAqBF,UAArB,EAAiCC,OAAO,CAAC3C,GAAR,CAAY4C,MAAM,CAAC3C,EAAnB,EAAuB,IAAI9E,WAAJ,CAAgByH,MAAhB,CAAvB;;IACjC,OAAOD,OAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACoB,MAAZE,YAAY,CAAC5C,EAAD,EAAK;IACrB,MAAM9D,IAAI,GAAG,MAAM,KAAK0F,GAAL,CAASiB,QAAT,CAAkB7C,EAAlB,EAAsB8B,GAAtB,EAAnB;IACA,OAAO,IAAI9G,OAAJ,CAAY,IAAZ,EAAkBkB,IAAlB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;EACgC,MAAxB4G,wBAAwB,GAAG;IAC/B,MAAM5G,IAAI,GAAG,MAAM,KAAK0F,GAAL,CAAS,eAAT,EAA0BE,GAA1B,EAAnB;IACA,OAAO,IAAIhI,UAAJ,CAAeoC,IAAI,CAAC6G,aAAL,CAAmBpC,GAAnB,CAAuBqC,CAAC,IAAI,CAACA,CAAC,CAAChD,EAAH,EAAO,IAAI/E,WAAJ,CAAgB,IAAhB,EAAsB+H,CAAtB,CAAP,CAA5B,CAAf,CAAP;EACD;EACD;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEjF,SAAS,OAA6B;IAAA,IAA5B;MAAEkF,OAAF;MAAWC,OAAX;MAAoBC;IAApB,CAA4B;;IACpC,IAAI;MACFF,OAAO;;MACP,KAAKrF,SAAL,CAAewF,MAAf,CAAsBH,OAAtB;;MACA,IAAIC,OAAJ,EAAa;QACX,KAAK1C,IAAL,CAAUnF,MAAM,CAACoF,KAAjB,EAAwByC,OAAxB;MACD;IACF,CAND,CAME,MAAM;MACN,KAAK1C,IAAL,CAAUnF,MAAM,CAACoF,KAAjB,EAAyB,gCAA+B0C,IAAI,IAAI,iBAAkB,GAAlF;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE5D,aAAa,GAA+C;IAAA,IAA9C8D,QAA8C,uEAAnC,KAAKvH,OAAL,CAAawH,oBAAsB;;IAC1D,IAAI,OAAOD,QAAP,KAAoB,QAApB,IAAgC5F,KAAK,CAAC4F,QAAD,CAAzC,EAAqD;MACnD,MAAM,IAAIhJ,SAAJ,CAAc,cAAd,EAA8B,UAA9B,EAA0C,QAA1C,CAAN;IACD;;IACD,IAAIgJ,QAAQ,IAAI,CAAhB,EAAmB;MACjB,KAAK7C,IAAL,CAAUnF,MAAM,CAACoF,KAAjB,EAAwB,+CAAxB;MACA,OAAO,CAAC,CAAR;IACD;;IAED,MAAM8C,UAAU,GAAGF,QAAQ,GAAG,IAA9B;IACA,MAAMhD,GAAG,GAAGD,IAAI,CAACC,GAAL,EAAZ;IACA,IAAI3B,QAAQ,GAAG,CAAf;IACA,IAAI8E,QAAQ,GAAG,CAAf;;IAEA,KAAK,MAAMC,OAAX,IAAsB,KAAK/E,QAAL,CAAciB,KAAd,CAAoBC,MAApB,EAAtB,EAAoD;MAClD,IAAI,CAAC6D,OAAO,CAACD,QAAb,EAAuB;MACvB9E,QAAQ;MAER8E,QAAQ,IAAIC,OAAO,CAACD,QAAR,CAAiB7D,KAAjB,CAAuB+D,KAAvB,CACVR,OAAO,IAAI7C,GAAG,IAAI6C,OAAO,CAACS,eAAR,IAA2BT,OAAO,CAACU,gBAAvC,CAAH,GAA8DL,UAD/D,CAAZ;IAGD;;IAED,KAAK/C,IAAL,CACEnF,MAAM,CAACoF,KADT,EAEG,SAAQ+C,QAAS,wBAAuBH,QAAS,eAAc3E,QAAS,sBAF3E;IAIA,OAAO8E,QAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACyB,MAAjBK,iBAAiB,CAACnE,KAAD,EAAQ;IAC7B,MAAMM,EAAE,GAAG,KAAKvB,MAAL,CAAYqF,SAAZ,CAAsBpE,KAAtB,CAAX;IACA,IAAI,CAACM,EAAL,EAAS,MAAM,IAAI3F,SAAJ,CAAc,cAAd,EAA8B,OAA9B,EAAuC,iBAAvC,CAAN;IACT,MAAM6B,IAAI,GAAG,MAAM,KAAK0F,GAAL,CAASnD,MAAT,CAAgBuB,EAAhB,EAAoB+D,OAApB,CAA4BjC,GAA5B,EAAnB;IACA,OAAO,IAAIjH,YAAJ,CAAiB,IAAjB,EAAuBqB,IAAvB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACwB,MAAhB8H,gBAAgB,CAACtE,KAAD,EAAQ;IAC5B,MAAMM,EAAE,GAAG,KAAKvB,MAAL,CAAYqF,SAAZ,CAAsBpE,KAAtB,CAAX;IACA,IAAI,CAACM,EAAL,EAAS,MAAM,IAAI3F,SAAJ,CAAc,cAAd,EAA8B,OAA9B,EAAuC,iBAAvC,CAAN;IACT,MAAM6B,IAAI,GAAG,MAAM,KAAK0F,GAAL,CAASnD,MAAT,CAAgBuB,EAAhB,EAAoB,aAApB,EAAmC8B,GAAnC,EAAnB;IACA,OAAO,IAAI1G,MAAJ,CAAW,IAAX,EAAiBc,IAAjB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE+H,cAAc,GAAe;IAAA,IAAdnI,OAAc,uEAAJ,EAAI;IAC3B,IAAI,OAAOA,OAAP,KAAmB,QAAvB,EAAiC,MAAM,IAAIzB,SAAJ,CAAc,cAAd,EAA8B,SAA9B,EAAyC,QAAzC,EAAmD,IAAnD,CAAN;IACjC,IAAI,CAAC,KAAK4E,WAAV,EAAuB,MAAM,IAAI7E,KAAJ,CAAU,kBAAV,EAA8B,yBAA9B,CAAN;IAEvB,MAAM2H,KAAK,GAAG,IAAImC,eAAJ,CAAoB;MAChCC,SAAS,EAAE,KAAKlF,WAAL,CAAiBe;IADI,CAApB,CAAd;IAIA,MAAM;MAAEoE;IAAF,IAAatI,OAAnB;;IACA,IAAI,OAAOsI,MAAP,KAAkB,WAAtB,EAAmC;MACjC,MAAM,IAAI/J,SAAJ,CAAc,uBAAd,CAAN;IACD;;IACD,IAAI,CAAC0C,KAAK,CAACC,OAAN,CAAcoH,MAAd,CAAL,EAA4B;MAC1B,MAAM,IAAI/J,SAAJ,CAAc,cAAd,EAA8B,QAA9B,EAAwC,wBAAxC,EAAkE,IAAlE,CAAN;IACD;;IACD,IAAI,CAAC+J,MAAM,CAACC,IAAP,CAAYC,KAAK,IAAI,CAAC,KAAD,EAAQ,uBAAR,EAAiCC,QAAjC,CAA0CD,KAA1C,CAArB,CAAL,EAA6E;MAC3E,MAAM,IAAIjK,SAAJ,CAAc,uBAAd,CAAN;IACD;;IACD,MAAMmK,YAAY,GAAGJ,MAAM,CAACK,IAAP,CAAYH,KAAK,IAAI,CAAChJ,YAAY,CAACiJ,QAAb,CAAsBD,KAAtB,CAAtB,CAArB;;IACA,IAAIE,YAAJ,EAAkB;MAChB,MAAM,IAAInK,SAAJ,CAAc,iBAAd,EAAiC,OAAjC,EAA0C,QAA1C,EAAoDmK,YAApD,CAAN;IACD;;IACDzC,KAAK,CAAChC,GAAN,CAAU,OAAV,EAAmBqE,MAAM,CAACvD,IAAP,CAAY,GAAZ,CAAnB;;IAEA,IAAI/E,OAAO,CAAC4I,WAAZ,EAAyB;MACvB,MAAMA,WAAW,GAAG/I,WAAW,CAACgJ,OAAZ,CAAoB7I,OAAO,CAAC4I,WAA5B,CAApB;MACA,IAAIA,WAAJ,EAAiB3C,KAAK,CAAChC,GAAN,CAAU,aAAV,EAAyB2E,WAAzB;IAClB;;IAED,IAAI5I,OAAO,CAAC8I,kBAAZ,EAAgC;MAC9B7C,KAAK,CAAChC,GAAN,CAAU,sBAAV,EAAkC,IAAlC;IACD;;IAED,IAAIjE,OAAO,CAAC4D,KAAZ,EAAmB;MACjB,MAAMmF,OAAO,GAAG,KAAKpG,MAAL,CAAYqF,SAAZ,CAAsBhI,OAAO,CAAC4D,KAA9B,CAAhB;MACA,IAAI,CAACmF,OAAL,EAAc,MAAM,IAAIxK,SAAJ,CAAc,cAAd,EAA8B,eAA9B,EAA+C,iBAA/C,CAAN;MACd0H,KAAK,CAAChC,GAAN,CAAU,UAAV,EAAsB8E,OAAtB;IACD;;IAED,OAAQ,GAAE,KAAK/I,OAAL,CAAagJ,IAAb,CAAkBlD,GAAI,GAAE,KAAKA,GAAL,CAASmD,MAAT,CAAgBC,SAAU,IAAGjD,KAAM,EAArE;EACD;;EAEDkD,MAAM,GAAG;IACP,OAAO,MAAMA,MAAN,CAAa;MAClB/F,OAAO,EAAE;IADS,CAAb,CAAP;EAGD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEgG,KAAK,CAACC,MAAD,EAAS;IACZ,OAAOC,IAAI,CAACD,MAAD,CAAX;EACD;EAED;AACF;AACA;AACA;AACA;;;EACExH,gBAAgB,GAAyB;IAAA,IAAxB7B,OAAwB,uEAAd,KAAKA,OAAS;;IACvC,IAAI,OAAOA,OAAO,CAACuJ,OAAf,KAA2B,WAA/B,EAA4C;MAC1C,MAAM,IAAIhL,SAAJ,CAAc,wBAAd,CAAN;IACD,CAFD,MAEO;MACLyB,OAAO,CAACuJ,OAAR,GAAkB5J,OAAO,CAACkJ,OAAR,CAAgB7I,OAAO,CAACuJ,OAAxB,CAAlB;IACD;;IACD,IAAI,OAAOvJ,OAAO,CAACc,UAAf,KAA8B,QAA9B,IAA0Ca,KAAK,CAAC3B,OAAO,CAACc,UAAT,CAA/C,IAAuEd,OAAO,CAACc,UAAR,GAAqB,CAAhG,EAAmG;MACjG,MAAM,IAAIvC,SAAJ,CAAc,uBAAd,EAAuC,YAAvC,EAAqD,qCAArD,CAAN;IACD;;IACD,IAAIyB,OAAO,CAACU,MAAR,IAAkB,EAAEV,OAAO,CAACU,MAAR,KAAmB,MAAnB,IAA6BO,KAAK,CAACC,OAAN,CAAclB,OAAO,CAACU,MAAtB,CAA/B,CAAtB,EAAqF;MACnF,MAAM,IAAInC,SAAJ,CAAc,uBAAd,EAAuC,QAAvC,EAAiD,sCAAjD,CAAN;IACD;;IACD,IAAIyB,OAAO,CAACU,MAAR,IAAkB,CAACV,OAAO,CAACU,MAAR,CAAeS,MAAtC,EAA8C,MAAM,IAAI3C,UAAJ,CAAe,gCAAf,CAAN;;IAC9C,IAAI,OAAOwB,OAAO,CAACwJ,SAAf,KAA6B,UAAjC,EAA6C;MAC3C,MAAM,IAAIjL,SAAJ,CAAc,uBAAd,EAAuC,WAAvC,EAAoD,YAApD,CAAN;IACD;;IACD,IAAI,OAAOyB,OAAO,CAACwH,oBAAf,KAAwC,QAAxC,IAAoD7F,KAAK,CAAC3B,OAAO,CAACwH,oBAAT,CAA7D,EAA6F;MAC3F,MAAM,IAAIjJ,SAAJ,CAAc,uBAAd,EAAuC,0BAAvC,EAAmE,UAAnE,CAAN;IACD;;IACD,IAAI,OAAOyB,OAAO,CAACqD,oBAAf,KAAwC,QAAxC,IAAoD1B,KAAK,CAAC3B,OAAO,CAACqD,oBAAT,CAA7D,EAA6F;MAC3F,MAAM,IAAI9E,SAAJ,CAAc,uBAAd,EAAuC,sBAAvC,EAA+D,UAA/D,CAAN;IACD;;IACD,IAAI,OAAOyB,OAAO,CAACyJ,6BAAf,KAAiD,QAAjD,IAA6D9H,KAAK,CAAC3B,OAAO,CAACyJ,6BAAT,CAAtE,EAA+G;MAC7G,MAAM,IAAIlL,SAAJ,CAAc,uBAAd,EAAuC,+BAAvC,EAAwE,UAAxE,CAAN;IACD;;IACD,IAAI,CAAC0C,KAAK,CAACC,OAAN,CAAclB,OAAO,CAAC0J,QAAtB,CAAL,EAAsC;MACpC,MAAM,IAAInL,SAAJ,CAAc,uBAAd,EAAuC,UAAvC,EAAmD,UAAnD,CAAN;IACD;;IACD,IAAI,OAAOyB,OAAO,CAAC2J,mBAAf,KAAuC,QAAvC,IAAmDhI,KAAK,CAAC3B,OAAO,CAAC2J,mBAAT,CAA5D,EAA2F;MACzF,MAAM,IAAIpL,SAAJ,CAAc,uBAAd,EAAuC,qBAAvC,EAA8D,UAA9D,CAAN;IACD;;IACD,IAAI,OAAOyB,OAAO,CAAC4J,kBAAf,KAAsC,QAAtC,IAAkDjI,KAAK,CAAC3B,OAAO,CAAC4J,kBAAT,CAA3D,EAAyF;MACvF,MAAM,IAAIrL,SAAJ,CAAc,uBAAd,EAAuC,oBAAvC,EAA6D,UAA7D,CAAN;IACD;;IACD,IAAI,OAAOyB,OAAO,CAAC6J,mBAAf,KAAuC,QAAvC,IAAmDlI,KAAK,CAAC3B,OAAO,CAAC6J,mBAAT,CAA5D,EAA2F;MACzF,MAAM,IAAItL,SAAJ,CAAc,uBAAd,EAAuC,qBAAvC,EAA8D,UAA9D,CAAN;IACD;;IACD,IAAI,OAAOyB,OAAO,CAAC8J,iBAAf,KAAqC,QAArC,IAAiDnI,KAAK,CAAC3B,OAAO,CAAC8J,iBAAT,CAA1D,EAAuF;MACrF,MAAM,IAAIvL,SAAJ,CAAc,uBAAd,EAAuC,mBAAvC,EAA4D,UAA5D,CAAN;IACD;;IACD,IAAI,OAAOyB,OAAO,CAAC+J,UAAf,KAA8B,QAA9B,IAA0CpI,KAAK,CAAC3B,OAAO,CAAC+J,UAAT,CAAnD,EAAyE;MACvE,MAAM,IAAIxL,SAAJ,CAAc,uBAAd,EAAuC,YAAvC,EAAqD,UAArD,CAAN;IACD;;IACD,IAAI,OAAOyB,OAAO,CAACgK,eAAf,KAAmC,SAAvC,EAAkD;MAChD,MAAM,IAAIzL,SAAJ,CAAc,uBAAd,EAAuC,iBAAvC,EAA0D,WAA1D,CAAN;IACD;;IACD,IAAI,CAAC0C,KAAK,CAACC,OAAN,CAAclB,OAAO,CAACiK,eAAtB,CAAL,EAA6C;MAC3C,MAAM,IAAI1L,SAAJ,CAAc,uBAAd,EAAuC,iBAAvC,EAA0D,qBAA1D,CAAN;IACD;;IACD,IACE,OAAOyB,OAAO,CAACkK,iBAAf,KAAqC,WAArC,IACA,EAAE,OAAOlK,OAAO,CAACkK,iBAAf,KAAqC,UAArC,IAAmDjJ,KAAK,CAACC,OAAN,CAAclB,OAAO,CAACkK,iBAAtB,CAArD,CAFF,EAGE;MACA,MAAM,IAAI3L,SAAJ,CAAc,uBAAd,EAAuC,mBAAvC,EAA4D,wBAA5D,CAAN;IACD;EACF;;AApjB6B;;AAujBhC4L,MAAM,CAACC,OAAP,GAAiBtK,MAAjB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}