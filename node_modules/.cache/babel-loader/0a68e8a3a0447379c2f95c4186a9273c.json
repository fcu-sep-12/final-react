{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  StickerFormatTypes,\n  StickerTypes\n} = require('../util/Constants');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * Represents a Sticker.\n * @extends {Base}\n */\n\n\nclass Sticker extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APISticker | APIStickerItem} sticker The data for the sticker\n   */\n  constructor(client, sticker) {\n    super(client);\n\n    this._patch(sticker);\n  }\n\n  _patch(sticker) {\n    /**\n     * The sticker's id\n     * @type {Snowflake}\n     */\n    this.id = sticker.id;\n    /**\n     * The description of the sticker\n     * @type {?string}\n     */\n\n    this.description = sticker.description ?? null;\n    /**\n     * The type of the sticker\n     * @type {?StickerType}\n     */\n\n    this.type = StickerTypes[sticker.type] ?? null;\n    /**\n     * The format of the sticker\n     * @type {StickerFormatType}\n     */\n\n    this.format = StickerFormatTypes[sticker.format_type];\n    /**\n     * The name of the sticker\n     * @type {string}\n     */\n\n    this.name = sticker.name;\n    /**\n     * The id of the pack the sticker is from, for standard stickers\n     * @type {?Snowflake}\n     */\n\n    this.packId = sticker.pack_id ?? null;\n    /**\n     * An array of tags for the sticker\n     * @type {?string[]}\n     */\n\n    this.tags = sticker.tags?.split(', ') ?? null;\n    /**\n     * Whether or not the guild sticker is available\n     * @type {?boolean}\n     */\n\n    this.available = sticker.available ?? null;\n    /**\n     * The id of the guild that owns this sticker\n     * @type {?Snowflake}\n     */\n\n    this.guildId = sticker.guild_id ?? null;\n    /**\n     * The user that uploaded the guild sticker\n     * @type {?User}\n     */\n\n    this.user = sticker.user ? this.client.users.add(sticker.user) : null;\n    /**\n     * The standard sticker's sort order within its pack\n     * @type {?number}\n     */\n\n    this.sortValue = sticker.sort_value ?? null;\n  }\n  /**\n   * The timestamp the sticker was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the sticker was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * Whether this sticker is partial\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partial() {\n    return !this.type;\n  }\n  /**\n   * The guild that owns this sticker\n   * @type {?Guild}\n   * @readonly\n   */\n\n\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n  /**\n   * A link to the sticker\n   * <info>If the sticker's format is LOTTIE, it returns the URL of the Lottie json file.</info>\n   * @type {string}\n   */\n\n\n  get url() {\n    return this.client.rest.cdn.Sticker(this.id, this.format);\n  }\n  /**\n   * Fetches this sticker.\n   * @returns {Promise<Sticker>}\n   */\n\n\n  async fetch() {\n    const data = await this.client.api.stickers(this.id).get();\n\n    this._patch(data);\n\n    return this;\n  }\n  /**\n   * Fetches the pack this sticker is part of from Discord, if this is a Nitro sticker.\n   * @returns {Promise<?StickerPack>}\n   */\n\n\n  async fetchPack() {\n    return (this.packId && (await this.client.fetchPremiumStickerPacks()).get(this.packId)) ?? null;\n  }\n  /**\n   * Fetches the user who uploaded this sticker, if this is a guild sticker.\n   * @returns {Promise<?User>}\n   */\n\n\n  async fetchUser() {\n    if (this.partial) await this.fetch();\n    if (!this.guildId) throw new Error('NOT_GUILD_STICKER');\n    const data = await this.client.api.guilds(this.guildId).stickers(this.id).get();\n\n    this._patch(data);\n\n    return this.user;\n  }\n  /**\n   * Data for editing a sticker.\n   * @typedef {Object} GuildStickerEditData\n   * @property {string} [name] The name of the sticker\n   * @property {?string} [description] The description of the sticker\n   * @property {string} [tags] The Discord name of a unicode emoji representing the sticker's expression\n   */\n\n  /**\n   * Edits the sticker.\n   * @param {GuildStickerEditData} [data] The new data for the sticker\n   * @param {string} [reason] Reason for editing this sticker\n   * @returns {Promise<Sticker>}\n   * @example\n   * // Update the name of a sticker\n   * sticker.edit({ name: 'new name' })\n   *   .then(s => console.log(`Updated the name of the sticker to ${s.name}`))\n   *   .catch(console.error);\n   */\n\n\n  edit(data, reason) {\n    return this.guild.stickers.edit(this, data, reason);\n  }\n  /**\n   * Deletes the sticker.\n   * @returns {Promise<Sticker>}\n   * @param {string} [reason] Reason for deleting this sticker\n   * @example\n   * // Delete a message\n   * sticker.delete()\n   *   .then(s => console.log(`Deleted sticker ${s.name}`))\n   *   .catch(console.error);\n   */\n\n\n  async delete(reason) {\n    await this.guild.stickers.delete(this, reason);\n    return this;\n  }\n  /**\n   * Whether this sticker is the same as another one.\n   * @param {Sticker|APISticker} other The sticker to compare it to\n   * @returns {boolean}\n   */\n\n\n  equals(other) {\n    if (other instanceof Sticker) {\n      return other.id === this.id && other.description === this.description && other.type === this.type && other.format === this.format && other.name === this.name && other.packId === this.packId && other.tags.length === this.tags.length && other.tags.every(tag => this.tags.includes(tag)) && other.available === this.available && other.guildId === this.guildId && other.sortValue === this.sortValue;\n    } else {\n      return other.id === this.id && other.description === this.description && other.name === this.name && other.tags === this.tags.join(', ');\n    }\n  }\n\n}\n\nmodule.exports = Sticker;\n/**\n * @external APISticker\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-object}\n */\n\n/**\n * @external APIStickerItem\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-item-object}\n */","map":{"version":3,"names":["Base","require","StickerFormatTypes","StickerTypes","SnowflakeUtil","Sticker","constructor","client","sticker","_patch","id","description","type","format","format_type","name","packId","pack_id","tags","split","available","guildId","guild_id","user","users","add","sortValue","sort_value","createdTimestamp","deconstruct","timestamp","createdAt","Date","partial","guild","guilds","resolve","url","rest","cdn","fetch","data","api","stickers","get","fetchPack","fetchPremiumStickerPacks","fetchUser","Error","edit","reason","delete","equals","other","length","every","tag","includes","join","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/Sticker.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { StickerFormatTypes, StickerTypes } = require('../util/Constants');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * Represents a Sticker.\n * @extends {Base}\n */\nclass Sticker extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APISticker | APIStickerItem} sticker The data for the sticker\n   */\n  constructor(client, sticker) {\n    super(client);\n\n    this._patch(sticker);\n  }\n\n  _patch(sticker) {\n    /**\n     * The sticker's id\n     * @type {Snowflake}\n     */\n    this.id = sticker.id;\n\n    /**\n     * The description of the sticker\n     * @type {?string}\n     */\n    this.description = sticker.description ?? null;\n\n    /**\n     * The type of the sticker\n     * @type {?StickerType}\n     */\n    this.type = StickerTypes[sticker.type] ?? null;\n\n    /**\n     * The format of the sticker\n     * @type {StickerFormatType}\n     */\n    this.format = StickerFormatTypes[sticker.format_type];\n\n    /**\n     * The name of the sticker\n     * @type {string}\n     */\n    this.name = sticker.name;\n\n    /**\n     * The id of the pack the sticker is from, for standard stickers\n     * @type {?Snowflake}\n     */\n    this.packId = sticker.pack_id ?? null;\n\n    /**\n     * An array of tags for the sticker\n     * @type {?string[]}\n     */\n    this.tags = sticker.tags?.split(', ') ?? null;\n\n    /**\n     * Whether or not the guild sticker is available\n     * @type {?boolean}\n     */\n    this.available = sticker.available ?? null;\n\n    /**\n     * The id of the guild that owns this sticker\n     * @type {?Snowflake}\n     */\n    this.guildId = sticker.guild_id ?? null;\n\n    /**\n     * The user that uploaded the guild sticker\n     * @type {?User}\n     */\n    this.user = sticker.user ? this.client.users.add(sticker.user) : null;\n\n    /**\n     * The standard sticker's sort order within its pack\n     * @type {?number}\n     */\n    this.sortValue = sticker.sort_value ?? null;\n  }\n\n  /**\n   * The timestamp the sticker was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the sticker was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether this sticker is partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !this.type;\n  }\n\n  /**\n   * The guild that owns this sticker\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * A link to the sticker\n   * <info>If the sticker's format is LOTTIE, it returns the URL of the Lottie json file.</info>\n   * @type {string}\n   */\n  get url() {\n    return this.client.rest.cdn.Sticker(this.id, this.format);\n  }\n\n  /**\n   * Fetches this sticker.\n   * @returns {Promise<Sticker>}\n   */\n  async fetch() {\n    const data = await this.client.api.stickers(this.id).get();\n    this._patch(data);\n    return this;\n  }\n\n  /**\n   * Fetches the pack this sticker is part of from Discord, if this is a Nitro sticker.\n   * @returns {Promise<?StickerPack>}\n   */\n  async fetchPack() {\n    return (this.packId && (await this.client.fetchPremiumStickerPacks()).get(this.packId)) ?? null;\n  }\n\n  /**\n   * Fetches the user who uploaded this sticker, if this is a guild sticker.\n   * @returns {Promise<?User>}\n   */\n  async fetchUser() {\n    if (this.partial) await this.fetch();\n    if (!this.guildId) throw new Error('NOT_GUILD_STICKER');\n\n    const data = await this.client.api.guilds(this.guildId).stickers(this.id).get();\n    this._patch(data);\n    return this.user;\n  }\n\n  /**\n   * Data for editing a sticker.\n   * @typedef {Object} GuildStickerEditData\n   * @property {string} [name] The name of the sticker\n   * @property {?string} [description] The description of the sticker\n   * @property {string} [tags] The Discord name of a unicode emoji representing the sticker's expression\n   */\n\n  /**\n   * Edits the sticker.\n   * @param {GuildStickerEditData} [data] The new data for the sticker\n   * @param {string} [reason] Reason for editing this sticker\n   * @returns {Promise<Sticker>}\n   * @example\n   * // Update the name of a sticker\n   * sticker.edit({ name: 'new name' })\n   *   .then(s => console.log(`Updated the name of the sticker to ${s.name}`))\n   *   .catch(console.error);\n   */\n  edit(data, reason) {\n    return this.guild.stickers.edit(this, data, reason);\n  }\n\n  /**\n   * Deletes the sticker.\n   * @returns {Promise<Sticker>}\n   * @param {string} [reason] Reason for deleting this sticker\n   * @example\n   * // Delete a message\n   * sticker.delete()\n   *   .then(s => console.log(`Deleted sticker ${s.name}`))\n   *   .catch(console.error);\n   */\n  async delete(reason) {\n    await this.guild.stickers.delete(this, reason);\n    return this;\n  }\n\n  /**\n   * Whether this sticker is the same as another one.\n   * @param {Sticker|APISticker} other The sticker to compare it to\n   * @returns {boolean}\n   */\n  equals(other) {\n    if (other instanceof Sticker) {\n      return (\n        other.id === this.id &&\n        other.description === this.description &&\n        other.type === this.type &&\n        other.format === this.format &&\n        other.name === this.name &&\n        other.packId === this.packId &&\n        other.tags.length === this.tags.length &&\n        other.tags.every(tag => this.tags.includes(tag)) &&\n        other.available === this.available &&\n        other.guildId === this.guildId &&\n        other.sortValue === this.sortValue\n      );\n    } else {\n      return (\n        other.id === this.id &&\n        other.description === this.description &&\n        other.name === this.name &&\n        other.tags === this.tags.join(', ')\n      );\n    }\n  }\n}\n\nmodule.exports = Sticker;\n\n/**\n * @external APISticker\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-object}\n */\n\n/**\n * @external APIStickerItem\n * @see {@link https://discord.com/developers/docs/resources/sticker#sticker-item-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}