{"ast":null,"code":"'use strict';\n\nconst Util = require('./Util'); // Discord epoch (2015-01-01T00:00:00.000Z)\n\n\nconst EPOCH = 1420070400000;\nlet INCREMENT = 0;\n/**\n * A container for useful snowflake-related methods.\n */\n\nclass SnowflakeUtil extends null {\n  /**\n   * A {@link https://developer.twitter.com/en/docs/twitter-ids Twitter snowflake},\n   * except the epoch is 2015-01-01T00:00:00.000Z.\n   *\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   * ```\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker's id as 1 and the process's id as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n  static generate() {\n    let timestamp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Date.now();\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      throw new TypeError(`\"timestamp\" argument must be a number (received ${isNaN(timestamp) ? 'NaN' : typeof timestamp})`);\n    }\n\n    if (INCREMENT >= 4095) INCREMENT = 0;\n    const BINARY = `${(timestamp - EPOCH).toString(2).padStart(42, '0')}0000100000${(INCREMENT++).toString(2).padStart(12, '0')}`;\n    return Util.binaryToId(BINARY);\n  }\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerId The worker's id in the snowflake\n   * @property {number} processId The process's id in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake}\n   */\n\n\n  static deconstruct(snowflake) {\n    const BINARY = Util.idToBinary(snowflake).toString(2).padStart(64, '0');\n    return {\n      timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,\n\n      get date() {\n        return new Date(this.timestamp);\n      },\n\n      workerId: parseInt(BINARY.substring(42, 47), 2),\n      processId: parseInt(BINARY.substring(47, 52), 2),\n      increment: parseInt(BINARY.substring(52, 64), 2),\n      binary: BINARY\n    };\n  }\n  /**\n   * Discord's epoch value (2015-01-01T00:00:00.000Z).\n   * @type {number}\n   * @readonly\n   */\n\n\n  static get EPOCH() {\n    return EPOCH;\n  }\n\n}\n\nmodule.exports = SnowflakeUtil;","map":{"version":3,"names":["Util","require","EPOCH","INCREMENT","SnowflakeUtil","generate","timestamp","Date","now","getTime","isNaN","TypeError","BINARY","toString","padStart","binaryToId","deconstruct","snowflake","idToBinary","parseInt","substring","date","workerId","processId","increment","binary","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/util/SnowflakeUtil.js"],"sourcesContent":["'use strict';\n\nconst Util = require('./Util');\n\n// Discord epoch (2015-01-01T00:00:00.000Z)\nconst EPOCH = 1420070400000;\nlet INCREMENT = 0;\n\n/**\n * A container for useful snowflake-related methods.\n */\nclass SnowflakeUtil extends null {\n  /**\n   * A {@link https://developer.twitter.com/en/docs/twitter-ids Twitter snowflake},\n   * except the epoch is 2015-01-01T00:00:00.000Z.\n   *\n   * If we have a snowflake '266241948824764416' we can represent it as binary:\n   * ```\n   * 64                                          22     17     12          0\n   *  000000111011000111100001101001000101000000  00001  00000  000000000000\n   *       number of ms since Discord epoch       worker  pid    increment\n   * ```\n   * @typedef {string} Snowflake\n   */\n\n  /**\n   * Generates a Discord snowflake.\n   * <info>This hardcodes the worker's id as 1 and the process's id as 0.</info>\n   * @param {number|Date} [timestamp=Date.now()] Timestamp or date of the snowflake to generate\n   * @returns {Snowflake} The generated snowflake\n   */\n  static generate(timestamp = Date.now()) {\n    if (timestamp instanceof Date) timestamp = timestamp.getTime();\n    if (typeof timestamp !== 'number' || isNaN(timestamp)) {\n      throw new TypeError(\n        `\"timestamp\" argument must be a number (received ${isNaN(timestamp) ? 'NaN' : typeof timestamp})`,\n      );\n    }\n    if (INCREMENT >= 4095) INCREMENT = 0;\n    const BINARY = `${(timestamp - EPOCH).toString(2).padStart(42, '0')}0000100000${(INCREMENT++)\n      .toString(2)\n      .padStart(12, '0')}`;\n    return Util.binaryToId(BINARY);\n  }\n\n  /**\n   * A deconstructed snowflake.\n   * @typedef {Object} DeconstructedSnowflake\n   * @property {number} timestamp Timestamp the snowflake was created\n   * @property {Date} date Date the snowflake was created\n   * @property {number} workerId The worker's id in the snowflake\n   * @property {number} processId The process's id in the snowflake\n   * @property {number} increment Increment in the snowflake\n   * @property {string} binary Binary representation of the snowflake\n   */\n\n  /**\n   * Deconstructs a Discord snowflake.\n   * @param {Snowflake} snowflake Snowflake to deconstruct\n   * @returns {DeconstructedSnowflake}\n   */\n  static deconstruct(snowflake) {\n    const BINARY = Util.idToBinary(snowflake).toString(2).padStart(64, '0');\n    return {\n      timestamp: parseInt(BINARY.substring(0, 42), 2) + EPOCH,\n      get date() {\n        return new Date(this.timestamp);\n      },\n      workerId: parseInt(BINARY.substring(42, 47), 2),\n      processId: parseInt(BINARY.substring(47, 52), 2),\n      increment: parseInt(BINARY.substring(52, 64), 2),\n      binary: BINARY,\n    };\n  }\n\n  /**\n   * Discord's epoch value (2015-01-01T00:00:00.000Z).\n   * @type {number}\n   * @readonly\n   */\n  static get EPOCH() {\n    return EPOCH;\n  }\n}\n\nmodule.exports = SnowflakeUtil;\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB,C,CAEA;;;AACA,MAAMC,KAAK,GAAG,aAAd;AACA,IAAIC,SAAS,GAAG,CAAhB;AAEA;AACA;AACA;;AACA,MAAMC,aAAN,SAA4B,IAA5B,CAAiC;EAC/B;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;EACiB,OAARC,QAAQ,GAAyB;IAAA,IAAxBC,SAAwB,uEAAZC,IAAI,CAACC,GAAL,EAAY;IACtC,IAAIF,SAAS,YAAYC,IAAzB,EAA+BD,SAAS,GAAGA,SAAS,CAACG,OAAV,EAAZ;;IAC/B,IAAI,OAAOH,SAAP,KAAqB,QAArB,IAAiCI,KAAK,CAACJ,SAAD,CAA1C,EAAuD;MACrD,MAAM,IAAIK,SAAJ,CACH,mDAAkDD,KAAK,CAACJ,SAAD,CAAL,GAAmB,KAAnB,GAA2B,OAAOA,SAAU,GAD3F,CAAN;IAGD;;IACD,IAAIH,SAAS,IAAI,IAAjB,EAAuBA,SAAS,GAAG,CAAZ;IACvB,MAAMS,MAAM,GAAI,GAAE,CAACN,SAAS,GAAGJ,KAAb,EAAoBW,QAApB,CAA6B,CAA7B,EAAgCC,QAAhC,CAAyC,EAAzC,EAA6C,GAA7C,CAAkD,aAAY,CAACX,SAAS,EAAV,EAC7EU,QAD6E,CACpE,CADoE,EAE7EC,QAF6E,CAEpE,EAFoE,EAEhE,GAFgE,CAE3D,EAFrB;IAGA,OAAOd,IAAI,CAACe,UAAL,CAAgBH,MAAhB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;;EACoB,OAAXI,WAAW,CAACC,SAAD,EAAY;IAC5B,MAAML,MAAM,GAAGZ,IAAI,CAACkB,UAAL,CAAgBD,SAAhB,EAA2BJ,QAA3B,CAAoC,CAApC,EAAuCC,QAAvC,CAAgD,EAAhD,EAAoD,GAApD,CAAf;IACA,OAAO;MACLR,SAAS,EAAEa,QAAQ,CAACP,MAAM,CAACQ,SAAP,CAAiB,CAAjB,EAAoB,EAApB,CAAD,EAA0B,CAA1B,CAAR,GAAuClB,KAD7C;;MAEL,IAAImB,IAAJ,GAAW;QACT,OAAO,IAAId,IAAJ,CAAS,KAAKD,SAAd,CAAP;MACD,CAJI;;MAKLgB,QAAQ,EAAEH,QAAQ,CAACP,MAAM,CAACQ,SAAP,CAAiB,EAAjB,EAAqB,EAArB,CAAD,EAA2B,CAA3B,CALb;MAMLG,SAAS,EAAEJ,QAAQ,CAACP,MAAM,CAACQ,SAAP,CAAiB,EAAjB,EAAqB,EAArB,CAAD,EAA2B,CAA3B,CANd;MAOLI,SAAS,EAAEL,QAAQ,CAACP,MAAM,CAACQ,SAAP,CAAiB,EAAjB,EAAqB,EAArB,CAAD,EAA2B,CAA3B,CAPd;MAQLK,MAAM,EAAEb;IARH,CAAP;EAUD;EAED;AACF;AACA;AACA;AACA;;;EACkB,WAALV,KAAK,GAAG;IACjB,OAAOA,KAAP;EACD;;AAvE8B;;AA0EjCwB,MAAM,CAACC,OAAP,GAAiBvB,aAAjB"},"metadata":{},"sourceType":"script"}