{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nclass ThreadMembersUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const thread = client.channels.cache.get(data.id);\n\n    if (thread) {\n      const old = thread.members.cache.clone();\n      thread.memberCount = data.member_count;\n      data.added_members?.forEach(rawMember => {\n        thread.members._add(rawMember);\n      });\n      data.removed_member_ids?.forEach(memberId => {\n        thread.members.cache.delete(memberId);\n      });\n      /**\n       * Emitted whenever members are added or removed from a thread. Requires `GUILD_MEMBERS` privileged intent\n       * @event Client#threadMembersUpdate\n       * @param {Collection<Snowflake, ThreadMember>} oldMembers The members before the update\n       * @param {Collection<Snowflake, ThreadMember>} newMembers The members after the update\n       */\n\n      client.emit(Events.THREAD_MEMBERS_UPDATE, old, thread.members.cache);\n    }\n\n    return {};\n  }\n\n}\n\nmodule.exports = ThreadMembersUpdateAction;","map":{"version":3,"names":["Action","require","Events","ThreadMembersUpdateAction","handle","data","client","thread","channels","cache","get","id","old","members","clone","memberCount","member_count","added_members","forEach","rawMember","_add","removed_member_ids","memberId","delete","emit","THREAD_MEMBERS_UPDATE","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/actions/ThreadMembersUpdate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\n\nclass ThreadMembersUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const thread = client.channels.cache.get(data.id);\n    if (thread) {\n      const old = thread.members.cache.clone();\n      thread.memberCount = data.member_count;\n\n      data.added_members?.forEach(rawMember => {\n        thread.members._add(rawMember);\n      });\n\n      data.removed_member_ids?.forEach(memberId => {\n        thread.members.cache.delete(memberId);\n      });\n\n      /**\n       * Emitted whenever members are added or removed from a thread. Requires `GUILD_MEMBERS` privileged intent\n       * @event Client#threadMembersUpdate\n       * @param {Collection<Snowflake, ThreadMember>} oldMembers The members before the update\n       * @param {Collection<Snowflake, ThreadMember>} newMembers The members after the update\n       */\n      client.emit(Events.THREAD_MEMBERS_UPDATE, old, thread.members.cache);\n    }\n    return {};\n  }\n}\n\nmodule.exports = ThreadMembersUpdateAction;\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,sBAAD,CAA1B;;AAEA,MAAME,yBAAN,SAAwCH,MAAxC,CAA+C;EAC7CI,MAAM,CAACC,IAAD,EAAO;IACX,MAAMC,MAAM,GAAG,KAAKA,MAApB;IACA,MAAMC,MAAM,GAAGD,MAAM,CAACE,QAAP,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0BL,IAAI,CAACM,EAA/B,CAAf;;IACA,IAAIJ,MAAJ,EAAY;MACV,MAAMK,GAAG,GAAGL,MAAM,CAACM,OAAP,CAAeJ,KAAf,CAAqBK,KAArB,EAAZ;MACAP,MAAM,CAACQ,WAAP,GAAqBV,IAAI,CAACW,YAA1B;MAEAX,IAAI,CAACY,aAAL,EAAoBC,OAApB,CAA4BC,SAAS,IAAI;QACvCZ,MAAM,CAACM,OAAP,CAAeO,IAAf,CAAoBD,SAApB;MACD,CAFD;MAIAd,IAAI,CAACgB,kBAAL,EAAyBH,OAAzB,CAAiCI,QAAQ,IAAI;QAC3Cf,MAAM,CAACM,OAAP,CAAeJ,KAAf,CAAqBc,MAArB,CAA4BD,QAA5B;MACD,CAFD;MAIA;AACN;AACA;AACA;AACA;AACA;;MACMhB,MAAM,CAACkB,IAAP,CAAYtB,MAAM,CAACuB,qBAAnB,EAA0Cb,GAA1C,EAA+CL,MAAM,CAACM,OAAP,CAAeJ,KAA9D;IACD;;IACD,OAAO,EAAP;EACD;;AAzB4C;;AA4B/CiB,MAAM,CAACC,OAAP,GAAiBxB,yBAAjB"},"metadata":{},"sourceType":"script"}