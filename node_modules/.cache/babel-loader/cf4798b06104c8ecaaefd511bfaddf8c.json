{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst IntegrationApplication = require('./IntegrationApplication');\n\nconst InviteStageInstance = require('./InviteStageInstance');\n\nconst {\n  Error\n} = require('../errors');\n\nconst {\n  Endpoints\n} = require('../util/Constants');\n\nconst Permissions = require('../util/Permissions');\n/**\n * Represents an invitation to a guild channel.\n * <warn>The only guaranteed properties are `code`, `channel`, and `url`. Other properties can be missing.</warn>\n * @extends {Base}\n */\n\n\nclass Invite extends Base {\n  constructor(client, data) {\n    super(client);\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    const InviteGuild = require('./InviteGuild');\n\n    const Guild = require('./Guild');\n    /**\n     * The guild the invite is for including welcome screen data if present\n     * @type {?(Guild|InviteGuild)}\n     */\n\n\n    this.guild = null;\n\n    if (data.guild) {\n      this.guild = data.guild instanceof Guild ? data.guild : new InviteGuild(this.client, data.guild);\n    }\n    /**\n     * The code for this invite\n     * @type {string}\n     */\n\n\n    this.code = data.code;\n    /**\n     * The approximate number of online members of the guild this invite is for\n     * @type {?number}\n     */\n\n    this.presenceCount = data.approximate_presence_count ?? null;\n    /**\n     * The approximate total number of members of the guild this invite is for\n     * @type {?number}\n     */\n\n    this.memberCount = data.approximate_member_count ?? null;\n    /**\n     * Whether or not this invite is temporary\n     * @type {?boolean}\n     */\n\n    this.temporary = data.temporary ?? null;\n    /**\n     * The maximum age of the invite, in seconds, 0 if never expires\n     * @type {?number}\n     */\n\n    this.maxAge = data.max_age ?? null;\n    /**\n     * How many times this invite has been used\n     * @type {?number}\n     */\n\n    this.uses = data.uses ?? null;\n    /**\n     * The maximum uses of this invite\n     * @type {?number}\n     */\n\n    this.maxUses = data.max_uses ?? null;\n    /**\n     * The user who created this invite\n     * @type {?User}\n     */\n\n    this.inviter = data.inviter ? this.client.users._add(data.inviter) : null;\n    /**\n     * The user whose stream to display for this voice channel stream invite\n     * @type {?User}\n     */\n\n    this.targetUser = data.target_user ? this.client.users._add(data.target_user) : null;\n    /**\n     * The embedded application to open for this voice channel embedded application invite\n     * @type {?IntegrationApplication}\n     */\n\n    this.targetApplication = data.target_application ? new IntegrationApplication(this.client, data.target_application) : null;\n    /**\n     * The type of the invite target:\n     * * 1: STREAM\n     * * 2: EMBEDDED_APPLICATION\n     * @typedef {number} TargetType\n     * @see {@link https://discord.com/developers/docs/resources/invite#invite-object-invite-target-types}\n     */\n\n    /**\n     * The target type\n     * @type {?TargetType}\n     */\n\n    this.targetType = data.target_type ?? null;\n    /**\n     * The channel the invite is for\n     * @type {Channel}\n     */\n\n    this.channel = this.client.channels._add(data.channel, this.guild, {\n      cache: false\n    });\n    /**\n     * The timestamp the invite was created at\n     * @type {?number}\n     */\n\n    this.createdTimestamp = 'created_at' in data ? new Date(data.created_at).getTime() : null;\n    this._expiresTimestamp = 'expires_at' in data ? new Date(data.expires_at).getTime() : null;\n    /**\n     * The stage instance data if there is a public {@link StageInstance} in the stage channel this invite is for\n     * @type {?InviteStageInstance}\n     */\n\n    this.stageInstance = 'stage_instance' in data ? new InviteStageInstance(this.client, data.stage_instance, this.channel.id, this.guild.id) : null;\n  }\n  /**\n   * The time the invite was created at\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return this.createdTimestamp ? new Date(this.createdTimestamp) : null;\n  }\n  /**\n   * Whether the invite is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get deletable() {\n    const guild = this.guild;\n    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n    if (!guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS, false) || guild.me.permissions.has(Permissions.FLAGS.MANAGE_GUILD);\n  }\n  /**\n   * The timestamp the invite will expire at\n   * @type {?number}\n   * @readonly\n   */\n\n\n  get expiresTimestamp() {\n    return this._expiresTimestamp ?? (this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1000 : null);\n  }\n  /**\n   * The time the invite will expire at\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get expiresAt() {\n    const {\n      expiresTimestamp\n    } = this;\n    return expiresTimestamp ? new Date(expiresTimestamp) : null;\n  }\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n\n\n  get url() {\n    return Endpoints.invite(this.client.options.http.invite, this.code);\n  }\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n\n\n  async delete(reason) {\n    await this.client.api.invites[this.code].delete({\n      reason\n    });\n    return this;\n  }\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n\n\n  toString() {\n    return this.url;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      url: true,\n      expiresTimestamp: true,\n      presenceCount: false,\n      memberCount: false,\n      uses: false,\n      channel: 'channelId',\n      inviter: 'inviterId',\n      guild: 'guildId'\n    });\n  }\n\n  valueOf() {\n    return this.code;\n  }\n\n}\n/**\n * Regular expression that globally matches Discord invite links\n * @type {RegExp}\n */\n\n\nInvite.INVITES_PATTERN = /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/gi;\nmodule.exports = Invite;","map":{"version":3,"names":["Base","require","IntegrationApplication","InviteStageInstance","Error","Endpoints","Permissions","Invite","constructor","client","data","_patch","InviteGuild","Guild","guild","code","presenceCount","approximate_presence_count","memberCount","approximate_member_count","temporary","maxAge","max_age","uses","maxUses","max_uses","inviter","users","_add","targetUser","target_user","targetApplication","target_application","targetType","target_type","channel","channels","cache","createdTimestamp","Date","created_at","getTime","_expiresTimestamp","expires_at","stageInstance","stage_instance","id","createdAt","deletable","guilds","has","me","permissionsFor","user","FLAGS","MANAGE_CHANNELS","permissions","MANAGE_GUILD","expiresTimestamp","expiresAt","url","invite","options","http","delete","reason","api","invites","toString","toJSON","valueOf","INVITES_PATTERN","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/Invite.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst IntegrationApplication = require('./IntegrationApplication');\nconst InviteStageInstance = require('./InviteStageInstance');\nconst { Error } = require('../errors');\nconst { Endpoints } = require('../util/Constants');\nconst Permissions = require('../util/Permissions');\n\n/**\n * Represents an invitation to a guild channel.\n * <warn>The only guaranteed properties are `code`, `channel`, and `url`. Other properties can be missing.</warn>\n * @extends {Base}\n */\nclass Invite extends Base {\n  constructor(client, data) {\n    super(client);\n    this._patch(data);\n  }\n\n  _patch(data) {\n    const InviteGuild = require('./InviteGuild');\n    const Guild = require('./Guild');\n    /**\n     * The guild the invite is for including welcome screen data if present\n     * @type {?(Guild|InviteGuild)}\n     */\n    this.guild = null;\n    if (data.guild) {\n      this.guild = data.guild instanceof Guild ? data.guild : new InviteGuild(this.client, data.guild);\n    }\n\n    /**\n     * The code for this invite\n     * @type {string}\n     */\n    this.code = data.code;\n\n    /**\n     * The approximate number of online members of the guild this invite is for\n     * @type {?number}\n     */\n    this.presenceCount = data.approximate_presence_count ?? null;\n\n    /**\n     * The approximate total number of members of the guild this invite is for\n     * @type {?number}\n     */\n    this.memberCount = data.approximate_member_count ?? null;\n\n    /**\n     * Whether or not this invite is temporary\n     * @type {?boolean}\n     */\n    this.temporary = data.temporary ?? null;\n\n    /**\n     * The maximum age of the invite, in seconds, 0 if never expires\n     * @type {?number}\n     */\n    this.maxAge = data.max_age ?? null;\n\n    /**\n     * How many times this invite has been used\n     * @type {?number}\n     */\n    this.uses = data.uses ?? null;\n\n    /**\n     * The maximum uses of this invite\n     * @type {?number}\n     */\n    this.maxUses = data.max_uses ?? null;\n\n    /**\n     * The user who created this invite\n     * @type {?User}\n     */\n    this.inviter = data.inviter ? this.client.users._add(data.inviter) : null;\n\n    /**\n     * The user whose stream to display for this voice channel stream invite\n     * @type {?User}\n     */\n    this.targetUser = data.target_user ? this.client.users._add(data.target_user) : null;\n\n    /**\n     * The embedded application to open for this voice channel embedded application invite\n     * @type {?IntegrationApplication}\n     */\n    this.targetApplication = data.target_application\n      ? new IntegrationApplication(this.client, data.target_application)\n      : null;\n\n    /**\n     * The type of the invite target:\n     * * 1: STREAM\n     * * 2: EMBEDDED_APPLICATION\n     * @typedef {number} TargetType\n     * @see {@link https://discord.com/developers/docs/resources/invite#invite-object-invite-target-types}\n     */\n\n    /**\n     * The target type\n     * @type {?TargetType}\n     */\n    this.targetType = data.target_type ?? null;\n\n    /**\n     * The channel the invite is for\n     * @type {Channel}\n     */\n    this.channel = this.client.channels._add(data.channel, this.guild, { cache: false });\n\n    /**\n     * The timestamp the invite was created at\n     * @type {?number}\n     */\n    this.createdTimestamp = 'created_at' in data ? new Date(data.created_at).getTime() : null;\n\n    this._expiresTimestamp = 'expires_at' in data ? new Date(data.expires_at).getTime() : null;\n\n    /**\n     * The stage instance data if there is a public {@link StageInstance} in the stage channel this invite is for\n     * @type {?InviteStageInstance}\n     */\n    this.stageInstance =\n      'stage_instance' in data\n        ? new InviteStageInstance(this.client, data.stage_instance, this.channel.id, this.guild.id)\n        : null;\n  }\n\n  /**\n   * The time the invite was created at\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.createdTimestamp ? new Date(this.createdTimestamp) : null;\n  }\n\n  /**\n   * Whether the invite is deletable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get deletable() {\n    const guild = this.guild;\n    if (!guild || !this.client.guilds.cache.has(guild.id)) return false;\n    if (!guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return (\n      this.channel.permissionsFor(this.client.user).has(Permissions.FLAGS.MANAGE_CHANNELS, false) ||\n      guild.me.permissions.has(Permissions.FLAGS.MANAGE_GUILD)\n    );\n  }\n\n  /**\n   * The timestamp the invite will expire at\n   * @type {?number}\n   * @readonly\n   */\n  get expiresTimestamp() {\n    return (\n      this._expiresTimestamp ??\n      (this.createdTimestamp && this.maxAge ? this.createdTimestamp + this.maxAge * 1000 : null)\n    );\n  }\n\n  /**\n   * The time the invite will expire at\n   * @type {?Date}\n   * @readonly\n   */\n  get expiresAt() {\n    const { expiresTimestamp } = this;\n    return expiresTimestamp ? new Date(expiresTimestamp) : null;\n  }\n\n  /**\n   * The URL to the invite\n   * @type {string}\n   * @readonly\n   */\n  get url() {\n    return Endpoints.invite(this.client.options.http.invite, this.code);\n  }\n\n  /**\n   * Deletes this invite.\n   * @param {string} [reason] Reason for deleting this invite\n   * @returns {Promise<Invite>}\n   */\n  async delete(reason) {\n    await this.client.api.invites[this.code].delete({ reason });\n    return this;\n  }\n\n  /**\n   * When concatenated with a string, this automatically concatenates the invite's URL instead of the object.\n   * @returns {string}\n   * @example\n   * // Logs: Invite: https://discord.gg/A1b2C3\n   * console.log(`Invite: ${invite}`);\n   */\n  toString() {\n    return this.url;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      url: true,\n      expiresTimestamp: true,\n      presenceCount: false,\n      memberCount: false,\n      uses: false,\n      channel: 'channelId',\n      inviter: 'inviterId',\n      guild: 'guildId',\n    });\n  }\n\n  valueOf() {\n    return this.code;\n  }\n}\n\n/**\n * Regular expression that globally matches Discord invite links\n * @type {RegExp}\n */\nInvite.INVITES_PATTERN = /discord(?:(?:app)?\\.com\\/invite|\\.gg(?:\\/invite)?)\\/([\\w-]{2,255})/gi;\n\nmodule.exports = Invite;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}