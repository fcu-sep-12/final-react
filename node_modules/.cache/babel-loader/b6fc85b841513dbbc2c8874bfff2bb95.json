{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nclass StageInstanceUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel(data);\n\n    if (channel) {\n      const oldStageInstance = channel.guild.stageInstances.cache.get(data.id)?._clone() ?? null;\n\n      const newStageInstance = channel.guild.stageInstances._add(data);\n      /**\n       * Emitted whenever a stage instance gets updated - e.g. change in topic or privacy level\n       * @event Client#stageInstanceUpdate\n       * @param {?StageInstance} oldStageInstance The stage instance before the update\n       * @param {StageInstance} newStageInstance The stage instance after the update\n       */\n\n\n      client.emit(Events.STAGE_INSTANCE_UPDATE, oldStageInstance, newStageInstance);\n      return {\n        oldStageInstance,\n        newStageInstance\n      };\n    }\n\n    return {};\n  }\n\n}\n\nmodule.exports = StageInstanceUpdateAction;","map":{"version":3,"names":["Action","require","Events","StageInstanceUpdateAction","handle","data","client","channel","getChannel","oldStageInstance","guild","stageInstances","cache","get","id","_clone","newStageInstance","_add","emit","STAGE_INSTANCE_UPDATE","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/actions/StageInstanceUpdate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\n\nclass StageInstanceUpdateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel(data);\n\n    if (channel) {\n      const oldStageInstance = channel.guild.stageInstances.cache.get(data.id)?._clone() ?? null;\n      const newStageInstance = channel.guild.stageInstances._add(data);\n\n      /**\n       * Emitted whenever a stage instance gets updated - e.g. change in topic or privacy level\n       * @event Client#stageInstanceUpdate\n       * @param {?StageInstance} oldStageInstance The stage instance before the update\n       * @param {StageInstance} newStageInstance The stage instance after the update\n       */\n      client.emit(Events.STAGE_INSTANCE_UPDATE, oldStageInstance, newStageInstance);\n\n      return { oldStageInstance, newStageInstance };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = StageInstanceUpdateAction;\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,sBAAD,CAA1B;;AAEA,MAAME,yBAAN,SAAwCH,MAAxC,CAA+C;EAC7CI,MAAM,CAACC,IAAD,EAAO;IACX,MAAMC,MAAM,GAAG,KAAKA,MAApB;IACA,MAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBH,IAAhB,CAAhB;;IAEA,IAAIE,OAAJ,EAAa;MACX,MAAME,gBAAgB,GAAGF,OAAO,CAACG,KAAR,CAAcC,cAAd,CAA6BC,KAA7B,CAAmCC,GAAnC,CAAuCR,IAAI,CAACS,EAA5C,GAAiDC,MAAjD,MAA6D,IAAtF;;MACA,MAAMC,gBAAgB,GAAGT,OAAO,CAACG,KAAR,CAAcC,cAAd,CAA6BM,IAA7B,CAAkCZ,IAAlC,CAAzB;MAEA;AACN;AACA;AACA;AACA;AACA;;;MACMC,MAAM,CAACY,IAAP,CAAYhB,MAAM,CAACiB,qBAAnB,EAA0CV,gBAA1C,EAA4DO,gBAA5D;MAEA,OAAO;QAAEP,gBAAF;QAAoBO;MAApB,CAAP;IACD;;IAED,OAAO,EAAP;EACD;;AArB4C;;AAwB/CI,MAAM,CAACC,OAAP,GAAiBlB,yBAAjB"},"metadata":{},"sourceType":"script"}