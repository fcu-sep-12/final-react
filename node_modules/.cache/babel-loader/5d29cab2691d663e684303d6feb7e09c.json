{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  InteractionTypes,\n  MessageComponentTypes\n} = require('../util/Constants');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * Represents an interaction.\n * @extends {Base}\n */\n\n\nclass Interaction extends Base {\n  constructor(client, data) {\n    super(client);\n    /**\n     * The interaction's type\n     * @type {InteractionType}\n     */\n\n    this.type = InteractionTypes[data.type];\n    /**\n     * The interaction's id\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    /**\n     * The interaction's token\n     * @type {string}\n     * @name Interaction#token\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'token', {\n      value: data.token\n    });\n    /**\n     * The application's id\n     * @type {Snowflake}\n     */\n\n    this.applicationId = data.application_id;\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {?Snowflake}\n     */\n\n    this.channelId = data.channel_id ?? null;\n    /**\n     * The id of the guild this interaction was sent in\n     * @type {?Snowflake}\n     */\n\n    this.guildId = data.guild_id ?? null;\n    /**\n     * The user which sent this interaction\n     * @type {User}\n     */\n\n    this.user = this.client.users._add(data.user ?? data.member.user);\n    /**\n     * If this interaction was sent in a guild, the member which sent it\n     * @type {?(GuildMember|APIGuildMember)}\n     */\n\n    this.member = data.member ? this.guild?.members._add(data.member) ?? data.member : null;\n    /**\n     * The version\n     * @type {number}\n     */\n\n    this.version = data.version;\n  }\n  /**\n   * The timestamp the interaction was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the interaction was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * The channel this interaction was sent in\n   * @type {?TextBasedChannels}\n   * @readonly\n   */\n\n\n  get channel() {\n    return this.client.channels.cache.get(this.channelId) ?? null;\n  }\n  /**\n   * The guild this interaction was sent in\n   * @type {?Guild}\n   * @readonly\n   */\n\n\n  get guild() {\n    return this.client.guilds.cache.get(this.guildId) ?? null;\n  }\n  /**\n   * Indicates whether this interaction is received from a guild.\n   * @returns {boolean}\n   */\n\n\n  inGuild() {\n    return Boolean(this.guildId && this.member);\n  }\n  /**\n   * Indicates whether this interaction is a {@link CommandInteraction}.\n   * @returns {boolean}\n   */\n\n\n  isCommand() {\n    return InteractionTypes[this.type] === InteractionTypes.APPLICATION_COMMAND && typeof this.targetId === 'undefined';\n  }\n  /**\n   * Indicates whether this interaction is a {@link ContextMenuInteraction}\n   * @returns {boolean}\n   */\n\n\n  isContextMenu() {\n    return InteractionTypes[this.type] === InteractionTypes.APPLICATION_COMMAND && typeof this.targetId !== 'undefined';\n  }\n  /**\n   * Indicates whether this interaction is a {@link MessageComponentInteraction}.\n   * @returns {boolean}\n   */\n\n\n  isMessageComponent() {\n    return InteractionTypes[this.type] === InteractionTypes.MESSAGE_COMPONENT;\n  }\n  /**\n   * Indicates whether this interaction is a {@link ButtonInteraction}.\n   * @returns {boolean}\n   */\n\n\n  isButton() {\n    return InteractionTypes[this.type] === InteractionTypes.MESSAGE_COMPONENT && MessageComponentTypes[this.componentType] === MessageComponentTypes.BUTTON;\n  }\n  /**\n   * Indicates whether this interaction is a {@link SelectMenuInteraction}.\n   * @returns {boolean}\n   */\n\n\n  isSelectMenu() {\n    return InteractionTypes[this.type] === InteractionTypes.MESSAGE_COMPONENT && MessageComponentTypes[this.componentType] === MessageComponentTypes.SELECT_MENU;\n  }\n\n}\n\nmodule.exports = Interaction;","map":{"version":3,"names":["Base","require","InteractionTypes","MessageComponentTypes","SnowflakeUtil","Interaction","constructor","client","data","type","id","Object","defineProperty","value","token","applicationId","application_id","channelId","channel_id","guildId","guild_id","user","users","_add","member","guild","members","version","createdTimestamp","deconstruct","timestamp","createdAt","Date","channel","channels","cache","get","guilds","inGuild","Boolean","isCommand","APPLICATION_COMMAND","targetId","isContextMenu","isMessageComponent","MESSAGE_COMPONENT","isButton","componentType","BUTTON","isSelectMenu","SELECT_MENU","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/Interaction.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { InteractionTypes, MessageComponentTypes } = require('../util/Constants');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * Represents an interaction.\n * @extends {Base}\n */\nclass Interaction extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The interaction's type\n     * @type {InteractionType}\n     */\n    this.type = InteractionTypes[data.type];\n\n    /**\n     * The interaction's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The interaction's token\n     * @type {string}\n     * @name Interaction#token\n     * @readonly\n     */\n    Object.defineProperty(this, 'token', { value: data.token });\n\n    /**\n     * The application's id\n     * @type {Snowflake}\n     */\n    this.applicationId = data.application_id;\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {?Snowflake}\n     */\n    this.channelId = data.channel_id ?? null;\n\n    /**\n     * The id of the guild this interaction was sent in\n     * @type {?Snowflake}\n     */\n    this.guildId = data.guild_id ?? null;\n\n    /**\n     * The user which sent this interaction\n     * @type {User}\n     */\n    this.user = this.client.users._add(data.user ?? data.member.user);\n\n    /**\n     * If this interaction was sent in a guild, the member which sent it\n     * @type {?(GuildMember|APIGuildMember)}\n     */\n    this.member = data.member ? this.guild?.members._add(data.member) ?? data.member : null;\n\n    /**\n     * The version\n     * @type {number}\n     */\n    this.version = data.version;\n  }\n\n  /**\n   * The timestamp the interaction was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the interaction was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * The channel this interaction was sent in\n   * @type {?TextBasedChannels}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.cache.get(this.channelId) ?? null;\n  }\n\n  /**\n   * The guild this interaction was sent in\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.cache.get(this.guildId) ?? null;\n  }\n\n  /**\n   * Indicates whether this interaction is received from a guild.\n   * @returns {boolean}\n   */\n  inGuild() {\n    return Boolean(this.guildId && this.member);\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link CommandInteraction}.\n   * @returns {boolean}\n   */\n  isCommand() {\n    return InteractionTypes[this.type] === InteractionTypes.APPLICATION_COMMAND && typeof this.targetId === 'undefined';\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link ContextMenuInteraction}\n   * @returns {boolean}\n   */\n  isContextMenu() {\n    return InteractionTypes[this.type] === InteractionTypes.APPLICATION_COMMAND && typeof this.targetId !== 'undefined';\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link MessageComponentInteraction}.\n   * @returns {boolean}\n   */\n  isMessageComponent() {\n    return InteractionTypes[this.type] === InteractionTypes.MESSAGE_COMPONENT;\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link ButtonInteraction}.\n   * @returns {boolean}\n   */\n  isButton() {\n    return (\n      InteractionTypes[this.type] === InteractionTypes.MESSAGE_COMPONENT &&\n      MessageComponentTypes[this.componentType] === MessageComponentTypes.BUTTON\n    );\n  }\n\n  /**\n   * Indicates whether this interaction is a {@link SelectMenuInteraction}.\n   * @returns {boolean}\n   */\n  isSelectMenu() {\n    return (\n      InteractionTypes[this.type] === InteractionTypes.MESSAGE_COMPONENT &&\n      MessageComponentTypes[this.componentType] === MessageComponentTypes.SELECT_MENU\n    );\n  }\n}\n\nmodule.exports = Interaction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}