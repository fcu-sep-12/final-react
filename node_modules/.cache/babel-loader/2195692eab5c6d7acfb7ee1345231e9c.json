{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertReturnOfBuilder = exports.validateMaxChoicesLength = exports.validateMaxOptionsLength = exports.validateDescription = exports.validateName = exports.validateRequiredParameters = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nconst is_1 = tslib_1.__importDefault(require(\"@sindresorhus/is\"));\n\nconst ow_1 = tslib_1.__importDefault(require(\"ow\"));\n\nfunction validateRequiredParameters(name, description, options) {\n  // Assert name matches all conditions\n  validateName(name); // Assert description conditions\n\n  validateDescription(description); // Assert options conditions\n\n  validateMaxOptionsLength(options);\n}\n\nexports.validateRequiredParameters = validateRequiredParameters;\nconst namePredicate = ow_1.default.string.lowercase.minLength(1).maxLength(32).addValidator({\n  message: (value, label) => `Expected ${label} to match \"^[\\\\p{L}\\\\p{N}_-]+$\", got ${value} instead`,\n  validator: value => /^[\\p{L}\\p{N}_-]+$/u.test(value)\n});\n\nfunction validateName(name) {\n  ow_1.default(name, 'name', namePredicate);\n}\n\nexports.validateName = validateName;\nconst descriptionPredicate = ow_1.default.string.minLength(1).maxLength(100);\n\nfunction validateDescription(description) {\n  ow_1.default(description, 'description', descriptionPredicate);\n}\n\nexports.validateDescription = validateDescription;\nconst maxArrayLengthPredicate = ow_1.default.array.maxLength(25);\n\nfunction validateMaxOptionsLength(options) {\n  ow_1.default(options, 'options', maxArrayLengthPredicate);\n}\n\nexports.validateMaxOptionsLength = validateMaxOptionsLength;\n\nfunction validateMaxChoicesLength(choices) {\n  ow_1.default(choices, 'choices', maxArrayLengthPredicate);\n}\n\nexports.validateMaxChoicesLength = validateMaxChoicesLength;\n\nfunction assertReturnOfBuilder(input, ExpectedInstanceOf) {\n  const instanceName = ExpectedInstanceOf.name;\n\n  if (is_1.default.nullOrUndefined(input)) {\n    throw new TypeError(`Expected to receive a ${instanceName} builder, got ${input === null ? 'null' : 'undefined'} instead.`);\n  }\n\n  if (is_1.default.primitive(input)) {\n    throw new TypeError(`Expected to receive a ${instanceName} builder, got a primitive (${typeof input}) instead.`);\n  }\n\n  if (!(input instanceof ExpectedInstanceOf)) {\n    const casted = input;\n    const constructorName = is_1.default.function_(input) ? input.name : casted.constructor.name;\n    const stringTag = Reflect.get(casted, Symbol.toStringTag);\n    const fullResultName = stringTag ? `${constructorName} [${stringTag}]` : constructorName;\n    throw new TypeError(`Expected to receive a ${instanceName} builder, got ${fullResultName} instead.`);\n  }\n}\n\nexports.assertReturnOfBuilder = assertReturnOfBuilder;","map":{"version":3,"mappings":";;;;;;;;;AAAA;;AAEA;;AAKA,SAAgBA,0BAAhB,CACCC,IADD,EAECC,WAFD,EAGCC,OAHD,EAG0C;EAEzC;EACAC,YAAY,CAACH,IAAD,CAAZ,CAHyC,CAKzC;;EACAI,mBAAmB,CAACH,WAAD,CAAnB,CANyC,CAQzC;;EACAI,wBAAwB,CAACH,OAAD,CAAxB;AACA;;AAbDI;AAeA,MAAMC,aAAa,GAAGC,aAAGC,MAAH,CAAUC,SAAV,CACpBC,SADoB,CACV,CADU,EAEpBC,SAFoB,CAEV,EAFU,EAGpBC,YAHoB,CAGP;EACbC,OAAO,EAAE,CAACC,KAAD,EAAQC,KAAR,KAAkB,YAAYA,KAAM,wCAAwCD,KAAK,UAD7E;EAEbE,SAAS,EAAGF,KAAD,IAAW,qBAAqBG,IAArB,CAA0BH,KAA1B;AAFT,CAHO,CAAtB;;AAQA,SAAgBZ,YAAhB,CAA6BH,IAA7B,EAA0C;EACzCQ,aAAGR,IAAH,EAAS,MAAT,EAAiBO,aAAjB;AACA;;AAFDD;AAIA,MAAMa,oBAAoB,GAAGX,aAAGC,MAAH,CAAUE,SAAV,CAAoB,CAApB,EAAuBC,SAAvB,CAAiC,GAAjC,CAA7B;;AAEA,SAAgBR,mBAAhB,CAAoCH,WAApC,EAAwD;EACvDO,aAAGP,WAAH,EAAgB,aAAhB,EAA+BkB,oBAA/B;AACA;;AAFDb;AAIA,MAAMc,uBAAuB,GAAGZ,aAAGa,KAAH,CAAST,SAAT,CAAmB,EAAnB,CAAhC;;AAEA,SAAgBP,wBAAhB,CAAyCH,OAAzC,EAAyD;EACxDM,aAAGN,OAAH,EAAY,SAAZ,EAAuBkB,uBAAvB;AACA;;AAFDd;;AAIA,SAAgBgB,wBAAhB,CAAyCC,OAAzC,EAAqF;EACpFf,aAAGe,OAAH,EAAY,SAAZ,EAAuBH,uBAAvB;AACA;;AAFDd;;AAIA,SAAgBkB,qBAAhB,CAEEC,KAFF,EAEkBC,kBAFlB,EAEiD;EAChD,MAAMC,YAAY,GAAGD,kBAAkB,CAAC1B,IAAxC;;EAEA,IAAI4B,aAAGC,eAAH,CAAmBJ,KAAnB,CAAJ,EAA+B;IAC9B,MAAM,IAAIK,SAAJ,CACL,yBAAyBH,YAAY,iBAAiBF,KAAK,KAAK,IAAV,GAAiB,MAAjB,GAA0B,WAAW,WADtF,CAAN;EAGA;;EAED,IAAIG,aAAGG,SAAH,CAAaN,KAAb,CAAJ,EAAyB;IACxB,MAAM,IAAIK,SAAJ,CAAc,yBAAyBH,YAAY,8BAA8B,OAAOF,KAAK,YAA7F,CAAN;EACA;;EAED,IAAI,EAAEA,KAAK,YAAYC,kBAAnB,CAAJ,EAA4C;IAC3C,MAAMM,MAAM,GAAGP,KAAf;IAEA,MAAMQ,eAAe,GAAGL,aAAGM,SAAH,CAAaT,KAAb,IAAsBA,KAAK,CAACzB,IAA5B,GAAmCgC,MAAM,CAACG,WAAP,CAAmBnC,IAA9E;IACA,MAAMoC,SAAS,GAAGC,OAAO,CAACC,GAAR,CAAYN,MAAZ,EAAoBO,MAAM,CAACC,WAA3B,CAAlB;IAEA,MAAMC,cAAc,GAAGL,SAAS,GAAG,GAAGH,eAAe,KAAKG,SAAS,GAAnC,GAAyCH,eAAzE;IAEA,MAAM,IAAIH,SAAJ,CAAc,yBAAyBH,YAAY,iBAAiBc,cAAc,WAAlF,CAAN;EACA;AACD;;AAzBDnC","names":["validateRequiredParameters","name","description","options","validateName","validateDescription","validateMaxOptionsLength","exports","namePredicate","ow_1","string","lowercase","minLength","maxLength","addValidator","message","value","label","validator","test","descriptionPredicate","maxArrayLengthPredicate","array","validateMaxChoicesLength","choices","assertReturnOfBuilder","input","ExpectedInstanceOf","instanceName","is_1","nullOrUndefined","TypeError","primitive","casted","constructorName","function_","constructor","stringTag","Reflect","get","Symbol","toStringTag","fullResultName"],"sources":["\\interactions\\slashCommands\\Assertions.ts"],"sourcesContent":["import is from '@sindresorhus/is';\nimport type { APIApplicationCommandOptionChoice } from 'discord-api-types/v9';\nimport ow from 'ow';\nimport type { SlashCommandOptionBase } from './mixins/CommandOptionBase';\nimport type { ToAPIApplicationCommandOptions } from './SlashCommandBuilder';\nimport type { SlashCommandSubcommandBuilder, SlashCommandSubcommandGroupBuilder } from './SlashCommandSubcommands';\n\nexport function validateRequiredParameters(\n\tname: string,\n\tdescription: string,\n\toptions: ToAPIApplicationCommandOptions[],\n) {\n\t// Assert name matches all conditions\n\tvalidateName(name);\n\n\t// Assert description conditions\n\tvalidateDescription(description);\n\n\t// Assert options conditions\n\tvalidateMaxOptionsLength(options);\n}\n\nconst namePredicate = ow.string.lowercase\n\t.minLength(1)\n\t.maxLength(32)\n\t.addValidator({\n\t\tmessage: (value, label) => `Expected ${label!} to match \"^[\\\\p{L}\\\\p{N}_-]+$\", got ${value} instead`,\n\t\tvalidator: (value) => /^[\\p{L}\\p{N}_-]+$/u.test(value),\n\t});\n\nexport function validateName(name: unknown): asserts name is string {\n\tow(name, 'name', namePredicate);\n}\n\nconst descriptionPredicate = ow.string.minLength(1).maxLength(100);\n\nexport function validateDescription(description: unknown): asserts description is string {\n\tow(description, 'description', descriptionPredicate);\n}\n\nconst maxArrayLengthPredicate = ow.array.maxLength(25);\n\nexport function validateMaxOptionsLength(options: unknown): asserts options is ToAPIApplicationCommandOptions[] {\n\tow(options, 'options', maxArrayLengthPredicate);\n}\n\nexport function validateMaxChoicesLength(choices: APIApplicationCommandOptionChoice[]) {\n\tow(choices, 'choices', maxArrayLengthPredicate);\n}\n\nexport function assertReturnOfBuilder<\n\tT extends SlashCommandOptionBase | SlashCommandSubcommandBuilder | SlashCommandSubcommandGroupBuilder,\n>(input: unknown, ExpectedInstanceOf: new () => T): asserts input is T {\n\tconst instanceName = ExpectedInstanceOf.name;\n\n\tif (is.nullOrUndefined(input)) {\n\t\tthrow new TypeError(\n\t\t\t`Expected to receive a ${instanceName} builder, got ${input === null ? 'null' : 'undefined'} instead.`,\n\t\t);\n\t}\n\n\tif (is.primitive(input)) {\n\t\tthrow new TypeError(`Expected to receive a ${instanceName} builder, got a primitive (${typeof input}) instead.`);\n\t}\n\n\tif (!(input instanceof ExpectedInstanceOf)) {\n\t\tconst casted = input as Record<PropertyKey, unknown>;\n\n\t\tconst constructorName = is.function_(input) ? input.name : casted.constructor.name;\n\t\tconst stringTag = Reflect.get(casted, Symbol.toStringTag) as string | undefined;\n\n\t\tconst fullResultName = stringTag ? `${constructorName} [${stringTag}]` : constructorName;\n\n\t\tthrow new TypeError(`Expected to receive a ${instanceName} builder, got ${fullResultName} instead.`);\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}