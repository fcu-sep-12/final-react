{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OAuth2Routes = exports.RouteBases = exports.Routes = exports.APIVersion = void 0;\n\n__exportStar(require(\"../common\"), exports);\n\n__exportStar(require(\"./auditLog\"), exports);\n\n__exportStar(require(\"./channel\"), exports);\n\n__exportStar(require(\"./emoji\"), exports);\n\n__exportStar(require(\"./gateway\"), exports);\n\n__exportStar(require(\"./guild\"), exports);\n\n__exportStar(require(\"./interactions\"), exports);\n\n__exportStar(require(\"./invite\"), exports);\n\n__exportStar(require(\"./oauth2\"), exports);\n\n__exportStar(require(\"./stageInstance\"), exports);\n\n__exportStar(require(\"./sticker\"), exports);\n\n__exportStar(require(\"./template\"), exports);\n\n__exportStar(require(\"./user\"), exports);\n\n__exportStar(require(\"./voice\"), exports);\n\n__exportStar(require(\"./webhook\"), exports);\n\nexports.APIVersion = '9';\nexports.Routes = {\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/audit-logs`\r\n   */\n  guildAuditLog(guildId) {\n    return `/guilds/${guildId}/audit-logs`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/channels/{channel.id}`\r\n   * - PATCH  `/channels/{channel.id}`\r\n   * - DELETE `/channels/{channel.id}`\r\n   */\n  channel(channelId) {\n    return `/channels/${channelId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/channels/{channel.id}/messages`\r\n   * - POST `/channels/{channel.id}/messages`\r\n   */\n  channelMessages(channelId) {\n    return `/channels/${channelId}/messages`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/channels/{channel.id}/messages/{message.id}`\r\n   * - PATCH  `/channels/{channel.id}/messages/{message.id}`\r\n   * - DELETE `/channels/{channel.id}/messages/{message.id}`\r\n   */\n  channelMessage(channelId, messageId) {\n    return `/channels/${channelId}/messages/${messageId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - POST `/channels/{channel.id}/messages/{message.id}/crosspost`\r\n   */\n  channelMessageCrosspost(channelId, messageId) {\n    return `/channels/${channelId}/messages/${messageId}/crosspost`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - PUT    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`\r\n   * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/@me`\r\n   *\r\n   * **Note**: You need to URL encode the emoji yourself\r\n   */\n  channelMessageOwnReaction(channelId, messageId, emoji) {\n    return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/@me`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}/{user.id}`\r\n   *\r\n   * **Note**: You need to URL encode the emoji yourself\r\n   */\n  channelMessageUserReaction(channelId, messageId, emoji, userId) {\n    return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}/${userId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`\r\n   * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions/{emoji}`\r\n   *\r\n   * **Note**: You need to URL encode the emoji yourself\r\n   */\n  channelMessageReaction(channelId, messageId, emoji) {\n    return `/channels/${channelId}/messages/${messageId}/reactions/${emoji}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - DELETE `/channels/{channel.id}/messages/{message.id}/reactions`\r\n   */\n  channelMessageAllReactions(channelId, messageId) {\n    return `/channels/${channelId}/messages/${messageId}/reactions`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - POST `/channels/{channel.id}/messages/bulk-delete`\r\n   */\n  channelBulkDelete(channelId) {\n    return `/channels/${channelId}/messages/bulk-delete`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - PUT    `/channels/{channel.id}/permissions/{overwrite.id}`\r\n   * - DELETE `/channels/{channel.id}/permissions/{overwrite.id}`\r\n   */\n  channelPermission(channelId, overwriteId) {\n    return `/channels/${channelId}/permissions/${overwriteId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/channels/{channel.id}/invites`\r\n   * - POST `/channels/{channel.id}/invites`\r\n   */\n  channelInvites(channelId) {\n    return `/channels/${channelId}/invites`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - POST `/channels/{channel.id}/followers`\r\n   */\n  channelFollowers(channelId) {\n    return `/channels/${channelId}/followers`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - POST `/channels/{channel.id}/typing`\r\n   */\n  channelTyping(channelId) {\n    return `/channels/${channelId}/typing`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/channels/{channel.id}/pins`\r\n   */\n  channelPins(channelId) {\n    return `/channels/${channelId}/pins`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - PUT    `/channels/{channel.id}/pins/{message.id}`\r\n   * - DELETE `/channels/{channel.id}/pins/{message.id}`\r\n   */\n  channelPin(channelId, messageId) {\n    return `/channels/${channelId}/pins/${messageId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - PUT    `/channels/{channel.id}/recipients/{user.id}`\r\n   * - DELETE `/channels/{channel.id}/recipients/{user.id}`\r\n   */\n  channelRecipient(channelId, userId) {\n    return `/channels/${channelId}/recipients/${userId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/guilds/{guild.id}/emojis`\r\n   * - POST `/guilds/{guild.id}/emojis`\r\n   */\n  guildEmojis(guildId) {\n    return `/guilds/${guildId}/emojis`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/guilds/{guild.id}/emojis/{emoji.id}`\r\n   * - PATCH  `/guilds/{guild.id}/emojis/{emoji.id}`\r\n   * - DELETE `/guilds/{guild.id}/emojis/{emoji.id}`\r\n   */\n  guildEmoji(guildId, emojiId) {\n    return `/guilds/${guildId}/emojis/${emojiId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - POST `/guilds`\r\n   */\n  guilds() {\n    return '/guilds';\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/guilds/{guild.id}`\r\n   * - PATCH  `/guilds/{guild.id}`\r\n   * - DELETE `/guilds/{guild.id}`\r\n   */\n  guild(guildId) {\n    return `/guilds/${guildId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/preview`\r\n   */\n  guildPreview(guildId) {\n    return `/guilds/${guildId}/preview`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET   `/guilds/{guild.id}/channels`\r\n   * - POST  `/guilds/{guild.id}/channels`\r\n   * - PATCH `/guilds/{guild.id}/channels`\r\n   */\n  guildChannels(guildId) {\n    return `/guilds/${guildId}/channels`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/guilds/{guild.id}/members/{user.id}`\r\n   * - PUT    `/guilds/{guild.id}/members/{user.id}`\r\n   * - PATCH  `/guilds/{guild.id}/members/{user.id}`\r\n   * - DELETE `/guilds/{guild.id}/members/{user.id}`\r\n   */\n  guildMember(guildId, userId) {\n    return `/guilds/${guildId}/members/${userId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/members`\r\n   */\n  guildMembers(guildId) {\n    return `/guilds/${guildId}/members`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/members/search`\r\n   */\n  guildMembersSearch(guildId) {\n    return `/guilds/${guildId}/members/search`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - PATCH `/guilds/{guild.id}/members/@me/nick`\r\n   */\n  guildCurrentMemberNickname(guildId) {\n    return `/guilds/${guildId}/members/@me/nick`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - PUT    `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`\r\n   * - DELETE `/guilds/{guild.id}/members/{user.id}/roles/{role.id}`\r\n   */\n  guildMemberRole(guildId, memberId, roleId) {\n    return `/guilds/${guildId}/members/${memberId}/roles/${roleId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/bans`\r\n   */\n  guildBans(guildId) {\n    return `/guilds/${guildId}/bans`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/guilds/{guild.id}/bans/{user.id}`\r\n   * - PUT    `/guilds/{guild.id}/bans/{user.id}`\r\n   * - DELETE `/guilds/{guild.id}/bans/{user.id}`\r\n   */\n  guildBan(guildId, userId) {\n    return `/guilds/${guildId}/bans/${userId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET   `/guilds/{guild.id}/roles`\r\n   * - POST  `/guilds/{guild.id}/roles`\r\n   * - PATCH `/guilds/{guild.id}/roles`\r\n   */\n  guildRoles(guildId) {\n    return `/guilds/${guildId}/roles`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - PATCH  `/guilds/{guild.id}/roles/{role.id}`\r\n   * - DELETE `/guilds/{guild.id}/roles/{role.id}`\r\n   */\n  guildRole(guildId, roleId) {\n    return `/guilds/${guildId}/roles/${roleId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/guilds/{guild.id}/prune`\r\n   * - POST `/guilds/{guild.id}/prune`\r\n   */\n  guildPrune(guildId) {\n    return `/guilds/${guildId}/prune`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/regions`\r\n   */\n  guildVoiceRegions(guildId) {\n    return `/guilds/${guildId}/regions`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/invites`\r\n   */\n  guildInvites(guildId) {\n    return `/guilds/${guildId}/invites`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/guilds/{guild.id}/integrations`\r\n   */\n  guildIntegrations(guildId) {\n    return `/guilds/${guildId}/integrations`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - DELETE `/guilds/{guild.id}/integrations/{integration.id}`\r\n   */\n  guildIntegration(guildId, integrationId) {\n    return `/guilds/${guildId}/integrations/${integrationId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET   `/guilds/{guild.id}/widget`\r\n   * - PATCH `/guilds/{guild.id}/widget`\r\n   */\n  guildWidgetSettings(guildId) {\n    return `/guilds/${guildId}/widget`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/widget.json`\r\n   */\n  guildWidgetJSON(guildId) {\n    return `/guilds/${guildId}/widget.json`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/vanity-url`\r\n   */\n  guildVanityUrl(guildId) {\n    return `/guilds/${guildId}/vanity-url`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/widget.png`\r\n   */\n  guildWidgetImage(guildId) {\n    return `/guilds/${guildId}/widget.png`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/invites/{invite.code}`\r\n   * - DELETE `/invites/{invite.code}`\r\n   */\n  invite(code) {\n    return `/invites/${code}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/guilds/templates/{template.code}`\r\n   * - POST `/guilds/templates/{template.code}`\r\n   */\n  template(code) {\n    return `/guilds/templates/${code}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/guilds/{guild.id}/templates`\r\n   * - POST `/guilds/{guild.id}/templates`\r\n   */\n  guildTemplates(guildId) {\n    return `/guilds/${guildId}/templates`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - PUT    `/guilds/{guild.id}/templates/{template.code}`\r\n   * - PATCH  `/guilds/{guild.id}/templates/{template.code}`\r\n   * - DELETE `/guilds/{guild.id}/templates/{template.code}`\r\n   */\n  guildTemplate(guildId, code) {\n    return `/guilds/${guildId}/templates/${code}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - POST `/channels/{channel.id}/threads`\r\n   * - POST `/channels/{channel.id}/messages/{message.id}/threads`\r\n   */\n  threads(parentId, messageId) {\n    const parts = ['', 'channels', parentId];\n    if (messageId) parts.push('messages', messageId);\n    parts.push('threads');\n    return parts.join('/');\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/threads/active`\r\n   */\n  guildActiveThreads(guildId) {\n    return `/guilds/${guildId}/threads/active`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/channels/{channel.id}/threads/active`\r\n   * \t (deprecated, use [List Active Guild Threads](https://discord.com/developers/docs/resources/guild#list-active-threads) instead.\r\n   * \t Will be removed in v10.)\r\n   * - GET `/channels/{channel.id}/threads/archived/public`\r\n   * - GET `/channels/{channel.id}/threads/archived/private`\r\n   */\n  channelThreads(channelId, archived) {\n    const parts = ['', 'channels', channelId, 'threads'];\n    if (archived) parts.push('archived', archived);else parts.push('active');\n    return parts.join('/');\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/channels/{channel.id}/users/@me/threads/archived/prviate`\r\n   */\n  channelJoinedArchivedThreads(channelId) {\n    return `/channels/${channelId}/users/@me/threads/archived/private`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/channels/{thread.id}/thread-members`\r\n   * - PUT    `/channels/{thread.id}/thread-members/@me`\r\n   * - PUT    `/channels/{thread.id}/thread-members/{user.id}`\r\n   * - DELETE `/channels/{thread.id}/thread-members/@me`\r\n   * - DELETE `/channels/{thread.id}/thread-members/{user.id}`\r\n   */\n  threadMembers(threadId, userId) {\n    const parts = ['', 'channels', threadId, 'thread-members'];\n    if (userId) parts.push(userId);\n    return parts.join('/');\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET   `/users/@me`\r\n   * - GET   `/users/{user.id}`\r\n   * - PATCH `/users/@me`\r\n   *\r\n   * @param [userId='@me'] The user ID, defaulted to `@me`\r\n   */\n  user() {\n    let userId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '@me';\n    return `/users/${userId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/users/@me/guilds`\r\n   */\n  userGuilds() {\n    return `/users/@me/guilds`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - DELETE `/users/@me/guilds/{guild.id}`\r\n   */\n  userGuild(guildId) {\n    return `/users/@me/guilds/${guildId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - POST `/users/@me/channels`\r\n   */\n  userChannels() {\n    return `/users/@me/channels`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/users/@me/connections`\r\n   */\n  userConnections() {\n    return `/users/@me/connections`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/voice/regions`\r\n   */\n  voiceRegions() {\n    return `/voice/regions`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/channels/{channel.id}/webhooks`\r\n   * - POST `/channels/{channel.id}/webhooks`\r\n   */\n  channelWebhooks(channelId) {\n    return `/channels/${channelId}/webhooks`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/guilds/{guild.id}/webhooks`\r\n   */\n  guildWebhooks(guildId) {\n    return `/guilds/${guildId}/webhooks`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/webhooks/{webhook.id}`\r\n   * - GET    `/webhooks/{webhook.id}/{webhook.token}`\r\n   * - PATCH  `/webhooks/{webhook.id}`\r\n   * - PATCH  `/webhooks/{webhook.id}/{webhook.token}`\r\n   * - DELETE `/webhooks/{webhook.id}`\r\n   * - DELETE `/webhooks/{webhook.id}/{webhook.token}`\r\n   * - POST   `/webhooks/{webhook.id}/{webhook.token}`\r\n   *\r\n   * - POST   `/webhooks/{application.id}/{interaction.token}`\r\n   */\n  webhook(webhookId, webhookToken) {\n    const parts = ['', 'webhooks', webhookId];\n    if (webhookToken) parts.push(webhookToken);\n    return parts.join('/');\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/@original`\r\n   * - GET    `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`\r\n   * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/@original`\r\n   * - PATCH  `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`\r\n   * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/@original`\r\n   * - DELETE `/webhooks/{webhook.id}/{webhook.token}/messages/{message.id}`\r\n   *\r\n   * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/@original`\r\n   * - PATCH  `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`\r\n   * - DELETE `/webhooks/{application.id}/{interaction.token}/messages/{message.id}`\r\n   *\r\n   * @param [messageId='@original'] The message ID to change, defaulted to `@original`\r\n   */\n  webhookMessage(webhookId, webhookToken) {\n    let messageId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '@original';\n    return `/webhooks/${webhookId}/${webhookToken}/messages/${messageId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - POST `/webhooks/{webhook.id}/{webhook.token}/github`\r\n   * - POST `/webhooks/{webhook.id}/{webhook.token}/slack`\r\n   */\n  webhookPlatform(webhookId, webhookToken, platform) {\n    return `/webhooks/${webhookId}/${webhookToken}/${platform}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/gateway`\r\n   */\n  gateway() {\n    return `/gateway`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/gateway/bot`\r\n   */\n  gatewayBot() {\n    return `/gateway/bot`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/oauth2/applications/@me`\r\n   */\n  oauth2CurrentApplication() {\n    return `/oauth2/applications/@me`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/oauth2/@me`\r\n   */\n  oauth2CurrentAuthorization() {\n    return `/oauth2/@me`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/applications/{application.id}/commands`\r\n   * - PUT  `/applications/{application.id}/commands`\r\n   * - POST `/applications/{application.id}/commands`\r\n   */\n  applicationCommands(applicationId) {\n    return `/applications/${applicationId}/commands`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/applications/{application.id}/commands/{command.id}`\r\n   * - PATCH  `/applications/{application.id}/commands/{command.id}`\r\n   * - DELETE `/applications/{application.id}/commands/{command.id}`\r\n   */\n  applicationCommand(applicationId, commandId) {\n    return `/applications/${applicationId}/commands/${commandId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/applications/{application.id}/guilds/{guild.id}/commands`\r\n   * - PUT  `/applications/{application.id}/guilds/{guild.id}/commands`\r\n   * - POST `/applications/{application.id}/guilds/{guild.id}/commands`\r\n   */\n  applicationGuildCommands(applicationId, guildId) {\n    return `/applications/${applicationId}/guilds/${guildId}/commands`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`\r\n   * - PATCH  `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`\r\n   * - DELETE `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}`\r\n   */\n  applicationGuildCommand(applicationId, guildId, commandId) {\n    return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - POST `/interactions/{interaction.id}/{interaction.token}/callback`\r\n   */\n  interactionCallback(interactionId, interactionToken) {\n    return `/interactions/${interactionId}/${interactionToken}/callback`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET   `/guilds/{guild.id}/member-verification`\r\n   * - PATCH `/guilds/{guild.id}/member-verification`\r\n   */\n  guildMemberVerification(guildId) {\n    return `/guilds/${guildId}/member-verification`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - PATCH `/guilds/{guild.id}/voice-states/@me`\r\n   * - PATCH `/guilds/{guild.id}/voice-states/{user.id}`\r\n   */\n  guildVoiceState(guildId) {\n    let userId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '@me';\n    return `/guilds/${guildId}/voice-states/${userId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/applications/{application.id}/guilds/{guild.id}/commands/permissions`\r\n   * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/permissions`\r\n   */\n  guildApplicationCommandsPermissions(applicationId, guildId) {\n    return `/applications/${applicationId}/guilds/${guildId}/commands/permissions`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`\r\n   * - PUT `/applications/{application.id}/guilds/{guild.id}/commands/{command.id}/permissions`\r\n   */\n  applicationCommandPermissions(applicationId, guildId, commandId) {\n    return `/applications/${applicationId}/guilds/${guildId}/commands/${commandId}/permissions`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET   `/guilds/{guild.id}/welcome-screen`\r\n   * - PATCH `/guilds/{guild.id}/welcome-screen`\r\n   */\n  guildWelcomeScreen(guildId) {\n    return `/guilds/${guildId}/welcome-screen`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - POST `/stage-instances`\r\n   */\n  stageInstances() {\n    return `/stage-instances`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/stage-instances/{channel.id}`\r\n   * - PATCH `/stage-instances/{channel.id}`\r\n   * - DELETE `/stage-instances/{channel.id}`\r\n   */\n  stageInstance(channelId) {\n    return `/stage-instances/${channelId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/stickers/{sticker.id}`\r\n   */\n  sticker(stickerId) {\n    return `/stickers/${stickerId}`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET `/sticker-packs`\r\n   */\n  nitroStickerPacks() {\n    return '/sticker-packs';\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET  `/guilds/{guild.id}/stickers`\r\n   * - POST `/guilds/{guild.id}/stickers`\r\n   */\n  guildStickers(guildId) {\n    return `/guilds/${guildId}/stickers`;\n  },\n\n  /**\r\n   * Route for:\r\n   * - GET    `/guilds/{guild.id}/stickers/{sticker.id}`\r\n   * - PATCH  `/guilds/{guild.id}/stickers/{sticker.id}`\r\n   * - DELETE `/guilds/{guild.id}/stickers/{sticker.id}`\r\n   */\n  guildSticker(guildId, stickerId) {\n    return `/guilds/${guildId}/stickers/${stickerId}`;\n  }\n\n};\nexports.RouteBases = {\n  api: `https://discord.com/api/v${exports.APIVersion}`,\n  cdn: 'https://cdn.discordapp.com',\n  invite: 'https://discord.gg',\n  template: 'https://discord.new',\n  gift: 'https://discord.gift'\n}; // Freeze bases object\n\nObject.freeze(exports.RouteBases);\nexports.OAuth2Routes = {\n  authorizationURL: `https://discord.com/api/v${exports.APIVersion}/oauth2/authorize`,\n  tokenURL: `https://discord.com/api/v${exports.APIVersion}/oauth2/token`,\n\n  /**\r\n   * See https://tools.ietf.org/html/rfc7009\r\n   */\n  tokenRevocationURL: `https://discord.com/api/v${exports.APIVersion}/oauth2/token/revoke`\n}; // Freeze OAuth2 route object\n\nObject.freeze(exports.OAuth2Routes);","map":{"version":3,"mappings":"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","names":["__exportStar","exports","guildAuditLog","guildId","channel","channelId","channelMessages","channelMessage","messageId","channelMessageCrosspost","channelMessageOwnReaction","emoji","channelMessageUserReaction","userId","channelMessageReaction","channelMessageAllReactions","channelBulkDelete","channelPermission","overwriteId","channelInvites","channelFollowers","channelTyping","channelPins","channelPin","channelRecipient","guildEmojis","guildEmoji","emojiId","guilds","guild","guildPreview","guildChannels","guildMember","guildMembers","guildMembersSearch","guildCurrentMemberNickname","guildMemberRole","memberId","roleId","guildBans","guildBan","guildRoles","guildRole","guildPrune","guildVoiceRegions","guildInvites","guildIntegrations","guildIntegration","integrationId","guildWidgetSettings","guildWidgetJSON","guildVanityUrl","guildWidgetImage","invite","code","template","guildTemplates","guildTemplate","threads","parentId","parts","push","join","guildActiveThreads","channelThreads","archived","channelJoinedArchivedThreads","threadMembers","threadId","user","userGuilds","userGuild","userChannels","userConnections","voiceRegions","channelWebhooks","guildWebhooks","webhook","webhookId","webhookToken","webhookMessage","webhookPlatform","platform","gateway","gatewayBot","oauth2CurrentApplication","oauth2CurrentAuthorization","applicationCommands","applicationId","applicationCommand","commandId","applicationGuildCommands","applicationGuildCommand","interactionCallback","interactionId","interactionToken","guildMemberVerification","guildVoiceState","guildApplicationCommandsPermissions","applicationCommandPermissions","guildWelcomeScreen","stageInstances","stageInstance","sticker","stickerId","nitroStickerPacks","guildStickers","guildSticker","api","cdn","gift","Object","freeze","authorizationURL","tokenURL","tokenRevocationURL"],"sources":["index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}