{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nlet CategoryChannel;\nlet DMChannel;\nlet NewsChannel;\nlet StageChannel;\nlet StoreChannel;\nlet TextChannel;\nlet ThreadChannel;\nlet VoiceChannel;\n\nconst {\n  ChannelTypes,\n  ThreadChannelTypes,\n  VoiceBasedChannelTypes\n} = require('../util/Constants');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n * @abstract\n */\n\n\nclass Channel extends Base {\n  constructor(client, data) {\n    let immediatePatch = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    super(client);\n    const type = ChannelTypes[data.type];\n    /**\n     * The type of the channel\n     * @type {ChannelType}\n     */\n\n    this.type = type ?? 'UNKNOWN';\n    /**\n     * Whether the channel has been deleted\n     * @type {boolean}\n     */\n\n    this.deleted = false;\n    if (data && immediatePatch) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The channel's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the channel was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * Whether this Channel is a partial\n   * <info>This is always false outside of DM channels.</info>\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partial() {\n    return false;\n  }\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n\n\n  toString() {\n    return `<#${this.id}>`;\n  }\n  /**\n   * Deletes this channel.\n   * @returns {Promise<Channel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  delete() {\n    return this.client.api.channels(this.id).delete().then(() => this);\n  }\n  /**\n   * Fetches this channel.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<Channel>}\n   */\n\n\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.client.channels.fetch(this.id, {\n      force\n    });\n  }\n  /**\n   * Indicates whether this channel is {@link TextBasedChannels text-based}.\n   * @returns {boolean}\n   */\n\n\n  isText() {\n    return 'messages' in this;\n  }\n  /**\n   * Indicates whether this channel is voice-based\n   * ({@link VoiceChannel} or {@link StageChannel}).\n   * @returns {boolean}\n   */\n\n\n  isVoice() {\n    return VoiceBasedChannelTypes.includes(this.type);\n  }\n  /**\n   * Indicates whether this channel is a {@link ThreadChannel}.\n   * @returns {boolean}\n   */\n\n\n  isThread() {\n    return ThreadChannelTypes.includes(this.type);\n  }\n\n  static create(client, data, guild) {\n    let {\n      allowUnknownGuild,\n      fromInteraction\n    } = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    if (!CategoryChannel) CategoryChannel = require('./CategoryChannel');\n    if (!DMChannel) DMChannel = require('./DMChannel');\n    if (!NewsChannel) NewsChannel = require('./NewsChannel');\n    if (!StageChannel) StageChannel = require('./StageChannel');\n    if (!StoreChannel) StoreChannel = require('./StoreChannel');\n    if (!TextChannel) TextChannel = require('./TextChannel');\n    if (!ThreadChannel) ThreadChannel = require('./ThreadChannel');\n    if (!VoiceChannel) VoiceChannel = require('./VoiceChannel');\n    let channel;\n\n    if (!data.guild_id && !guild) {\n      if (data.recipients && data.type !== ChannelTypes.GROUP_DM || data.type === ChannelTypes.DM) {\n        channel = new DMChannel(client, data);\n      } else if (data.type === ChannelTypes.GROUP_DM) {\n        const PartialGroupDMChannel = require('./PartialGroupDMChannel');\n\n        channel = new PartialGroupDMChannel(client, data);\n      }\n    } else {\n      if (!guild) guild = client.guilds.cache.get(data.guild_id);\n\n      if (guild || allowUnknownGuild) {\n        switch (data.type) {\n          case ChannelTypes.GUILD_TEXT:\n            {\n              channel = new TextChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_VOICE:\n            {\n              channel = new VoiceChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_CATEGORY:\n            {\n              channel = new CategoryChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_NEWS:\n            {\n              channel = new NewsChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_STORE:\n            {\n              channel = new StoreChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_STAGE_VOICE:\n            {\n              channel = new StageChannel(guild, data, client);\n              break;\n            }\n\n          case ChannelTypes.GUILD_NEWS_THREAD:\n          case ChannelTypes.GUILD_PUBLIC_THREAD:\n          case ChannelTypes.GUILD_PRIVATE_THREAD:\n            {\n              channel = new ThreadChannel(guild, data, client, fromInteraction);\n              if (!allowUnknownGuild) channel.parent?.threads.cache.set(channel.id, channel);\n              break;\n            }\n        }\n\n        if (channel && !allowUnknownGuild) guild.channels?.cache.set(channel.id, channel);\n      }\n    }\n\n    return channel;\n  }\n\n  toJSON() {\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    return super.toJSON({\n      createdTimestamp: true\n    }, ...props);\n  }\n\n}\n\nmodule.exports = Channel;\n/**\n * @external APIChannel\n * @see {@link https://discord.com/developers/docs/resources/channel#channel-object}\n */","map":{"version":3,"names":["Base","require","CategoryChannel","DMChannel","NewsChannel","StageChannel","StoreChannel","TextChannel","ThreadChannel","VoiceChannel","ChannelTypes","ThreadChannelTypes","VoiceBasedChannelTypes","SnowflakeUtil","Channel","constructor","client","data","immediatePatch","type","deleted","_patch","id","createdTimestamp","deconstruct","timestamp","createdAt","Date","partial","toString","delete","api","channels","then","fetch","force","isText","isVoice","includes","isThread","create","guild","allowUnknownGuild","fromInteraction","channel","guild_id","recipients","GROUP_DM","DM","PartialGroupDMChannel","guilds","cache","get","GUILD_TEXT","GUILD_VOICE","GUILD_CATEGORY","GUILD_NEWS","GUILD_STORE","GUILD_STAGE_VOICE","GUILD_NEWS_THREAD","GUILD_PUBLIC_THREAD","GUILD_PRIVATE_THREAD","parent","threads","set","toJSON","props","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/Channel.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nlet CategoryChannel;\nlet DMChannel;\nlet NewsChannel;\nlet StageChannel;\nlet StoreChannel;\nlet TextChannel;\nlet ThreadChannel;\nlet VoiceChannel;\nconst { ChannelTypes, ThreadChannelTypes, VoiceBasedChannelTypes } = require('../util/Constants');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * Represents any channel on Discord.\n * @extends {Base}\n * @abstract\n */\nclass Channel extends Base {\n  constructor(client, data, immediatePatch = true) {\n    super(client);\n\n    const type = ChannelTypes[data.type];\n    /**\n     * The type of the channel\n     * @type {ChannelType}\n     */\n    this.type = type ?? 'UNKNOWN';\n\n    /**\n     * Whether the channel has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n\n    if (data && immediatePatch) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The channel's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n  }\n\n  /**\n   * The timestamp the channel was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the channel was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * Whether this Channel is a partial\n   * <info>This is always false outside of DM channels.</info>\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return false;\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the channel's mention instead of the Channel object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <#123456789012345678>!\n   * console.log(`Hello from ${channel}!`);\n   */\n  toString() {\n    return `<#${this.id}>`;\n  }\n\n  /**\n   * Deletes this channel.\n   * @returns {Promise<Channel>}\n   * @example\n   * // Delete the channel\n   * channel.delete()\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  delete() {\n    return this.client.api\n      .channels(this.id)\n      .delete()\n      .then(() => this);\n  }\n\n  /**\n   * Fetches this channel.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<Channel>}\n   */\n  fetch(force = true) {\n    return this.client.channels.fetch(this.id, { force });\n  }\n\n  /**\n   * Indicates whether this channel is {@link TextBasedChannels text-based}.\n   * @returns {boolean}\n   */\n  isText() {\n    return 'messages' in this;\n  }\n\n  /**\n   * Indicates whether this channel is voice-based\n   * ({@link VoiceChannel} or {@link StageChannel}).\n   * @returns {boolean}\n   */\n  isVoice() {\n    return VoiceBasedChannelTypes.includes(this.type);\n  }\n\n  /**\n   * Indicates whether this channel is a {@link ThreadChannel}.\n   * @returns {boolean}\n   */\n  isThread() {\n    return ThreadChannelTypes.includes(this.type);\n  }\n\n  static create(client, data, guild, { allowUnknownGuild, fromInteraction } = {}) {\n    if (!CategoryChannel) CategoryChannel = require('./CategoryChannel');\n    if (!DMChannel) DMChannel = require('./DMChannel');\n    if (!NewsChannel) NewsChannel = require('./NewsChannel');\n    if (!StageChannel) StageChannel = require('./StageChannel');\n    if (!StoreChannel) StoreChannel = require('./StoreChannel');\n    if (!TextChannel) TextChannel = require('./TextChannel');\n    if (!ThreadChannel) ThreadChannel = require('./ThreadChannel');\n    if (!VoiceChannel) VoiceChannel = require('./VoiceChannel');\n\n    let channel;\n    if (!data.guild_id && !guild) {\n      if ((data.recipients && data.type !== ChannelTypes.GROUP_DM) || data.type === ChannelTypes.DM) {\n        channel = new DMChannel(client, data);\n      } else if (data.type === ChannelTypes.GROUP_DM) {\n        const PartialGroupDMChannel = require('./PartialGroupDMChannel');\n        channel = new PartialGroupDMChannel(client, data);\n      }\n    } else {\n      if (!guild) guild = client.guilds.cache.get(data.guild_id);\n\n      if (guild || allowUnknownGuild) {\n        switch (data.type) {\n          case ChannelTypes.GUILD_TEXT: {\n            channel = new TextChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_VOICE: {\n            channel = new VoiceChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_CATEGORY: {\n            channel = new CategoryChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_NEWS: {\n            channel = new NewsChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_STORE: {\n            channel = new StoreChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_STAGE_VOICE: {\n            channel = new StageChannel(guild, data, client);\n            break;\n          }\n          case ChannelTypes.GUILD_NEWS_THREAD:\n          case ChannelTypes.GUILD_PUBLIC_THREAD:\n          case ChannelTypes.GUILD_PRIVATE_THREAD: {\n            channel = new ThreadChannel(guild, data, client, fromInteraction);\n            if (!allowUnknownGuild) channel.parent?.threads.cache.set(channel.id, channel);\n            break;\n          }\n        }\n        if (channel && !allowUnknownGuild) guild.channels?.cache.set(channel.id, channel);\n      }\n    }\n    return channel;\n  }\n\n  toJSON(...props) {\n    return super.toJSON({ createdTimestamp: true }, ...props);\n  }\n}\n\nmodule.exports = Channel;\n\n/**\n * @external APIChannel\n * @see {@link https://discord.com/developers/docs/resources/channel#channel-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}