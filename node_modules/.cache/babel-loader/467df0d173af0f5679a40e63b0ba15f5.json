{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nclass PresenceUpdateAction extends Action {\n  handle(data) {\n    let user = this.client.users.cache.get(data.user.id);\n    if (!user && data.user?.username) user = this.client.users._add(data.user);\n    if (!user) return;\n\n    if (data.user?.username) {\n      if (!user.equals(data.user)) this.client.actions.UserUpdate.handle(data.user);\n    }\n\n    const guild = this.client.guilds.cache.get(data.guild_id);\n    if (!guild) return;\n    const oldPresence = guild.presences.cache.get(user.id)?._clone() ?? null;\n    let member = guild.members.cache.get(user.id);\n\n    if (!member && data.status !== 'offline') {\n      member = guild.members._add({\n        user,\n        deaf: false,\n        mute: false\n      });\n      this.client.emit(Events.GUILD_MEMBER_AVAILABLE, member);\n    }\n\n    const newPresence = guild.presences._add(Object.assign(data, {\n      guild\n    }));\n\n    if (this.client.listenerCount(Events.PRESENCE_UPDATE) && !newPresence.equals(oldPresence)) {\n      /**\n       * Emitted whenever a guild member's presence (e.g. status, activity) is changed.\n       * @event Client#presenceUpdate\n       * @param {?Presence} oldPresence The presence before the update, if one at all\n       * @param {Presence} newPresence The presence after the update\n       */\n      this.client.emit(Events.PRESENCE_UPDATE, oldPresence, newPresence);\n    }\n  }\n\n}\n\nmodule.exports = PresenceUpdateAction;","map":{"version":3,"names":["Action","require","Events","PresenceUpdateAction","handle","data","user","client","users","cache","get","id","username","_add","equals","actions","UserUpdate","guild","guilds","guild_id","oldPresence","presences","_clone","member","members","status","deaf","mute","emit","GUILD_MEMBER_AVAILABLE","newPresence","Object","assign","listenerCount","PRESENCE_UPDATE","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/actions/PresenceUpdate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\n\nclass PresenceUpdateAction extends Action {\n  handle(data) {\n    let user = this.client.users.cache.get(data.user.id);\n    if (!user && data.user?.username) user = this.client.users._add(data.user);\n    if (!user) return;\n\n    if (data.user?.username) {\n      if (!user.equals(data.user)) this.client.actions.UserUpdate.handle(data.user);\n    }\n\n    const guild = this.client.guilds.cache.get(data.guild_id);\n    if (!guild) return;\n\n    const oldPresence = guild.presences.cache.get(user.id)?._clone() ?? null;\n    let member = guild.members.cache.get(user.id);\n    if (!member && data.status !== 'offline') {\n      member = guild.members._add({\n        user,\n        deaf: false,\n        mute: false,\n      });\n      this.client.emit(Events.GUILD_MEMBER_AVAILABLE, member);\n    }\n    const newPresence = guild.presences._add(Object.assign(data, { guild }));\n    if (this.client.listenerCount(Events.PRESENCE_UPDATE) && !newPresence.equals(oldPresence)) {\n      /**\n       * Emitted whenever a guild member's presence (e.g. status, activity) is changed.\n       * @event Client#presenceUpdate\n       * @param {?Presence} oldPresence The presence before the update, if one at all\n       * @param {Presence} newPresence The presence after the update\n       */\n      this.client.emit(Events.PRESENCE_UPDATE, oldPresence, newPresence);\n    }\n  }\n}\n\nmodule.exports = PresenceUpdateAction;\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,sBAAD,CAA1B;;AAEA,MAAME,oBAAN,SAAmCH,MAAnC,CAA0C;EACxCI,MAAM,CAACC,IAAD,EAAO;IACX,IAAIC,IAAI,GAAG,KAAKC,MAAL,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwBC,GAAxB,CAA4BL,IAAI,CAACC,IAAL,CAAUK,EAAtC,CAAX;IACA,IAAI,CAACL,IAAD,IAASD,IAAI,CAACC,IAAL,EAAWM,QAAxB,EAAkCN,IAAI,GAAG,KAAKC,MAAL,CAAYC,KAAZ,CAAkBK,IAAlB,CAAuBR,IAAI,CAACC,IAA5B,CAAP;IAClC,IAAI,CAACA,IAAL,EAAW;;IAEX,IAAID,IAAI,CAACC,IAAL,EAAWM,QAAf,EAAyB;MACvB,IAAI,CAACN,IAAI,CAACQ,MAAL,CAAYT,IAAI,CAACC,IAAjB,CAAL,EAA6B,KAAKC,MAAL,CAAYQ,OAAZ,CAAoBC,UAApB,CAA+BZ,MAA/B,CAAsCC,IAAI,CAACC,IAA3C;IAC9B;;IAED,MAAMW,KAAK,GAAG,KAAKV,MAAL,CAAYW,MAAZ,CAAmBT,KAAnB,CAAyBC,GAAzB,CAA6BL,IAAI,CAACc,QAAlC,CAAd;IACA,IAAI,CAACF,KAAL,EAAY;IAEZ,MAAMG,WAAW,GAAGH,KAAK,CAACI,SAAN,CAAgBZ,KAAhB,CAAsBC,GAAtB,CAA0BJ,IAAI,CAACK,EAA/B,GAAoCW,MAApC,MAAgD,IAApE;IACA,IAAIC,MAAM,GAAGN,KAAK,CAACO,OAAN,CAAcf,KAAd,CAAoBC,GAApB,CAAwBJ,IAAI,CAACK,EAA7B,CAAb;;IACA,IAAI,CAACY,MAAD,IAAWlB,IAAI,CAACoB,MAAL,KAAgB,SAA/B,EAA0C;MACxCF,MAAM,GAAGN,KAAK,CAACO,OAAN,CAAcX,IAAd,CAAmB;QAC1BP,IAD0B;QAE1BoB,IAAI,EAAE,KAFoB;QAG1BC,IAAI,EAAE;MAHoB,CAAnB,CAAT;MAKA,KAAKpB,MAAL,CAAYqB,IAAZ,CAAiB1B,MAAM,CAAC2B,sBAAxB,EAAgDN,MAAhD;IACD;;IACD,MAAMO,WAAW,GAAGb,KAAK,CAACI,SAAN,CAAgBR,IAAhB,CAAqBkB,MAAM,CAACC,MAAP,CAAc3B,IAAd,EAAoB;MAAEY;IAAF,CAApB,CAArB,CAApB;;IACA,IAAI,KAAKV,MAAL,CAAY0B,aAAZ,CAA0B/B,MAAM,CAACgC,eAAjC,KAAqD,CAACJ,WAAW,CAAChB,MAAZ,CAAmBM,WAAnB,CAA1D,EAA2F;MACzF;AACN;AACA;AACA;AACA;AACA;MACM,KAAKb,MAAL,CAAYqB,IAAZ,CAAiB1B,MAAM,CAACgC,eAAxB,EAAyCd,WAAzC,EAAsDU,WAAtD;IACD;EACF;;AAjCuC;;AAoC1CK,MAAM,CAACC,OAAP,GAAiBjC,oBAAjB"},"metadata":{},"sourceType":"script"}