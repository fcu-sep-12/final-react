{"ast":null,"code":"'use strict';\n\nconst CachedManager = require('./CachedManager');\n\nconst MessageReaction = require('../structures/MessageReaction');\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {CachedManager}\n */\n\n\nclass ReactionManager extends CachedManager {\n  constructor(message, iterable) {\n    super(message.client, MessageReaction, iterable);\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n\n    this.message = message;\n  }\n\n  _add(data, cache) {\n    return super._add(data, cache, {\n      id: data.emoji.id ?? data.emoji.name,\n      extras: [this.message]\n    });\n  }\n  /**\n   * The reaction cache of this manager\n   * @type {Collection<string|Snowflake, MessageReaction>}\n   * @name ReactionManager#cache\n   */\n\n  /**\n   * Data that can be resolved to a MessageReaction object. This can be:\n   * * A MessageReaction\n   * * A Snowflake\n   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n   */\n\n  /**\n   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} object.\n   * @method resolve\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?MessageReaction}\n   */\n\n  /**\n   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} id.\n   * @method resolveId\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Removes all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n\n\n  async removeAll() {\n    await this.client.api.channels(this.message.channelId).messages(this.message.id).reactions.delete();\n    return this.message;\n  }\n\n}\n\nmodule.exports = ReactionManager;","map":{"version":3,"names":["CachedManager","require","MessageReaction","ReactionManager","constructor","message","iterable","client","_add","data","cache","id","emoji","name","extras","removeAll","api","channels","channelId","messages","reactions","delete","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/ReactionManager.js"],"sourcesContent":["'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst MessageReaction = require('../structures/MessageReaction');\n\n/**\n * Manages API methods for reactions and holds their cache.\n * @extends {CachedManager}\n */\nclass ReactionManager extends CachedManager {\n  constructor(message, iterable) {\n    super(message.client, MessageReaction, iterable);\n\n    /**\n     * The message that this manager belongs to\n     * @type {Message}\n     */\n    this.message = message;\n  }\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.emoji.id ?? data.emoji.name, extras: [this.message] });\n  }\n\n  /**\n   * The reaction cache of this manager\n   * @type {Collection<string|Snowflake, MessageReaction>}\n   * @name ReactionManager#cache\n   */\n\n  /**\n   * Data that can be resolved to a MessageReaction object. This can be:\n   * * A MessageReaction\n   * * A Snowflake\n   * @typedef {MessageReaction|Snowflake} MessageReactionResolvable\n   */\n\n  /**\n   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} object.\n   * @method resolve\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?MessageReaction}\n   */\n\n  /**\n   * Resolves a {@link MessageReactionResolvable} to a {@link MessageReaction} id.\n   * @method resolveId\n   * @memberof ReactionManager\n   * @instance\n   * @param {MessageReactionResolvable} reaction The MessageReaction to resolve\n   * @returns {?Snowflake}\n   */\n\n  /**\n   * Removes all reactions from a message.\n   * @returns {Promise<Message>}\n   */\n  async removeAll() {\n    await this.client.api.channels(this.message.channelId).messages(this.message.id).reactions.delete();\n    return this.message;\n  }\n}\n\nmodule.exports = ReactionManager;\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,eAAe,GAAGD,OAAO,CAAC,+BAAD,CAA/B;AAEA;AACA;AACA;AACA;;;AACA,MAAME,eAAN,SAA8BH,aAA9B,CAA4C;EAC1CI,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoB;IAC7B,MAAMD,OAAO,CAACE,MAAd,EAAsBL,eAAtB,EAAuCI,QAAvC;IAEA;AACJ;AACA;AACA;;IACI,KAAKD,OAAL,GAAeA,OAAf;EACD;;EAEDG,IAAI,CAACC,IAAD,EAAOC,KAAP,EAAc;IAChB,OAAO,MAAMF,IAAN,CAAWC,IAAX,EAAiBC,KAAjB,EAAwB;MAAEC,EAAE,EAAEF,IAAI,CAACG,KAAL,CAAWD,EAAX,IAAiBF,IAAI,CAACG,KAAL,CAAWC,IAAlC;MAAwCC,MAAM,EAAE,CAAC,KAAKT,OAAN;IAAhD,CAAxB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;;;EACiB,MAATU,SAAS,GAAG;IAChB,MAAM,KAAKR,MAAL,CAAYS,GAAZ,CAAgBC,QAAhB,CAAyB,KAAKZ,OAAL,CAAaa,SAAtC,EAAiDC,QAAjD,CAA0D,KAAKd,OAAL,CAAaM,EAAvE,EAA2ES,SAA3E,CAAqFC,MAArF,EAAN;IACA,OAAO,KAAKhB,OAAZ;EACD;;AArDyC;;AAwD5CiB,MAAM,CAACC,OAAP,GAAiBpB,eAAjB"},"metadata":{},"sourceType":"script"}