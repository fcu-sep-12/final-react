{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst CachedManager = require('./CachedManager');\n\nconst ThreadManager = require('./ThreadManager');\n\nconst {\n  Error\n} = require('../errors');\n\nconst GuildChannel = require('../structures/GuildChannel');\n\nconst PermissionOverwrites = require('../structures/PermissionOverwrites');\n\nconst ThreadChannel = require('../structures/ThreadChannel');\n\nconst {\n  ChannelTypes,\n  ThreadChannelTypes\n} = require('../util/Constants');\n\nlet cacheWarningEmitted = false;\n/**\n * Manages API methods for GuildChannels and stores their cache.\n * @extends {CachedManager}\n */\n\nclass GuildChannelManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, GuildChannel, iterable);\n    const defaultCaching = this._cache.constructor.name === 'Collection' || (this._cache.maxSize === undefined || this._cache.maxSize === Infinity) && (this._cache.sweepFilter === undefined || this._cache.sweepFilter.isDefault);\n\n    if (!cacheWarningEmitted && !defaultCaching) {\n      cacheWarningEmitted = true;\n      process.emitWarning(`Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`, 'UnsupportedCacheOverwriteWarning');\n    }\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n\n\n    this.guild = guild;\n  }\n  /**\n   * The number of channels in this managers cache excluding thread channels\n   * that do not count towards a guild's maximum channels restriction.\n   * @type {number}\n   * @readonly\n   */\n\n\n  get channelCountWithoutThreads() {\n    return this.cache.reduce((acc, channel) => {\n      if (ThreadChannelTypes.includes(channel.type)) return acc;\n      return ++acc;\n    }, 0);\n  }\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildChannel|ThreadChannel>}\n   * @name GuildChannelManager#cache\n   */\n\n\n  _add(channel) {\n    const existing = this.cache.get(channel.id);\n    if (existing) return existing;\n    this.cache.set(channel.id, channel);\n    return channel;\n  }\n  /**\n   * Data that can be resolved to give a Guild Channel object. This can be:\n   * * A GuildChannel object\n   * * A ThreadChannel object\n   * * A Snowflake\n   * @typedef {GuildChannel|ThreadChannel|Snowflake} GuildChannelResolvable\n   */\n\n  /**\n   * Resolves a GuildChannelResolvable to a Channel object.\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?(GuildChannel|ThreadChannel)}\n   */\n\n\n  resolve(channel) {\n    if (channel instanceof ThreadChannel) return super.resolve(channel.id);\n    return super.resolve(channel);\n  }\n  /**\n   * Resolves a GuildChannelResolvable to a channel id.\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n\n  resolveId(channel) {\n    if (channel instanceof ThreadChannel) return super.resolveId(channel.id);\n    return super.resolveId(channel);\n  }\n  /**\n   * Options used to create a new channel in a guild.\n   * @typedef {Object} GuildChannelCreateOptions\n   * @property {string|number} [type='GUILD_TEXT'] The type of the new channel, either `GUILD_TEXT`, `GUILD_VOICE`,\n   * `GUILD_CATEGORY`, `GUILD_NEWS`, `GUILD_STORE`, or `GUILD_STAGE_VOICE`\n   * @property {string} [topic] The topic for the new channel\n   * @property {boolean} [nsfw] Whether the new channel is nsfw\n   * @property {number} [bitrate] Bitrate of the new channel in bits (only voice)\n   * @property {number} [userLimit] Maximum amount of users allowed in the new channel (only voice)\n   * @property {CategoryChannelResolvable} [parent] Parent of the new channel\n   * @property {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [permissionOverwrites]\n   * Permission overwrites of the new channel\n   * @property {number} [position] Position of the new channel\n   * @property {number} [rateLimitPerUser] The ratelimit per user for the new channel\n   * @property {string} [reason] Reason for creating the new channel\n   */\n\n  /**\n   * Creates a new channel in the guild.\n   * @param {string} name The name of the new channel\n   * @param {GuildChannelCreateOptions} [options={}] Options for creating the new channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Create a new text channel\n   * guild.channels.create('new-general', { reason: 'Needed a cool new channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Create a new channel with permission overwrites\n   * guild.channels.create('new-voice', {\n   *   type: 'GUILD_VOICE',\n   *   permissionOverwrites: [\n   *      {\n   *        id: message.author.id,\n   *        deny: [Permissions.FLAGS.VIEW_CHANNEL],\n   *     },\n   *   ],\n   * })\n   */\n\n\n  async create(name) {\n    let {\n      type,\n      topic,\n      nsfw,\n      bitrate,\n      userLimit,\n      parent,\n      permissionOverwrites,\n      position,\n      rateLimitPerUser,\n      reason\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (parent) parent = this.client.channels.resolveId(parent);\n\n    if (permissionOverwrites) {\n      permissionOverwrites = permissionOverwrites.map(o => PermissionOverwrites.resolve(o, this.guild));\n    }\n\n    const data = await this.client.api.guilds(this.guild.id).channels.post({\n      data: {\n        name,\n        topic,\n        type: typeof type === 'number' ? type : ChannelTypes[type] ?? ChannelTypes.GUILD_TEXT,\n        nsfw,\n        bitrate,\n        user_limit: userLimit,\n        parent_id: parent,\n        position,\n        permission_overwrites: permissionOverwrites,\n        rate_limit_per_user: rateLimitPerUser\n      },\n      reason\n    });\n    return this.client.actions.ChannelCreate.handle(data).channel;\n  }\n  /**\n   * Obtains one or more guild channels from Discord, or the channel cache if they're already available.\n   * @param {Snowflake} [id] The channel's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<?GuildChannel|Collection<Snowflake, GuildChannel>>}\n   * @example\n   * // Fetch all channels from the guild (excluding threads)\n   * message.guild.channels.fetch()\n   *   .then(channels => console.log(`There are ${channels.size} channels.`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single channel\n   * message.guild.channels.fetch('222197033908436994')\n   *   .then(channel => console.log(`The channel name is: ${channel.name}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetch(id) {\n    let {\n      cache = true,\n      force = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (id && !force) {\n      const existing = this.cache.get(id);\n      if (existing) return existing;\n    }\n\n    if (id) {\n      const data = await this.client.api.channels(id).get(); // Since this is the guild manager, throw if on a different guild\n\n      if (this.guild.id !== data.guild_id) throw new Error('GUILD_CHANNEL_UNOWNED');\n      return this.client.channels._add(data, this.guild, {\n        cache\n      });\n    }\n\n    const data = await this.client.api.guilds(this.guild.id).channels.get();\n    const channels = new Collection();\n\n    for (const channel of data) channels.set(channel.id, this.client.channels._add(channel, this.guild, {\n      cache\n    }));\n\n    return channels;\n  }\n  /**\n   * Obtains all active thread channels in the guild from Discord\n   * @param {boolean} [cache=true] Whether to cache the fetched data\n   * @returns {Promise<FetchedThreads>}\n   * @example\n   * // Fetch all threads from the guild\n   * message.guild.channels.fetchActiveThreads()\n   *   .then(fetched => console.log(`There are ${fetched.threads.size} threads.`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchActiveThreads() {\n    let cache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    const raw = await this.client.api.guilds(this.guild.id).threads.active.get();\n    return ThreadManager._mapThreads(raw, this.client, {\n      guild: this.guild,\n      cache\n    });\n  }\n\n}\n\nmodule.exports = GuildChannelManager;\n/**\n * @external APIActiveThreadsList\n * @see {@link https://discord.com/developers/docs/resources/guild#list-active-threads-response-body}\n */","map":{"version":3,"names":["Collection","require","CachedManager","ThreadManager","Error","GuildChannel","PermissionOverwrites","ThreadChannel","ChannelTypes","ThreadChannelTypes","cacheWarningEmitted","GuildChannelManager","constructor","guild","iterable","client","defaultCaching","_cache","name","maxSize","undefined","Infinity","sweepFilter","isDefault","process","emitWarning","channelCountWithoutThreads","cache","reduce","acc","channel","includes","type","_add","existing","get","id","set","resolve","resolveId","create","topic","nsfw","bitrate","userLimit","parent","permissionOverwrites","position","rateLimitPerUser","reason","channels","map","o","data","api","guilds","post","GUILD_TEXT","user_limit","parent_id","permission_overwrites","rate_limit_per_user","actions","ChannelCreate","handle","fetch","force","guild_id","fetchActiveThreads","raw","threads","active","_mapThreads","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/GuildChannelManager.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst CachedManager = require('./CachedManager');\nconst ThreadManager = require('./ThreadManager');\nconst { Error } = require('../errors');\nconst GuildChannel = require('../structures/GuildChannel');\nconst PermissionOverwrites = require('../structures/PermissionOverwrites');\nconst ThreadChannel = require('../structures/ThreadChannel');\nconst { ChannelTypes, ThreadChannelTypes } = require('../util/Constants');\n\nlet cacheWarningEmitted = false;\n\n/**\n * Manages API methods for GuildChannels and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildChannelManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, GuildChannel, iterable);\n    const defaultCaching =\n      this._cache.constructor.name === 'Collection' ||\n      ((this._cache.maxSize === undefined || this._cache.maxSize === Infinity) &&\n        (this._cache.sweepFilter === undefined || this._cache.sweepFilter.isDefault));\n    if (!cacheWarningEmitted && !defaultCaching) {\n      cacheWarningEmitted = true;\n      process.emitWarning(\n        `Overriding the cache handling for ${this.constructor.name} is unsupported and breaks functionality.`,\n        'UnsupportedCacheOverwriteWarning',\n      );\n    }\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The number of channels in this managers cache excluding thread channels\n   * that do not count towards a guild's maximum channels restriction.\n   * @type {number}\n   * @readonly\n   */\n  get channelCountWithoutThreads() {\n    return this.cache.reduce((acc, channel) => {\n      if (ThreadChannelTypes.includes(channel.type)) return acc;\n      return ++acc;\n    }, 0);\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, GuildChannel|ThreadChannel>}\n   * @name GuildChannelManager#cache\n   */\n\n  _add(channel) {\n    const existing = this.cache.get(channel.id);\n    if (existing) return existing;\n    this.cache.set(channel.id, channel);\n    return channel;\n  }\n\n  /**\n   * Data that can be resolved to give a Guild Channel object. This can be:\n   * * A GuildChannel object\n   * * A ThreadChannel object\n   * * A Snowflake\n   * @typedef {GuildChannel|ThreadChannel|Snowflake} GuildChannelResolvable\n   */\n\n  /**\n   * Resolves a GuildChannelResolvable to a Channel object.\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?(GuildChannel|ThreadChannel)}\n   */\n  resolve(channel) {\n    if (channel instanceof ThreadChannel) return super.resolve(channel.id);\n    return super.resolve(channel);\n  }\n\n  /**\n   * Resolves a GuildChannelResolvable to a channel id.\n   * @param {GuildChannelResolvable} channel The GuildChannel resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveId(channel) {\n    if (channel instanceof ThreadChannel) return super.resolveId(channel.id);\n    return super.resolveId(channel);\n  }\n\n  /**\n   * Options used to create a new channel in a guild.\n   * @typedef {Object} GuildChannelCreateOptions\n   * @property {string|number} [type='GUILD_TEXT'] The type of the new channel, either `GUILD_TEXT`, `GUILD_VOICE`,\n   * `GUILD_CATEGORY`, `GUILD_NEWS`, `GUILD_STORE`, or `GUILD_STAGE_VOICE`\n   * @property {string} [topic] The topic for the new channel\n   * @property {boolean} [nsfw] Whether the new channel is nsfw\n   * @property {number} [bitrate] Bitrate of the new channel in bits (only voice)\n   * @property {number} [userLimit] Maximum amount of users allowed in the new channel (only voice)\n   * @property {CategoryChannelResolvable} [parent] Parent of the new channel\n   * @property {OverwriteResolvable[]|Collection<Snowflake, OverwriteResolvable>} [permissionOverwrites]\n   * Permission overwrites of the new channel\n   * @property {number} [position] Position of the new channel\n   * @property {number} [rateLimitPerUser] The ratelimit per user for the new channel\n   * @property {string} [reason] Reason for creating the new channel\n   */\n\n  /**\n   * Creates a new channel in the guild.\n   * @param {string} name The name of the new channel\n   * @param {GuildChannelCreateOptions} [options={}] Options for creating the new channel\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Create a new text channel\n   * guild.channels.create('new-general', { reason: 'Needed a cool new channel' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Create a new channel with permission overwrites\n   * guild.channels.create('new-voice', {\n   *   type: 'GUILD_VOICE',\n   *   permissionOverwrites: [\n   *      {\n   *        id: message.author.id,\n   *        deny: [Permissions.FLAGS.VIEW_CHANNEL],\n   *     },\n   *   ],\n   * })\n   */\n  async create(\n    name,\n    { type, topic, nsfw, bitrate, userLimit, parent, permissionOverwrites, position, rateLimitPerUser, reason } = {},\n  ) {\n    if (parent) parent = this.client.channels.resolveId(parent);\n    if (permissionOverwrites) {\n      permissionOverwrites = permissionOverwrites.map(o => PermissionOverwrites.resolve(o, this.guild));\n    }\n\n    const data = await this.client.api.guilds(this.guild.id).channels.post({\n      data: {\n        name,\n        topic,\n        type: typeof type === 'number' ? type : ChannelTypes[type] ?? ChannelTypes.GUILD_TEXT,\n        nsfw,\n        bitrate,\n        user_limit: userLimit,\n        parent_id: parent,\n        position,\n        permission_overwrites: permissionOverwrites,\n        rate_limit_per_user: rateLimitPerUser,\n      },\n      reason,\n    });\n    return this.client.actions.ChannelCreate.handle(data).channel;\n  }\n\n  /**\n   * Obtains one or more guild channels from Discord, or the channel cache if they're already available.\n   * @param {Snowflake} [id] The channel's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<?GuildChannel|Collection<Snowflake, GuildChannel>>}\n   * @example\n   * // Fetch all channels from the guild (excluding threads)\n   * message.guild.channels.fetch()\n   *   .then(channels => console.log(`There are ${channels.size} channels.`))\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single channel\n   * message.guild.channels.fetch('222197033908436994')\n   *   .then(channel => console.log(`The channel name is: ${channel.name}`))\n   *   .catch(console.error);\n   */\n  async fetch(id, { cache = true, force = false } = {}) {\n    if (id && !force) {\n      const existing = this.cache.get(id);\n      if (existing) return existing;\n    }\n\n    if (id) {\n      const data = await this.client.api.channels(id).get();\n      // Since this is the guild manager, throw if on a different guild\n      if (this.guild.id !== data.guild_id) throw new Error('GUILD_CHANNEL_UNOWNED');\n      return this.client.channels._add(data, this.guild, { cache });\n    }\n\n    const data = await this.client.api.guilds(this.guild.id).channels.get();\n    const channels = new Collection();\n    for (const channel of data) channels.set(channel.id, this.client.channels._add(channel, this.guild, { cache }));\n    return channels;\n  }\n\n  /**\n   * Obtains all active thread channels in the guild from Discord\n   * @param {boolean} [cache=true] Whether to cache the fetched data\n   * @returns {Promise<FetchedThreads>}\n   * @example\n   * // Fetch all threads from the guild\n   * message.guild.channels.fetchActiveThreads()\n   *   .then(fetched => console.log(`There are ${fetched.threads.size} threads.`))\n   *   .catch(console.error);\n   */\n  async fetchActiveThreads(cache = true) {\n    const raw = await this.client.api.guilds(this.guild.id).threads.active.get();\n    return ThreadManager._mapThreads(raw, this.client, { guild: this.guild, cache });\n  }\n}\n\nmodule.exports = GuildChannelManager;\n\n/**\n * @external APIActiveThreadsList\n * @see {@link https://discord.com/developers/docs/resources/guild#list-active-threads-response-body}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}