{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst Base = require('./Base');\n/**\n * Represents the data about a public {@link StageInstance} in an {@link Invite}.\n * @extends {Base}\n */\n\n\nclass InviteStageInstance extends Base {\n  constructor(client, data, channelId, guildId) {\n    super(client);\n    /**\n     * The id of the stage channel this invite is for\n     * @type {Snowflake}\n     */\n\n    this.channelId = channelId;\n    /**\n     * The stage channel's guild id\n     * @type {Snowflake}\n     */\n\n    this.guildId = guildId;\n    /**\n     * The members speaking in the stage channel\n     * @type {Collection<Snowflake, GuildMember>}\n     */\n\n    this.members = new Collection();\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The topic of the stage instance\n     * @type {string}\n     */\n    this.topic = data.topic;\n    /**\n     * The number of users in the stage channel\n     * @type {number}\n     */\n\n    this.participantCount = data.participant_count;\n    /**\n     * The number of users speaking in the stage channel\n     * @type {number}\n     */\n\n    this.speakerCount = data.speaker_count;\n    this.members.clear();\n\n    for (const rawMember of data.members) {\n      const member = this.guild.members._add(rawMember);\n\n      this.members.set(member.id, member);\n    }\n  }\n  /**\n   * The stage channel this invite is for\n   * @type {?StageChannel}\n   * @readonly\n   */\n\n\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n  /**\n   * The guild of the stage channel this invite is for\n   * @type {?Guild}\n   * @readonly\n   */\n\n\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n}\n\nmodule.exports = InviteStageInstance;","map":{"version":3,"names":["Collection","require","Base","InviteStageInstance","constructor","client","data","channelId","guildId","members","_patch","topic","participantCount","participant_count","speakerCount","speaker_count","clear","rawMember","member","guild","_add","set","id","channel","channels","resolve","guilds","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/InviteStageInstance.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Base = require('./Base');\n\n/**\n * Represents the data about a public {@link StageInstance} in an {@link Invite}.\n * @extends {Base}\n */\nclass InviteStageInstance extends Base {\n  constructor(client, data, channelId, guildId) {\n    super(client);\n\n    /**\n     * The id of the stage channel this invite is for\n     * @type {Snowflake}\n     */\n    this.channelId = channelId;\n\n    /**\n     * The stage channel's guild id\n     * @type {Snowflake}\n     */\n    this.guildId = guildId;\n\n    /**\n     * The members speaking in the stage channel\n     * @type {Collection<Snowflake, GuildMember>}\n     */\n    this.members = new Collection();\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The topic of the stage instance\n     * @type {string}\n     */\n    this.topic = data.topic;\n\n    /**\n     * The number of users in the stage channel\n     * @type {number}\n     */\n    this.participantCount = data.participant_count;\n\n    /**\n     * The number of users speaking in the stage channel\n     * @type {number}\n     */\n    this.speakerCount = data.speaker_count;\n\n    this.members.clear();\n    for (const rawMember of data.members) {\n      const member = this.guild.members._add(rawMember);\n      this.members.set(member.id, member);\n    }\n  }\n\n  /**\n   * The stage channel this invite is for\n   * @type {?StageChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild of the stage channel this invite is for\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n}\n\nmodule.exports = InviteStageInstance;\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAiBC,OAAO,CAAC,uBAAD,CAA9B;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,QAAD,CAApB;AAEA;AACA;AACA;AACA;;;AACA,MAAME,mBAAN,SAAkCD,IAAlC,CAAuC;EACrCE,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,EAAmC;IAC5C,MAAMH,MAAN;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,SAAL,GAAiBA,SAAjB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAeA,OAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,IAAIT,UAAJ,EAAf;;IAEA,KAAKU,MAAL,CAAYJ,IAAZ;EACD;;EAEDI,MAAM,CAACJ,IAAD,EAAO;IACX;AACJ;AACA;AACA;IACI,KAAKK,KAAL,GAAaL,IAAI,CAACK,KAAlB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,gBAAL,GAAwBN,IAAI,CAACO,iBAA7B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,YAAL,GAAoBR,IAAI,CAACS,aAAzB;IAEA,KAAKN,OAAL,CAAaO,KAAb;;IACA,KAAK,MAAMC,SAAX,IAAwBX,IAAI,CAACG,OAA7B,EAAsC;MACpC,MAAMS,MAAM,GAAG,KAAKC,KAAL,CAAWV,OAAX,CAAmBW,IAAnB,CAAwBH,SAAxB,CAAf;;MACA,KAAKR,OAAL,CAAaY,GAAb,CAAiBH,MAAM,CAACI,EAAxB,EAA4BJ,MAA5B;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACa,IAAPK,OAAO,GAAG;IACZ,OAAO,KAAKlB,MAAL,CAAYmB,QAAZ,CAAqBC,OAArB,CAA6B,KAAKlB,SAAlC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACW,IAALY,KAAK,GAAG;IACV,OAAO,KAAKd,MAAL,CAAYqB,MAAZ,CAAmBD,OAAnB,CAA2B,KAAKjB,OAAhC,CAAP;EACD;;AAnEoC;;AAsEvCmB,MAAM,CAACC,OAAP,GAAiBzB,mBAAjB"},"metadata":{},"sourceType":"script"}