{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TypedArrayPredicate = void 0;\n\nconst predicate_1 = require(\"./predicate\");\n\nclass TypedArrayPredicate extends predicate_1.Predicate {\n  /**\n  Test a typed array to have a specific byte length.\n   @param byteLength - The byte length of the typed array.\n  */\n  byteLength(byteLength) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to have byte length of \\`${byteLength}\\`, got \\`${value.byteLength}\\``,\n      validator: value => value.byteLength === byteLength\n    });\n  }\n  /**\n  Test a typed array to have a minimum byte length.\n   @param byteLength - The minimum byte length of the typed array.\n  */\n\n\n  minByteLength(byteLength) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to have a minimum byte length of \\`${byteLength}\\`, got \\`${value.byteLength}\\``,\n      validator: value => value.byteLength >= byteLength,\n      negatedMessage: (value, label) => `Expected ${label} to have a maximum byte length of \\`${byteLength - 1}\\`, got \\`${value.byteLength}\\``\n    });\n  }\n  /**\n  Test a typed array to have a minimum byte length.\n   @param length - The minimum byte length of the typed array.\n  */\n\n\n  maxByteLength(byteLength) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to have a maximum byte length of \\`${byteLength}\\`, got \\`${value.byteLength}\\``,\n      validator: value => value.byteLength <= byteLength,\n      negatedMessage: (value, label) => `Expected ${label} to have a minimum byte length of \\`${byteLength + 1}\\`, got \\`${value.byteLength}\\``\n    });\n  }\n  /**\n  Test a typed array to have a specific length.\n   @param length - The length of the typed array.\n  */\n\n\n  length(length) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to have length \\`${length}\\`, got \\`${value.length}\\``,\n      validator: value => value.length === length\n    });\n  }\n  /**\n  Test a typed array to have a minimum length.\n   @param length - The minimum length of the typed array.\n  */\n\n\n  minLength(length) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to have a minimum length of \\`${length}\\`, got \\`${value.length}\\``,\n      validator: value => value.length >= length,\n      negatedMessage: (value, label) => `Expected ${label} to have a maximum length of \\`${length - 1}\\`, got \\`${value.length}\\``\n    });\n  }\n  /**\n  Test a typed array to have a maximum length.\n   @param length - The maximum length of the typed array.\n  */\n\n\n  maxLength(length) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to have a maximum length of \\`${length}\\`, got \\`${value.length}\\``,\n      validator: value => value.length <= length,\n      negatedMessage: (value, label) => `Expected ${label} to have a minimum length of \\`${length + 1}\\`, got \\`${value.length}\\``\n    });\n  }\n\n}\n\nexports.TypedArrayPredicate = TypedArrayPredicate;","map":{"version":3,"names":["Object","defineProperty","exports","value","TypedArrayPredicate","predicate_1","require","Predicate","byteLength","addValidator","message","label","validator","minByteLength","negatedMessage","maxByteLength","length","minLength","maxLength"],"sources":["C:/Users/ROUSER6/node_modules/ow/dist/predicates/typed-array.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TypedArrayPredicate = void 0;\nconst predicate_1 = require(\"./predicate\");\nclass TypedArrayPredicate extends predicate_1.Predicate {\n    /**\n    Test a typed array to have a specific byte length.\n\n    @param byteLength - The byte length of the typed array.\n    */\n    byteLength(byteLength) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have byte length of \\`${byteLength}\\`, got \\`${value.byteLength}\\``,\n            validator: value => value.byteLength === byteLength\n        });\n    }\n    /**\n    Test a typed array to have a minimum byte length.\n\n    @param byteLength - The minimum byte length of the typed array.\n    */\n    minByteLength(byteLength) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have a minimum byte length of \\`${byteLength}\\`, got \\`${value.byteLength}\\``,\n            validator: value => value.byteLength >= byteLength,\n            negatedMessage: (value, label) => `Expected ${label} to have a maximum byte length of \\`${byteLength - 1}\\`, got \\`${value.byteLength}\\``\n        });\n    }\n    /**\n    Test a typed array to have a minimum byte length.\n\n    @param length - The minimum byte length of the typed array.\n    */\n    maxByteLength(byteLength) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have a maximum byte length of \\`${byteLength}\\`, got \\`${value.byteLength}\\``,\n            validator: value => value.byteLength <= byteLength,\n            negatedMessage: (value, label) => `Expected ${label} to have a minimum byte length of \\`${byteLength + 1}\\`, got \\`${value.byteLength}\\``\n        });\n    }\n    /**\n    Test a typed array to have a specific length.\n\n    @param length - The length of the typed array.\n    */\n    length(length) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have length \\`${length}\\`, got \\`${value.length}\\``,\n            validator: value => value.length === length\n        });\n    }\n    /**\n    Test a typed array to have a minimum length.\n\n    @param length - The minimum length of the typed array.\n    */\n    minLength(length) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have a minimum length of \\`${length}\\`, got \\`${value.length}\\``,\n            validator: value => value.length >= length,\n            negatedMessage: (value, label) => `Expected ${label} to have a maximum length of \\`${length - 1}\\`, got \\`${value.length}\\``\n        });\n    }\n    /**\n    Test a typed array to have a maximum length.\n\n    @param length - The maximum length of the typed array.\n    */\n    maxLength(length) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have a maximum length of \\`${length}\\`, got \\`${value.length}\\``,\n            validator: value => value.length <= length,\n            negatedMessage: (value, label) => `Expected ${label} to have a minimum length of \\`${length + 1}\\`, got \\`${value.length}\\``\n        });\n    }\n}\nexports.TypedArrayPredicate = TypedArrayPredicate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}