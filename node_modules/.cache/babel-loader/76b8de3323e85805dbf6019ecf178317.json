{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  PrivacyLevels\n} = require('../util/Constants');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * Represents a stage instance.\n * @extends {Base}\n */\n\n\nclass StageInstance extends Base {\n  constructor(client, data) {\n    super(client);\n    /**\n     * The stage instance's id\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    /**\n     * Whether the stage instance has been deleted\n     * @type {boolean}\n     */\n\n    this.deleted = false;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The id of the guild associated with the stage channel\n     * @type {Snowflake}\n     */\n    this.guildId = data.guild_id;\n    /**\n     * The id of the channel associated with the stage channel\n     * @type {Snowflake}\n     */\n\n    this.channelId = data.channel_id;\n    /**\n     * The topic of the stage instance\n     * @type {string}\n     */\n\n    this.topic = data.topic;\n    /**\n     * The privacy level of the stage instance\n     * @type {PrivacyLevel}\n     */\n\n    this.privacyLevel = PrivacyLevels[data.privacy_level];\n    /**\n     * Whether or not stage discovery is disabled\n     * @type {?boolean}\n     */\n\n    this.discoverableDisabled = data.discoverable_disabled ?? null;\n  }\n  /**\n   * The stage channel associated with this stage instance\n   * @type {?StageChannel}\n   * @readonly\n   */\n\n\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n  /**\n   * The guild this stage instance belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n\n\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n  /**\n   * Edits this stage instance.\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * stageInstance.edit({ topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error)\n   */\n\n\n  edit(options) {\n    return this.guild.stageInstances.edit(this.channelId, options);\n  }\n  /**\n   * Deletes this stage instance.\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Delete a stage instance\n   * stageInstance.delete()\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n\n\n  async delete() {\n    await this.guild.stageInstances.delete(this.channelId);\n\n    const clone = this._clone();\n\n    clone.deleted = true;\n    return clone;\n  }\n  /**\n   * Sets the topic of this stage instance.\n   * @param {string} topic The topic for the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Set topic of a stage instance\n   * stageInstance.setTopic('new topic')\n   *  .then(stageInstance => console.log(`Set the topic to: ${stageInstance.topic}`))\n   *  .catch(console.error);\n   */\n\n\n  setTopic(topic) {\n    return this.guild.stageInstances.edit(this.channelId, {\n      topic\n    });\n  }\n  /**\n   * The timestamp this stage instances was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time this stage instance was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n}\n\nmodule.exports = StageInstance;","map":{"version":3,"names":["Base","require","PrivacyLevels","SnowflakeUtil","StageInstance","constructor","client","data","id","deleted","_patch","guildId","guild_id","channelId","channel_id","topic","privacyLevel","privacy_level","discoverableDisabled","discoverable_disabled","channel","channels","resolve","guild","guilds","edit","options","stageInstances","delete","clone","_clone","setTopic","createdTimestamp","deconstruct","timestamp","createdAt","Date","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/StageInstance.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { PrivacyLevels } = require('../util/Constants');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * Represents a stage instance.\n * @extends {Base}\n */\nclass StageInstance extends Base {\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The stage instance's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Whether the stage instance has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The id of the guild associated with the stage channel\n     * @type {Snowflake}\n     */\n    this.guildId = data.guild_id;\n\n    /**\n     * The id of the channel associated with the stage channel\n     * @type {Snowflake}\n     */\n    this.channelId = data.channel_id;\n\n    /**\n     * The topic of the stage instance\n     * @type {string}\n     */\n    this.topic = data.topic;\n\n    /**\n     * The privacy level of the stage instance\n     * @type {PrivacyLevel}\n     */\n    this.privacyLevel = PrivacyLevels[data.privacy_level];\n\n    /**\n     * Whether or not stage discovery is disabled\n     * @type {?boolean}\n     */\n    this.discoverableDisabled = data.discoverable_disabled ?? null;\n  }\n\n  /**\n   * The stage channel associated with this stage instance\n   * @type {?StageChannel}\n   * @readonly\n   */\n  get channel() {\n    return this.client.channels.resolve(this.channelId);\n  }\n\n  /**\n   * The guild this stage instance belongs to\n   * @type {?Guild}\n   * @readonly\n   */\n  get guild() {\n    return this.client.guilds.resolve(this.guildId);\n  }\n\n  /**\n   * Edits this stage instance.\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * stageInstance.edit({ topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error)\n   */\n  edit(options) {\n    return this.guild.stageInstances.edit(this.channelId, options);\n  }\n\n  /**\n   * Deletes this stage instance.\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Delete a stage instance\n   * stageInstance.delete()\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async delete() {\n    await this.guild.stageInstances.delete(this.channelId);\n    const clone = this._clone();\n    clone.deleted = true;\n    return clone;\n  }\n\n  /**\n   * Sets the topic of this stage instance.\n   * @param {string} topic The topic for the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Set topic of a stage instance\n   * stageInstance.setTopic('new topic')\n   *  .then(stageInstance => console.log(`Set the topic to: ${stageInstance.topic}`))\n   *  .catch(console.error);\n   */\n  setTopic(topic) {\n    return this.guild.stageInstances.edit(this.channelId, { topic });\n  }\n\n  /**\n   * The timestamp this stage instances was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time this stage instance was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n}\n\nmodule.exports = StageInstance;\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAM;EAAEC;AAAF,IAAoBD,OAAO,CAAC,mBAAD,CAAjC;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,uBAAD,CAA7B;AAEA;AACA;AACA;AACA;;;AACA,MAAMG,aAAN,SAA4BJ,IAA5B,CAAiC;EAC/BK,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACxB,MAAMD,MAAN;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,EAAL,GAAUD,IAAI,CAACC,EAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,KAAf;;IAEA,KAAKC,MAAL,CAAYH,IAAZ;EACD;;EAEDG,MAAM,CAACH,IAAD,EAAO;IACX;AACJ;AACA;AACA;IACI,KAAKI,OAAL,GAAeJ,IAAI,CAACK,QAApB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiBN,IAAI,CAACO,UAAtB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,KAAL,GAAaR,IAAI,CAACQ,KAAlB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,YAAL,GAAoBd,aAAa,CAACK,IAAI,CAACU,aAAN,CAAjC;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,oBAAL,GAA4BX,IAAI,CAACY,qBAAL,IAA8B,IAA1D;EACD;EAED;AACF;AACA;AACA;AACA;;;EACa,IAAPC,OAAO,GAAG;IACZ,OAAO,KAAKd,MAAL,CAAYe,QAAZ,CAAqBC,OAArB,CAA6B,KAAKT,SAAlC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACW,IAALU,KAAK,GAAG;IACV,OAAO,KAAKjB,MAAL,CAAYkB,MAAZ,CAAmBF,OAAnB,CAA2B,KAAKX,OAAhC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEc,IAAI,CAACC,OAAD,EAAU;IACZ,OAAO,KAAKH,KAAL,CAAWI,cAAX,CAA0BF,IAA1B,CAA+B,KAAKZ,SAApC,EAA+Ca,OAA/C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACc,MAANE,MAAM,GAAG;IACb,MAAM,KAAKL,KAAL,CAAWI,cAAX,CAA0BC,MAA1B,CAAiC,KAAKf,SAAtC,CAAN;;IACA,MAAMgB,KAAK,GAAG,KAAKC,MAAL,EAAd;;IACAD,KAAK,CAACpB,OAAN,GAAgB,IAAhB;IACA,OAAOoB,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEE,QAAQ,CAAChB,KAAD,EAAQ;IACd,OAAO,KAAKQ,KAAL,CAAWI,cAAX,CAA0BF,IAA1B,CAA+B,KAAKZ,SAApC,EAA+C;MAAEE;IAAF,CAA/C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACsB,IAAhBiB,gBAAgB,GAAG;IACrB,OAAO7B,aAAa,CAAC8B,WAAd,CAA0B,KAAKzB,EAA/B,EAAmC0B,SAA1C;EACD;EAED;AACF;AACA;AACA;AACA;;;EACe,IAATC,SAAS,GAAG;IACd,OAAO,IAAIC,IAAJ,CAAS,KAAKJ,gBAAd,CAAP;EACD;;AAjI8B;;AAoIjCK,MAAM,CAACC,OAAP,GAAiBlC,aAAjB"},"metadata":{},"sourceType":"script"}