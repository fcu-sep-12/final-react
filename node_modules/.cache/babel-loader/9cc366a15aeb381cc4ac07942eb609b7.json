{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Events,\n  VoiceBasedChannelTypes\n} = require('../../util/Constants');\n\nconst {\n  PartialTypes\n} = require('../../util/Constants');\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id',\n     // If originating from a guild\n     guild_id: 'id',\n     member: { ..., user: { ... } } }\n*/\n\n\nclass MessageReactionAdd extends Action {\n  handle(data) {\n    if (!data.emoji) return false;\n    const user = this.getUserFromMember(data);\n    if (!user) return false; // Verify channel\n\n    const channel = this.getChannel(data);\n    if (!channel || VoiceBasedChannelTypes.includes(channel.type)) return false; // Verify message\n\n    const message = this.getMessage(data, channel);\n    if (!message) return false; // Verify reaction\n\n    if (message.partial && !this.client.options.partials.includes(PartialTypes.REACTION)) return false;\n    const existing = message.reactions.cache.get(data.emoji.id ?? data.emoji.name);\n    if (existing?.users.cache.has(user.id)) return {\n      message,\n      reaction: existing,\n      user\n    };\n\n    const reaction = message.reactions._add({\n      emoji: data.emoji,\n      count: message.partial ? null : 0,\n      me: user.id === this.client.user.id\n    });\n\n    if (!reaction) return false;\n\n    reaction._add(user);\n    /**\n     * Emitted whenever a reaction is added to a cached message.\n     * @event Client#messageReactionAdd\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user that applied the guild or reaction emoji\n     */\n\n\n    this.client.emit(Events.MESSAGE_REACTION_ADD, reaction, user);\n    return {\n      message,\n      reaction,\n      user\n    };\n  }\n\n}\n\nmodule.exports = MessageReactionAdd;","map":{"version":3,"names":["Action","require","Events","VoiceBasedChannelTypes","PartialTypes","MessageReactionAdd","handle","data","emoji","user","getUserFromMember","channel","getChannel","includes","type","message","getMessage","partial","client","options","partials","REACTION","existing","reactions","cache","get","id","name","users","has","reaction","_add","count","me","emit","MESSAGE_REACTION_ADD","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/actions/MessageReactionAdd.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events, VoiceBasedChannelTypes } = require('../../util/Constants');\nconst { PartialTypes } = require('../../util/Constants');\n\n/*\n{ user_id: 'id',\n     message_id: 'id',\n     emoji: { name: '�', id: null },\n     channel_id: 'id',\n     // If originating from a guild\n     guild_id: 'id',\n     member: { ..., user: { ... } } }\n*/\n\nclass MessageReactionAdd extends Action {\n  handle(data) {\n    if (!data.emoji) return false;\n\n    const user = this.getUserFromMember(data);\n    if (!user) return false;\n\n    // Verify channel\n    const channel = this.getChannel(data);\n    if (!channel || VoiceBasedChannelTypes.includes(channel.type)) return false;\n\n    // Verify message\n    const message = this.getMessage(data, channel);\n    if (!message) return false;\n\n    // Verify reaction\n    if (message.partial && !this.client.options.partials.includes(PartialTypes.REACTION)) return false;\n    const existing = message.reactions.cache.get(data.emoji.id ?? data.emoji.name);\n    if (existing?.users.cache.has(user.id)) return { message, reaction: existing, user };\n    const reaction = message.reactions._add({\n      emoji: data.emoji,\n      count: message.partial ? null : 0,\n      me: user.id === this.client.user.id,\n    });\n    if (!reaction) return false;\n    reaction._add(user);\n    /**\n     * Emitted whenever a reaction is added to a cached message.\n     * @event Client#messageReactionAdd\n     * @param {MessageReaction} messageReaction The reaction object\n     * @param {User} user The user that applied the guild or reaction emoji\n     */\n    this.client.emit(Events.MESSAGE_REACTION_ADD, reaction, user);\n\n    return { message, reaction, user };\n  }\n}\n\nmodule.exports = MessageReactionAdd;\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;EAAEC,MAAF;EAAUC;AAAV,IAAqCF,OAAO,CAAC,sBAAD,CAAlD;;AACA,MAAM;EAAEG;AAAF,IAAmBH,OAAO,CAAC,sBAAD,CAAhC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMI,kBAAN,SAAiCL,MAAjC,CAAwC;EACtCM,MAAM,CAACC,IAAD,EAAO;IACX,IAAI,CAACA,IAAI,CAACC,KAAV,EAAiB,OAAO,KAAP;IAEjB,MAAMC,IAAI,GAAG,KAAKC,iBAAL,CAAuBH,IAAvB,CAAb;IACA,IAAI,CAACE,IAAL,EAAW,OAAO,KAAP,CAJA,CAMX;;IACA,MAAME,OAAO,GAAG,KAAKC,UAAL,CAAgBL,IAAhB,CAAhB;IACA,IAAI,CAACI,OAAD,IAAYR,sBAAsB,CAACU,QAAvB,CAAgCF,OAAO,CAACG,IAAxC,CAAhB,EAA+D,OAAO,KAAP,CARpD,CAUX;;IACA,MAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBT,IAAhB,EAAsBI,OAAtB,CAAhB;IACA,IAAI,CAACI,OAAL,EAAc,OAAO,KAAP,CAZH,CAcX;;IACA,IAAIA,OAAO,CAACE,OAAR,IAAmB,CAAC,KAAKC,MAAL,CAAYC,OAAZ,CAAoBC,QAApB,CAA6BP,QAA7B,CAAsCT,YAAY,CAACiB,QAAnD,CAAxB,EAAsF,OAAO,KAAP;IACtF,MAAMC,QAAQ,GAAGP,OAAO,CAACQ,SAAR,CAAkBC,KAAlB,CAAwBC,GAAxB,CAA4BlB,IAAI,CAACC,KAAL,CAAWkB,EAAX,IAAiBnB,IAAI,CAACC,KAAL,CAAWmB,IAAxD,CAAjB;IACA,IAAIL,QAAQ,EAAEM,KAAV,CAAgBJ,KAAhB,CAAsBK,GAAtB,CAA0BpB,IAAI,CAACiB,EAA/B,CAAJ,EAAwC,OAAO;MAAEX,OAAF;MAAWe,QAAQ,EAAER,QAArB;MAA+Bb;IAA/B,CAAP;;IACxC,MAAMqB,QAAQ,GAAGf,OAAO,CAACQ,SAAR,CAAkBQ,IAAlB,CAAuB;MACtCvB,KAAK,EAAED,IAAI,CAACC,KAD0B;MAEtCwB,KAAK,EAAEjB,OAAO,CAACE,OAAR,GAAkB,IAAlB,GAAyB,CAFM;MAGtCgB,EAAE,EAAExB,IAAI,CAACiB,EAAL,KAAY,KAAKR,MAAL,CAAYT,IAAZ,CAAiBiB;IAHK,CAAvB,CAAjB;;IAKA,IAAI,CAACI,QAAL,EAAe,OAAO,KAAP;;IACfA,QAAQ,CAACC,IAAT,CAActB,IAAd;IACA;AACJ;AACA;AACA;AACA;AACA;;;IACI,KAAKS,MAAL,CAAYgB,IAAZ,CAAiBhC,MAAM,CAACiC,oBAAxB,EAA8CL,QAA9C,EAAwDrB,IAAxD;IAEA,OAAO;MAAEM,OAAF;MAAWe,QAAX;MAAqBrB;IAArB,CAAP;EACD;;AAnCqC;;AAsCxC2B,MAAM,CAACC,OAAP,GAAiBhC,kBAAjB"},"metadata":{},"sourceType":"script"}