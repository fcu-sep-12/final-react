{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NumberPredicate = void 0;\n\nconst is_1 = require(\"@sindresorhus/is\");\n\nconst predicate_1 = require(\"./predicate\");\n\nclass NumberPredicate extends predicate_1.Predicate {\n  /**\n  @hidden\n  */\n  constructor(options) {\n    super('number', options);\n  }\n  /**\n  Test a number to be in a specified range.\n   @param start - Start of the range.\n  @param end - End of the range.\n  */\n\n\n  inRange(start, end) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be in range [${start}..${end}], got ${value}`,\n      validator: value => is_1.default.inRange(value, [start, end])\n    });\n  }\n  /**\n  Test a number to be greater than the provided value.\n   @param number - Minimum value.\n  */\n\n\n  greaterThan(number) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be greater than ${number}, got ${value}`,\n      validator: value => value > number\n    });\n  }\n  /**\n  Test a number to be greater than or equal to the provided value.\n   @param number - Minimum value.\n  */\n\n\n  greaterThanOrEqual(number) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be greater than or equal to ${number}, got ${value}`,\n      validator: value => value >= number\n    });\n  }\n  /**\n  Test a number to be less than the provided value.\n   @param number - Maximum value.\n  */\n\n\n  lessThan(number) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be less than ${number}, got ${value}`,\n      validator: value => value < number\n    });\n  }\n  /**\n  Test a number to be less than or equal to the provided value.\n   @param number - Minimum value.\n  */\n\n\n  lessThanOrEqual(number) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be less than or equal to ${number}, got ${value}`,\n      validator: value => value <= number\n    });\n  }\n  /**\n  Test a number to be equal to a specified number.\n   @param expected - Expected value to match.\n  */\n\n\n  equal(expected) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be equal to ${expected}, got ${value}`,\n      validator: value => value === expected\n    });\n  }\n  /**\n  Test if a number is an element of the provided list.\n   @param list - List of possible values.\n  */\n\n\n  oneOf(list) {\n    return this.addValidator({\n      message: (value, label) => {\n        let printedList = JSON.stringify(list);\n\n        if (list.length > 10) {\n          const overflow = list.length - 10;\n          printedList = JSON.stringify(list.slice(0, 10)).replace(/]$/, `,…+${overflow} more]`);\n        }\n\n        return `Expected ${label} to be one of \\`${printedList}\\`, got ${value}`;\n      },\n      validator: value => list.includes(value)\n    });\n  }\n  /**\n  Test a number to be an integer.\n  */\n\n\n  get integer() {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be an integer, got ${value}`,\n      validator: value => is_1.default.integer(value)\n    });\n  }\n  /**\n  Test a number to be finite.\n  */\n\n\n  get finite() {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be finite, got ${value}`,\n      validator: value => !is_1.default.infinite(value)\n    });\n  }\n  /**\n  Test a number to be infinite.\n  */\n\n\n  get infinite() {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be infinite, got ${value}`,\n      validator: value => is_1.default.infinite(value)\n    });\n  }\n  /**\n  Test a number to be positive.\n  */\n\n\n  get positive() {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be positive, got ${value}`,\n      validator: value => value > 0\n    });\n  }\n  /**\n  Test a number to be negative.\n  */\n\n\n  get negative() {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be negative, got ${value}`,\n      validator: value => value < 0\n    });\n  }\n  /**\n  Test a number to be an integer or infinite.\n  */\n\n\n  get integerOrInfinite() {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be an integer or infinite, got ${value}`,\n      validator: value => is_1.default.integer(value) || is_1.default.infinite(value)\n    });\n  }\n  /**\n  Test a number to be in a valid range for a 8-bit unsigned integer.\n  */\n\n\n  get uint8() {\n    return this.integer.inRange(0, 255);\n  }\n  /**\n  Test a number to be in a valid range for a 16-bit unsigned integer.\n  */\n\n\n  get uint16() {\n    return this.integer.inRange(0, 65535);\n  }\n  /**\n  Test a number to be in a valid range for a 32-bit unsigned integer.\n  */\n\n\n  get uint32() {\n    return this.integer.inRange(0, 4294967295);\n  }\n  /**\n  Test a number to be in a valid range for a 8-bit signed integer.\n  */\n\n\n  get int8() {\n    return this.integer.inRange(-128, 127);\n  }\n  /**\n  Test a number to be in a valid range for a 16-bit signed integer.\n  */\n\n\n  get int16() {\n    return this.integer.inRange(-32768, 32767);\n  }\n  /**\n  Test a number to be in a valid range for a 32-bit signed integer.\n  */\n\n\n  get int32() {\n    return this.integer.inRange(-2147483648, 2147483647);\n  }\n\n}\n\nexports.NumberPredicate = NumberPredicate;","map":{"version":3,"names":["Object","defineProperty","exports","value","NumberPredicate","is_1","require","predicate_1","Predicate","constructor","options","inRange","start","end","addValidator","message","label","validator","default","greaterThan","number","greaterThanOrEqual","lessThan","lessThanOrEqual","equal","expected","oneOf","list","printedList","JSON","stringify","length","overflow","slice","replace","includes","integer","finite","infinite","positive","negative","integerOrInfinite","uint8","uint16","uint32","int8","int16","int32"],"sources":["C:/Users/ROUSER6/node_modules/ow/dist/predicates/number.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NumberPredicate = void 0;\nconst is_1 = require(\"@sindresorhus/is\");\nconst predicate_1 = require(\"./predicate\");\nclass NumberPredicate extends predicate_1.Predicate {\n    /**\n    @hidden\n    */\n    constructor(options) {\n        super('number', options);\n    }\n    /**\n    Test a number to be in a specified range.\n\n    @param start - Start of the range.\n    @param end - End of the range.\n    */\n    inRange(start, end) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be in range [${start}..${end}], got ${value}`,\n            validator: value => is_1.default.inRange(value, [start, end])\n        });\n    }\n    /**\n    Test a number to be greater than the provided value.\n\n    @param number - Minimum value.\n    */\n    greaterThan(number) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be greater than ${number}, got ${value}`,\n            validator: value => value > number\n        });\n    }\n    /**\n    Test a number to be greater than or equal to the provided value.\n\n    @param number - Minimum value.\n    */\n    greaterThanOrEqual(number) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be greater than or equal to ${number}, got ${value}`,\n            validator: value => value >= number\n        });\n    }\n    /**\n    Test a number to be less than the provided value.\n\n    @param number - Maximum value.\n    */\n    lessThan(number) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be less than ${number}, got ${value}`,\n            validator: value => value < number\n        });\n    }\n    /**\n    Test a number to be less than or equal to the provided value.\n\n    @param number - Minimum value.\n    */\n    lessThanOrEqual(number) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be less than or equal to ${number}, got ${value}`,\n            validator: value => value <= number\n        });\n    }\n    /**\n    Test a number to be equal to a specified number.\n\n    @param expected - Expected value to match.\n    */\n    equal(expected) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be equal to ${expected}, got ${value}`,\n            validator: value => value === expected\n        });\n    }\n    /**\n    Test if a number is an element of the provided list.\n\n    @param list - List of possible values.\n    */\n    oneOf(list) {\n        return this.addValidator({\n            message: (value, label) => {\n                let printedList = JSON.stringify(list);\n                if (list.length > 10) {\n                    const overflow = list.length - 10;\n                    printedList = JSON.stringify(list.slice(0, 10)).replace(/]$/, `,…+${overflow} more]`);\n                }\n                return `Expected ${label} to be one of \\`${printedList}\\`, got ${value}`;\n            },\n            validator: value => list.includes(value)\n        });\n    }\n    /**\n    Test a number to be an integer.\n    */\n    get integer() {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be an integer, got ${value}`,\n            validator: value => is_1.default.integer(value)\n        });\n    }\n    /**\n    Test a number to be finite.\n    */\n    get finite() {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be finite, got ${value}`,\n            validator: value => !is_1.default.infinite(value)\n        });\n    }\n    /**\n    Test a number to be infinite.\n    */\n    get infinite() {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be infinite, got ${value}`,\n            validator: value => is_1.default.infinite(value)\n        });\n    }\n    /**\n    Test a number to be positive.\n    */\n    get positive() {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be positive, got ${value}`,\n            validator: value => value > 0\n        });\n    }\n    /**\n    Test a number to be negative.\n    */\n    get negative() {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be negative, got ${value}`,\n            validator: value => value < 0\n        });\n    }\n    /**\n    Test a number to be an integer or infinite.\n    */\n    get integerOrInfinite() {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be an integer or infinite, got ${value}`,\n            validator: value => is_1.default.integer(value) || is_1.default.infinite(value)\n        });\n    }\n    /**\n    Test a number to be in a valid range for a 8-bit unsigned integer.\n    */\n    get uint8() {\n        return this.integer.inRange(0, 255);\n    }\n    /**\n    Test a number to be in a valid range for a 16-bit unsigned integer.\n    */\n    get uint16() {\n        return this.integer.inRange(0, 65535);\n    }\n    /**\n    Test a number to be in a valid range for a 32-bit unsigned integer.\n    */\n    get uint32() {\n        return this.integer.inRange(0, 4294967295);\n    }\n    /**\n    Test a number to be in a valid range for a 8-bit signed integer.\n    */\n    get int8() {\n        return this.integer.inRange(-128, 127);\n    }\n    /**\n    Test a number to be in a valid range for a 16-bit signed integer.\n    */\n    get int16() {\n        return this.integer.inRange(-32768, 32767);\n    }\n    /**\n    Test a number to be in a valid range for a 32-bit signed integer.\n    */\n    get int32() {\n        return this.integer.inRange(-2147483648, 2147483647);\n    }\n}\nexports.NumberPredicate = NumberPredicate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}