{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst Action = require('./Action');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nclass ThreadListSyncAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (!guild) return {};\n\n    if (data.channel_ids) {\n      for (const id of data.channel_ids) {\n        const channel = client.channels.resolve(id);\n        if (channel) this.removeStale(channel);\n      }\n    } else {\n      for (const channel of guild.channels.cache.values()) {\n        this.removeStale(channel);\n      }\n    }\n\n    const syncedThreads = data.threads.reduce((coll, rawThread) => {\n      const thread = client.channels._add(rawThread);\n\n      return coll.set(thread.id, thread);\n    }, new Collection());\n\n    for (const rawMember of Object.values(data.members)) {\n      // Discord sends the thread id as id in this object\n      const thread = client.channels.cache.get(rawMember.id);\n\n      if (thread) {\n        thread.members._add(rawMember);\n      }\n    }\n    /**\n     * Emitted whenever the client user gains access to a text or news channel that contains threads\n     * @event Client#threadListSync\n     * @param {Collection<Snowflake, ThreadChannel>} threads The threads that were synced\n     */\n\n\n    client.emit(Events.THREAD_LIST_SYNC, syncedThreads);\n    return {\n      syncedThreads\n    };\n  }\n\n  removeStale(channel) {\n    channel.threads?.cache.forEach(thread => {\n      if (!thread.archived) {\n        this.client.channels._remove(thread.id);\n      }\n    });\n  }\n\n}\n\nmodule.exports = ThreadListSyncAction;","map":{"version":3,"names":["Collection","require","Action","Events","ThreadListSyncAction","handle","data","client","guild","guilds","cache","get","guild_id","channel_ids","id","channel","channels","resolve","removeStale","values","syncedThreads","threads","reduce","coll","rawThread","thread","_add","set","rawMember","Object","members","emit","THREAD_LIST_SYNC","forEach","archived","_remove","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/actions/ThreadListSync.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\n\nclass ThreadListSyncAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (!guild) return {};\n\n    if (data.channel_ids) {\n      for (const id of data.channel_ids) {\n        const channel = client.channels.resolve(id);\n        if (channel) this.removeStale(channel);\n      }\n    } else {\n      for (const channel of guild.channels.cache.values()) {\n        this.removeStale(channel);\n      }\n    }\n\n    const syncedThreads = data.threads.reduce((coll, rawThread) => {\n      const thread = client.channels._add(rawThread);\n      return coll.set(thread.id, thread);\n    }, new Collection());\n\n    for (const rawMember of Object.values(data.members)) {\n      // Discord sends the thread id as id in this object\n      const thread = client.channels.cache.get(rawMember.id);\n      if (thread) {\n        thread.members._add(rawMember);\n      }\n    }\n\n    /**\n     * Emitted whenever the client user gains access to a text or news channel that contains threads\n     * @event Client#threadListSync\n     * @param {Collection<Snowflake, ThreadChannel>} threads The threads that were synced\n     */\n    client.emit(Events.THREAD_LIST_SYNC, syncedThreads);\n\n    return {\n      syncedThreads,\n    };\n  }\n\n  removeStale(channel) {\n    channel.threads?.cache.forEach(thread => {\n      if (!thread.archived) {\n        this.client.channels._remove(thread.id);\n      }\n    });\n  }\n}\n\nmodule.exports = ThreadListSyncAction;\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAiBC,OAAO,CAAC,uBAAD,CAA9B;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;EAAEE;AAAF,IAAaF,OAAO,CAAC,sBAAD,CAA1B;;AAEA,MAAMG,oBAAN,SAAmCF,MAAnC,CAA0C;EACxCG,MAAM,CAACC,IAAD,EAAO;IACX,MAAMC,MAAM,GAAG,KAAKA,MAApB;IAEA,MAAMC,KAAK,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoBC,GAApB,CAAwBL,IAAI,CAACM,QAA7B,CAAd;IACA,IAAI,CAACJ,KAAL,EAAY,OAAO,EAAP;;IAEZ,IAAIF,IAAI,CAACO,WAAT,EAAsB;MACpB,KAAK,MAAMC,EAAX,IAAiBR,IAAI,CAACO,WAAtB,EAAmC;QACjC,MAAME,OAAO,GAAGR,MAAM,CAACS,QAAP,CAAgBC,OAAhB,CAAwBH,EAAxB,CAAhB;QACA,IAAIC,OAAJ,EAAa,KAAKG,WAAL,CAAiBH,OAAjB;MACd;IACF,CALD,MAKO;MACL,KAAK,MAAMA,OAAX,IAAsBP,KAAK,CAACQ,QAAN,CAAeN,KAAf,CAAqBS,MAArB,EAAtB,EAAqD;QACnD,KAAKD,WAAL,CAAiBH,OAAjB;MACD;IACF;;IAED,MAAMK,aAAa,GAAGd,IAAI,CAACe,OAAL,CAAaC,MAAb,CAAoB,CAACC,IAAD,EAAOC,SAAP,KAAqB;MAC7D,MAAMC,MAAM,GAAGlB,MAAM,CAACS,QAAP,CAAgBU,IAAhB,CAAqBF,SAArB,CAAf;;MACA,OAAOD,IAAI,CAACI,GAAL,CAASF,MAAM,CAACX,EAAhB,EAAoBW,MAApB,CAAP;IACD,CAHqB,EAGnB,IAAIzB,UAAJ,EAHmB,CAAtB;;IAKA,KAAK,MAAM4B,SAAX,IAAwBC,MAAM,CAACV,MAAP,CAAcb,IAAI,CAACwB,OAAnB,CAAxB,EAAqD;MACnD;MACA,MAAML,MAAM,GAAGlB,MAAM,CAACS,QAAP,CAAgBN,KAAhB,CAAsBC,GAAtB,CAA0BiB,SAAS,CAACd,EAApC,CAAf;;MACA,IAAIW,MAAJ,EAAY;QACVA,MAAM,CAACK,OAAP,CAAeJ,IAAf,CAAoBE,SAApB;MACD;IACF;IAED;AACJ;AACA;AACA;AACA;;;IACIrB,MAAM,CAACwB,IAAP,CAAY5B,MAAM,CAAC6B,gBAAnB,EAAqCZ,aAArC;IAEA,OAAO;MACLA;IADK,CAAP;EAGD;;EAEDF,WAAW,CAACH,OAAD,EAAU;IACnBA,OAAO,CAACM,OAAR,EAAiBX,KAAjB,CAAuBuB,OAAvB,CAA+BR,MAAM,IAAI;MACvC,IAAI,CAACA,MAAM,CAACS,QAAZ,EAAsB;QACpB,KAAK3B,MAAL,CAAYS,QAAZ,CAAqBmB,OAArB,CAA6BV,MAAM,CAACX,EAApC;MACD;IACF,CAJD;EAKD;;AAjDuC;;AAoD1CsB,MAAM,CAACC,OAAP,GAAiBjC,oBAAjB"},"metadata":{},"sourceType":"script"}