{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst Integration = require('./Integration');\n\nconst StageInstance = require('./StageInstance');\n\nconst Sticker = require('./Sticker');\n\nconst Webhook = require('./Webhook');\n\nconst {\n  OverwriteTypes,\n  PartialTypes\n} = require('../util/Constants');\n\nconst Permissions = require('../util/Permissions');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\nconst Util = require('../util/Util');\n/**\n * The target type of an entry. Here are the available types:\n * * GUILD\n * * CHANNEL\n * * USER\n * * ROLE\n * * INVITE\n * * WEBHOOK\n * * EMOJI\n * * MESSAGE\n * * INTEGRATION\n * * STAGE_INSTANCE\n * * STICKER\n * * THREAD\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Key mirror of all available audit log targets.\n * @name GuildAuditLogs.Targets\n * @type {Object<string, string>}\n */\n\n\nconst Targets = {\n  ALL: 'ALL',\n  GUILD: 'GUILD',\n  CHANNEL: 'CHANNEL',\n  USER: 'USER',\n  ROLE: 'ROLE',\n  INVITE: 'INVITE',\n  WEBHOOK: 'WEBHOOK',\n  EMOJI: 'EMOJI',\n  MESSAGE: 'MESSAGE',\n  INTEGRATION: 'INTEGRATION',\n  STAGE_INSTANCE: 'STAGE_INSTANCE',\n  STICKER: 'STICKER',\n  THREAD: 'THREAD',\n  UNKNOWN: 'UNKNOWN'\n};\n/**\n * The action of an entry. Here are the available actions:\n * * ALL: null\n * * GUILD_UPDATE: 1\n * * CHANNEL_CREATE: 10\n * * CHANNEL_UPDATE: 11\n * * CHANNEL_DELETE: 12\n * * CHANNEL_OVERWRITE_CREATE: 13\n * * CHANNEL_OVERWRITE_UPDATE: 14\n * * CHANNEL_OVERWRITE_DELETE: 15\n * * MEMBER_KICK: 20\n * * MEMBER_PRUNE: 21\n * * MEMBER_BAN_ADD: 22\n * * MEMBER_BAN_REMOVE: 23\n * * MEMBER_UPDATE: 24\n * * MEMBER_ROLE_UPDATE: 25\n * * MEMBER_MOVE: 26\n * * MEMBER_DISCONNECT: 27\n * * BOT_ADD: 28,\n * * ROLE_CREATE: 30\n * * ROLE_UPDATE: 31\n * * ROLE_DELETE: 32\n * * INVITE_CREATE: 40\n * * INVITE_UPDATE: 41\n * * INVITE_DELETE: 42\n * * WEBHOOK_CREATE: 50\n * * WEBHOOK_UPDATE: 51\n * * WEBHOOK_DELETE: 52\n * * EMOJI_CREATE: 60\n * * EMOJI_UPDATE: 61\n * * EMOJI_DELETE: 62\n * * MESSAGE_DELETE: 72\n * * MESSAGE_BULK_DELETE: 73\n * * MESSAGE_PIN: 74\n * * MESSAGE_UNPIN: 75\n * * INTEGRATION_CREATE: 80\n * * INTEGRATION_UPDATE: 81\n * * INTEGRATION_DELETE: 82\n * * STAGE_INSTANCE_CREATE: 83\n * * STAGE_INSTANCE_UPDATE: 84\n * * STAGE_INSTANCE_DELETE: 85\n * * STICKER_CREATE: 90\n * * STICKER_UPDATE: 91\n * * STICKER_DELETE: 92\n * * THREAD_CREATE: 110\n * * THREAD_UPDATE: 111\n * * THREAD_DELETE: 112\n * @typedef {?(number|string)} AuditLogAction\n * @see {@link https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events}\n */\n\n/**\n * All available actions keyed under their names to their numeric values.\n * @name GuildAuditLogs.Actions\n * @type {Object<string, number>}\n */\n\nconst Actions = {\n  ALL: null,\n  GUILD_UPDATE: 1,\n  CHANNEL_CREATE: 10,\n  CHANNEL_UPDATE: 11,\n  CHANNEL_DELETE: 12,\n  CHANNEL_OVERWRITE_CREATE: 13,\n  CHANNEL_OVERWRITE_UPDATE: 14,\n  CHANNEL_OVERWRITE_DELETE: 15,\n  MEMBER_KICK: 20,\n  MEMBER_PRUNE: 21,\n  MEMBER_BAN_ADD: 22,\n  MEMBER_BAN_REMOVE: 23,\n  MEMBER_UPDATE: 24,\n  MEMBER_ROLE_UPDATE: 25,\n  MEMBER_MOVE: 26,\n  MEMBER_DISCONNECT: 27,\n  BOT_ADD: 28,\n  ROLE_CREATE: 30,\n  ROLE_UPDATE: 31,\n  ROLE_DELETE: 32,\n  INVITE_CREATE: 40,\n  INVITE_UPDATE: 41,\n  INVITE_DELETE: 42,\n  WEBHOOK_CREATE: 50,\n  WEBHOOK_UPDATE: 51,\n  WEBHOOK_DELETE: 52,\n  EMOJI_CREATE: 60,\n  EMOJI_UPDATE: 61,\n  EMOJI_DELETE: 62,\n  MESSAGE_DELETE: 72,\n  MESSAGE_BULK_DELETE: 73,\n  MESSAGE_PIN: 74,\n  MESSAGE_UNPIN: 75,\n  INTEGRATION_CREATE: 80,\n  INTEGRATION_UPDATE: 81,\n  INTEGRATION_DELETE: 82,\n  STAGE_INSTANCE_CREATE: 83,\n  STAGE_INSTANCE_UPDATE: 84,\n  STAGE_INSTANCE_DELETE: 85,\n  STICKER_CREATE: 90,\n  STICKER_UPDATE: 91,\n  STICKER_DELETE: 92,\n  THREAD_CREATE: 110,\n  THREAD_UPDATE: 111,\n  THREAD_DELETE: 112\n};\n/**\n * Audit logs entries are held in this class.\n */\n\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.users._add(user);\n    if (data.threads) for (const thread of data.threads) guild.client.channels._add(thread, guild);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n\n    this.webhooks = new Collection();\n\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n    /**\n     * Cached integrations\n     * @type {Collection<Snowflake, Integration>}\n     * @private\n     */\n\n\n    this.integrations = new Collection();\n\n    if (data.integrations) {\n      for (const integration of data.integrations) {\n        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));\n      }\n    }\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n\n\n    this.entries = new Collection();\n\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n  /**\n   * Handles possible promises for entry targets.\n   * @returns {Promise<GuildAuditLogs>}\n   */\n\n\n  static async build() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    const logs = new GuildAuditLogs(...args);\n    await Promise.all(logs.entries.map(e => e.target));\n    return logs;\n  }\n  /**\n   * The target of an entry. It can be one of:\n   * * A guild\n   * * A channel\n   * * A user\n   * * A role\n   * * An invite\n   * * A webhook\n   * * An emoji\n   * * A message\n   * * An integration\n   * * A stage instance\n   * * A sticker\n   * * A thread\n   * * An object with an id key if target was deleted\n   * * An object where the keys represent either the new value or the old value\n   * @typedef {?(Object|Guild|Channel|User|Role|Invite|Webhook|GuildEmoji|Message|Integration|StageInstance|Sticker)}\n   * AuditLogEntryTarget\n   */\n\n  /**\n   * Finds the target type from the entry action.\n   * @param {AuditLogAction} target The action target\n   * @returns {AuditLogTargetType}\n   */\n\n\n  static targetType(target) {\n    if (target < 10) return Targets.GUILD;\n    if (target < 20) return Targets.CHANNEL;\n    if (target < 30) return Targets.USER;\n    if (target < 40) return Targets.ROLE;\n    if (target < 50) return Targets.INVITE;\n    if (target < 60) return Targets.WEBHOOK;\n    if (target < 70) return Targets.EMOJI;\n    if (target < 80) return Targets.MESSAGE;\n    if (target < 83) return Targets.INTEGRATION;\n    if (target < 86) return Targets.STAGE_INSTANCE;\n    if (target < 100) return Targets.STICKER;\n    if (target < 110) return Targets.UNKNOWN;\n    if (target < 120) return Targets.THREAD;\n    return Targets.UNKNOWN;\n  }\n  /**\n   * The action type of an entry, e.g. `CREATE`. Here are the available types:\n   * * CREATE\n   * * DELETE\n   * * UPDATE\n   * * ALL\n   * @typedef {string} AuditLogActionType\n   */\n\n  /**\n   * Finds the action type from the entry action.\n   * @param {AuditLogAction} action The action target\n   * @returns {AuditLogActionType}\n   */\n\n\n  static actionType(action) {\n    if ([Actions.CHANNEL_CREATE, Actions.CHANNEL_OVERWRITE_CREATE, Actions.MEMBER_BAN_REMOVE, Actions.BOT_ADD, Actions.ROLE_CREATE, Actions.INVITE_CREATE, Actions.WEBHOOK_CREATE, Actions.EMOJI_CREATE, Actions.MESSAGE_PIN, Actions.INTEGRATION_CREATE, Actions.STAGE_INSTANCE_CREATE, Actions.STICKER_CREATE, Actions.THREAD_CREATE].includes(action)) {\n      return 'CREATE';\n    }\n\n    if ([Actions.CHANNEL_DELETE, Actions.CHANNEL_OVERWRITE_DELETE, Actions.MEMBER_KICK, Actions.MEMBER_PRUNE, Actions.MEMBER_BAN_ADD, Actions.MEMBER_DISCONNECT, Actions.ROLE_DELETE, Actions.INVITE_DELETE, Actions.WEBHOOK_DELETE, Actions.EMOJI_DELETE, Actions.MESSAGE_DELETE, Actions.MESSAGE_BULK_DELETE, Actions.MESSAGE_UNPIN, Actions.INTEGRATION_DELETE, Actions.STAGE_INSTANCE_DELETE, Actions.STICKER_DELETE, Actions.THREAD_DELETE].includes(action)) {\n      return 'DELETE';\n    }\n\n    if ([Actions.GUILD_UPDATE, Actions.CHANNEL_UPDATE, Actions.CHANNEL_OVERWRITE_UPDATE, Actions.MEMBER_UPDATE, Actions.MEMBER_ROLE_UPDATE, Actions.MEMBER_MOVE, Actions.ROLE_UPDATE, Actions.INVITE_UPDATE, Actions.WEBHOOK_UPDATE, Actions.EMOJI_UPDATE, Actions.INTEGRATION_UPDATE, Actions.STAGE_INSTANCE_UPDATE, Actions.STICKER_UPDATE, Actions.THREAD_UPDATE].includes(action)) {\n      return 'UPDATE';\n    }\n\n    return 'ALL';\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n}\n/**\n * Audit logs entry.\n */\n\n\nclass GuildAuditLogsEntry {\n  constructor(logs, guild, data) {\n    const targetType = GuildAuditLogs.targetType(data.action_type);\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n\n    this.targetType = targetType;\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n\n    this.actionType = GuildAuditLogs.actionType(data.action_type);\n    /**\n     * Specific action type of this entry in its string presentation\n     * @type {AuditLogAction}\n     */\n\n    this.action = Object.keys(Actions).find(k => Actions[k] === data.action_type);\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n\n    this.reason = data.reason ?? null;\n    /**\n     * The user that executed this entry\n     * @type {?User}\n     */\n\n    this.executor = data.user_id ? guild.client.options.partials.includes(PartialTypes.USER) ? guild.client.users._add({\n      id: data.user_id\n    }) : guild.client.users.cache.get(data.user_id) : null;\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {Object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {?AuditLogChange[]}\n     */\n\n    this.changes = data.changes?.map(c => ({\n      key: c.key,\n      old: c.old_value,\n      new: c.new_value\n    })) ?? null;\n    /**\n     * The entry's id\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    /**\n     * Any extra data from the entry\n     * @type {?(Object|Role|GuildMember)}\n     */\n\n    this.extra = null;\n\n    switch (data.action_type) {\n      case Actions.MEMBER_PRUNE:\n        this.extra = {\n          removed: Number(data.options.members_removed),\n          days: Number(data.options.delete_member_days)\n        };\n        break;\n\n      case Actions.MEMBER_MOVE:\n      case Actions.MESSAGE_DELETE:\n      case Actions.MESSAGE_BULK_DELETE:\n        this.extra = {\n          channel: guild.channels.cache.get(data.options.channel_id) ?? {\n            id: data.options.channel_id\n          },\n          count: Number(data.options.count)\n        };\n        break;\n\n      case Actions.MESSAGE_PIN:\n      case Actions.MESSAGE_UNPIN:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options.channel_id) ?? {\n            id: data.options.channel_id\n          },\n          messageId: data.options.message_id\n        };\n        break;\n\n      case Actions.MEMBER_DISCONNECT:\n        this.extra = {\n          count: Number(data.options.count)\n        };\n        break;\n\n      case Actions.CHANNEL_OVERWRITE_CREATE:\n      case Actions.CHANNEL_OVERWRITE_UPDATE:\n      case Actions.CHANNEL_OVERWRITE_DELETE:\n        switch (Number(data.options.type)) {\n          case OverwriteTypes.role:\n            this.extra = guild.roles.cache.get(data.options.id) ?? {\n              id: data.options.id,\n              name: data.options.role_name,\n              type: OverwriteTypes[OverwriteTypes.role]\n            };\n            break;\n\n          case OverwriteTypes.member:\n            this.extra = guild.members.cache.get(data.options.id) ?? {\n              id: data.options.id,\n              type: OverwriteTypes[OverwriteTypes.member]\n            };\n            break;\n\n          default:\n            break;\n        }\n\n        break;\n\n      case Actions.STAGE_INSTANCE_CREATE:\n      case Actions.STAGE_INSTANCE_DELETE:\n      case Actions.STAGE_INSTANCE_UPDATE:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options?.channel_id) ?? {\n            id: data.options?.channel_id\n          }\n        };\n        break;\n\n      default:\n        break;\n    }\n    /**\n     * The target of this entry\n     * @type {?AuditLogEntryTarget}\n     */\n\n\n    this.target = null;\n\n    if (targetType === Targets.UNKNOWN) {\n      this.target = this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {});\n      this.target.id = data.target_id; // MEMBER_DISCONNECT and similar types do not provide a target_id.\n    } else if (targetType === Targets.USER && data.target_id) {\n      this.target = guild.client.options.partials.includes(PartialTypes.USER) ? guild.client.users._add({\n        id: data.target_id\n      }) : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.GUILD) {\n      this.target = guild.client.guilds.cache.get(data.target_id);\n    } else if (targetType === Targets.WEBHOOK) {\n      this.target = logs.webhooks.get(data.target_id) ?? new Webhook(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        guild_id: guild.id\n      }));\n    } else if (targetType === Targets.INVITE) {\n      this.target = guild.members.fetch(guild.client.user.id).then(async me => {\n        if (me.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {\n          let change = this.changes.find(c => c.key === 'code');\n          change = change.new ?? change.old;\n          const invites = await guild.invites.fetch();\n          this.target = invites.find(i => i.code === change) ?? null;\n        } else {\n          this.target = this.changes.reduce((o, c) => {\n            o[c.key] = c.new ?? c.old;\n            return o;\n          }, {});\n        }\n      });\n    } else if (targetType === Targets.MESSAGE) {\n      // Discord sends a channel id for the MESSAGE_BULK_DELETE action type.\n      this.target = data.action_type === Actions.MESSAGE_BULK_DELETE ? guild.channels.cache.get(data.target_id) ?? {\n        id: data.target_id\n      } : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.INTEGRATION) {\n      this.target = logs.integrations.get(data.target_id) ?? new Integration(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id\n      }), guild);\n    } else if (targetType === Targets.CHANNEL || targetType === Targets.THREAD) {\n      this.target = guild.channels.cache.get(data.target_id) ?? this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id\n      });\n    } else if (targetType === Targets.STAGE_INSTANCE) {\n      this.target = guild.stageInstances.cache.get(data.target_id) ?? new StageInstance(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id,\n        channel_id: data.options?.channel_id,\n        guild_id: guild.id\n      }));\n    } else if (targetType === Targets.STICKER) {\n      this.target = guild.stickers.cache.get(data.target_id) ?? new Sticker(guild.client, this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {\n        id: data.target_id\n      }));\n    } else if (data.target_id) {\n      this.target = guild[`${targetType.toLowerCase()}s`]?.cache.get(data.target_id) ?? {\n        id: data.target_id\n      };\n    }\n  }\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time this entry was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  toJSON() {\n    return Util.flatten(this, {\n      createdTimestamp: true\n    });\n  }\n\n}\n\nGuildAuditLogs.Actions = Actions;\nGuildAuditLogs.Targets = Targets;\nGuildAuditLogs.Entry = GuildAuditLogsEntry;\nmodule.exports = GuildAuditLogs;","map":{"version":3,"names":["Collection","require","Integration","StageInstance","Sticker","Webhook","OverwriteTypes","PartialTypes","Permissions","SnowflakeUtil","Util","Targets","ALL","GUILD","CHANNEL","USER","ROLE","INVITE","WEBHOOK","EMOJI","MESSAGE","INTEGRATION","STAGE_INSTANCE","STICKER","THREAD","UNKNOWN","Actions","GUILD_UPDATE","CHANNEL_CREATE","CHANNEL_UPDATE","CHANNEL_DELETE","CHANNEL_OVERWRITE_CREATE","CHANNEL_OVERWRITE_UPDATE","CHANNEL_OVERWRITE_DELETE","MEMBER_KICK","MEMBER_PRUNE","MEMBER_BAN_ADD","MEMBER_BAN_REMOVE","MEMBER_UPDATE","MEMBER_ROLE_UPDATE","MEMBER_MOVE","MEMBER_DISCONNECT","BOT_ADD","ROLE_CREATE","ROLE_UPDATE","ROLE_DELETE","INVITE_CREATE","INVITE_UPDATE","INVITE_DELETE","WEBHOOK_CREATE","WEBHOOK_UPDATE","WEBHOOK_DELETE","EMOJI_CREATE","EMOJI_UPDATE","EMOJI_DELETE","MESSAGE_DELETE","MESSAGE_BULK_DELETE","MESSAGE_PIN","MESSAGE_UNPIN","INTEGRATION_CREATE","INTEGRATION_UPDATE","INTEGRATION_DELETE","STAGE_INSTANCE_CREATE","STAGE_INSTANCE_UPDATE","STAGE_INSTANCE_DELETE","STICKER_CREATE","STICKER_UPDATE","STICKER_DELETE","THREAD_CREATE","THREAD_UPDATE","THREAD_DELETE","GuildAuditLogs","constructor","guild","data","users","user","client","_add","threads","thread","channels","webhooks","hook","set","id","integrations","integration","entries","item","audit_log_entries","entry","GuildAuditLogsEntry","build","args","logs","Promise","all","map","e","target","targetType","actionType","action","includes","toJSON","flatten","action_type","Object","keys","find","k","reason","executor","user_id","options","partials","cache","get","changes","c","key","old","old_value","new","new_value","extra","removed","Number","members_removed","days","delete_member_days","channel","channel_id","count","messageId","message_id","type","role","roles","name","role_name","member","members","reduce","o","target_id","guilds","guild_id","fetch","then","me","permissions","has","FLAGS","MANAGE_GUILD","change","invites","i","code","stageInstances","stickers","toLowerCase","createdTimestamp","deconstruct","timestamp","createdAt","Date","Entry","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/GuildAuditLogs.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Integration = require('./Integration');\nconst StageInstance = require('./StageInstance');\nconst Sticker = require('./Sticker');\nconst Webhook = require('./Webhook');\nconst { OverwriteTypes, PartialTypes } = require('../util/Constants');\nconst Permissions = require('../util/Permissions');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\nconst Util = require('../util/Util');\n\n/**\n * The target type of an entry. Here are the available types:\n * * GUILD\n * * CHANNEL\n * * USER\n * * ROLE\n * * INVITE\n * * WEBHOOK\n * * EMOJI\n * * MESSAGE\n * * INTEGRATION\n * * STAGE_INSTANCE\n * * STICKER\n * * THREAD\n * @typedef {string} AuditLogTargetType\n */\n\n/**\n * Key mirror of all available audit log targets.\n * @name GuildAuditLogs.Targets\n * @type {Object<string, string>}\n */\nconst Targets = {\n  ALL: 'ALL',\n  GUILD: 'GUILD',\n  CHANNEL: 'CHANNEL',\n  USER: 'USER',\n  ROLE: 'ROLE',\n  INVITE: 'INVITE',\n  WEBHOOK: 'WEBHOOK',\n  EMOJI: 'EMOJI',\n  MESSAGE: 'MESSAGE',\n  INTEGRATION: 'INTEGRATION',\n  STAGE_INSTANCE: 'STAGE_INSTANCE',\n  STICKER: 'STICKER',\n  THREAD: 'THREAD',\n  UNKNOWN: 'UNKNOWN',\n};\n\n/**\n * The action of an entry. Here are the available actions:\n * * ALL: null\n * * GUILD_UPDATE: 1\n * * CHANNEL_CREATE: 10\n * * CHANNEL_UPDATE: 11\n * * CHANNEL_DELETE: 12\n * * CHANNEL_OVERWRITE_CREATE: 13\n * * CHANNEL_OVERWRITE_UPDATE: 14\n * * CHANNEL_OVERWRITE_DELETE: 15\n * * MEMBER_KICK: 20\n * * MEMBER_PRUNE: 21\n * * MEMBER_BAN_ADD: 22\n * * MEMBER_BAN_REMOVE: 23\n * * MEMBER_UPDATE: 24\n * * MEMBER_ROLE_UPDATE: 25\n * * MEMBER_MOVE: 26\n * * MEMBER_DISCONNECT: 27\n * * BOT_ADD: 28,\n * * ROLE_CREATE: 30\n * * ROLE_UPDATE: 31\n * * ROLE_DELETE: 32\n * * INVITE_CREATE: 40\n * * INVITE_UPDATE: 41\n * * INVITE_DELETE: 42\n * * WEBHOOK_CREATE: 50\n * * WEBHOOK_UPDATE: 51\n * * WEBHOOK_DELETE: 52\n * * EMOJI_CREATE: 60\n * * EMOJI_UPDATE: 61\n * * EMOJI_DELETE: 62\n * * MESSAGE_DELETE: 72\n * * MESSAGE_BULK_DELETE: 73\n * * MESSAGE_PIN: 74\n * * MESSAGE_UNPIN: 75\n * * INTEGRATION_CREATE: 80\n * * INTEGRATION_UPDATE: 81\n * * INTEGRATION_DELETE: 82\n * * STAGE_INSTANCE_CREATE: 83\n * * STAGE_INSTANCE_UPDATE: 84\n * * STAGE_INSTANCE_DELETE: 85\n * * STICKER_CREATE: 90\n * * STICKER_UPDATE: 91\n * * STICKER_DELETE: 92\n * * THREAD_CREATE: 110\n * * THREAD_UPDATE: 111\n * * THREAD_DELETE: 112\n * @typedef {?(number|string)} AuditLogAction\n * @see {@link https://discord.com/developers/docs/resources/audit-log#audit-log-entry-object-audit-log-events}\n */\n\n/**\n * All available actions keyed under their names to their numeric values.\n * @name GuildAuditLogs.Actions\n * @type {Object<string, number>}\n */\nconst Actions = {\n  ALL: null,\n  GUILD_UPDATE: 1,\n  CHANNEL_CREATE: 10,\n  CHANNEL_UPDATE: 11,\n  CHANNEL_DELETE: 12,\n  CHANNEL_OVERWRITE_CREATE: 13,\n  CHANNEL_OVERWRITE_UPDATE: 14,\n  CHANNEL_OVERWRITE_DELETE: 15,\n  MEMBER_KICK: 20,\n  MEMBER_PRUNE: 21,\n  MEMBER_BAN_ADD: 22,\n  MEMBER_BAN_REMOVE: 23,\n  MEMBER_UPDATE: 24,\n  MEMBER_ROLE_UPDATE: 25,\n  MEMBER_MOVE: 26,\n  MEMBER_DISCONNECT: 27,\n  BOT_ADD: 28,\n  ROLE_CREATE: 30,\n  ROLE_UPDATE: 31,\n  ROLE_DELETE: 32,\n  INVITE_CREATE: 40,\n  INVITE_UPDATE: 41,\n  INVITE_DELETE: 42,\n  WEBHOOK_CREATE: 50,\n  WEBHOOK_UPDATE: 51,\n  WEBHOOK_DELETE: 52,\n  EMOJI_CREATE: 60,\n  EMOJI_UPDATE: 61,\n  EMOJI_DELETE: 62,\n  MESSAGE_DELETE: 72,\n  MESSAGE_BULK_DELETE: 73,\n  MESSAGE_PIN: 74,\n  MESSAGE_UNPIN: 75,\n  INTEGRATION_CREATE: 80,\n  INTEGRATION_UPDATE: 81,\n  INTEGRATION_DELETE: 82,\n  STAGE_INSTANCE_CREATE: 83,\n  STAGE_INSTANCE_UPDATE: 84,\n  STAGE_INSTANCE_DELETE: 85,\n  STICKER_CREATE: 90,\n  STICKER_UPDATE: 91,\n  STICKER_DELETE: 92,\n  THREAD_CREATE: 110,\n  THREAD_UPDATE: 111,\n  THREAD_DELETE: 112,\n};\n\n/**\n * Audit logs entries are held in this class.\n */\nclass GuildAuditLogs {\n  constructor(guild, data) {\n    if (data.users) for (const user of data.users) guild.client.users._add(user);\n    if (data.threads) for (const thread of data.threads) guild.client.channels._add(thread, guild);\n    /**\n     * Cached webhooks\n     * @type {Collection<Snowflake, Webhook>}\n     * @private\n     */\n    this.webhooks = new Collection();\n    if (data.webhooks) {\n      for (const hook of data.webhooks) {\n        this.webhooks.set(hook.id, new Webhook(guild.client, hook));\n      }\n    }\n\n    /**\n     * Cached integrations\n     * @type {Collection<Snowflake, Integration>}\n     * @private\n     */\n    this.integrations = new Collection();\n    if (data.integrations) {\n      for (const integration of data.integrations) {\n        this.integrations.set(integration.id, new Integration(guild.client, integration, guild));\n      }\n    }\n\n    /**\n     * The entries for this guild's audit logs\n     * @type {Collection<Snowflake, GuildAuditLogsEntry>}\n     */\n    this.entries = new Collection();\n    for (const item of data.audit_log_entries) {\n      const entry = new GuildAuditLogsEntry(this, guild, item);\n      this.entries.set(entry.id, entry);\n    }\n  }\n\n  /**\n   * Handles possible promises for entry targets.\n   * @returns {Promise<GuildAuditLogs>}\n   */\n  static async build(...args) {\n    const logs = new GuildAuditLogs(...args);\n    await Promise.all(logs.entries.map(e => e.target));\n    return logs;\n  }\n\n  /**\n   * The target of an entry. It can be one of:\n   * * A guild\n   * * A channel\n   * * A user\n   * * A role\n   * * An invite\n   * * A webhook\n   * * An emoji\n   * * A message\n   * * An integration\n   * * A stage instance\n   * * A sticker\n   * * A thread\n   * * An object with an id key if target was deleted\n   * * An object where the keys represent either the new value or the old value\n   * @typedef {?(Object|Guild|Channel|User|Role|Invite|Webhook|GuildEmoji|Message|Integration|StageInstance|Sticker)}\n   * AuditLogEntryTarget\n   */\n\n  /**\n   * Finds the target type from the entry action.\n   * @param {AuditLogAction} target The action target\n   * @returns {AuditLogTargetType}\n   */\n  static targetType(target) {\n    if (target < 10) return Targets.GUILD;\n    if (target < 20) return Targets.CHANNEL;\n    if (target < 30) return Targets.USER;\n    if (target < 40) return Targets.ROLE;\n    if (target < 50) return Targets.INVITE;\n    if (target < 60) return Targets.WEBHOOK;\n    if (target < 70) return Targets.EMOJI;\n    if (target < 80) return Targets.MESSAGE;\n    if (target < 83) return Targets.INTEGRATION;\n    if (target < 86) return Targets.STAGE_INSTANCE;\n    if (target < 100) return Targets.STICKER;\n    if (target < 110) return Targets.UNKNOWN;\n    if (target < 120) return Targets.THREAD;\n    return Targets.UNKNOWN;\n  }\n\n  /**\n   * The action type of an entry, e.g. `CREATE`. Here are the available types:\n   * * CREATE\n   * * DELETE\n   * * UPDATE\n   * * ALL\n   * @typedef {string} AuditLogActionType\n   */\n\n  /**\n   * Finds the action type from the entry action.\n   * @param {AuditLogAction} action The action target\n   * @returns {AuditLogActionType}\n   */\n  static actionType(action) {\n    if (\n      [\n        Actions.CHANNEL_CREATE,\n        Actions.CHANNEL_OVERWRITE_CREATE,\n        Actions.MEMBER_BAN_REMOVE,\n        Actions.BOT_ADD,\n        Actions.ROLE_CREATE,\n        Actions.INVITE_CREATE,\n        Actions.WEBHOOK_CREATE,\n        Actions.EMOJI_CREATE,\n        Actions.MESSAGE_PIN,\n        Actions.INTEGRATION_CREATE,\n        Actions.STAGE_INSTANCE_CREATE,\n        Actions.STICKER_CREATE,\n        Actions.THREAD_CREATE,\n      ].includes(action)\n    ) {\n      return 'CREATE';\n    }\n\n    if (\n      [\n        Actions.CHANNEL_DELETE,\n        Actions.CHANNEL_OVERWRITE_DELETE,\n        Actions.MEMBER_KICK,\n        Actions.MEMBER_PRUNE,\n        Actions.MEMBER_BAN_ADD,\n        Actions.MEMBER_DISCONNECT,\n        Actions.ROLE_DELETE,\n        Actions.INVITE_DELETE,\n        Actions.WEBHOOK_DELETE,\n        Actions.EMOJI_DELETE,\n        Actions.MESSAGE_DELETE,\n        Actions.MESSAGE_BULK_DELETE,\n        Actions.MESSAGE_UNPIN,\n        Actions.INTEGRATION_DELETE,\n        Actions.STAGE_INSTANCE_DELETE,\n        Actions.STICKER_DELETE,\n        Actions.THREAD_DELETE,\n      ].includes(action)\n    ) {\n      return 'DELETE';\n    }\n\n    if (\n      [\n        Actions.GUILD_UPDATE,\n        Actions.CHANNEL_UPDATE,\n        Actions.CHANNEL_OVERWRITE_UPDATE,\n        Actions.MEMBER_UPDATE,\n        Actions.MEMBER_ROLE_UPDATE,\n        Actions.MEMBER_MOVE,\n        Actions.ROLE_UPDATE,\n        Actions.INVITE_UPDATE,\n        Actions.WEBHOOK_UPDATE,\n        Actions.EMOJI_UPDATE,\n        Actions.INTEGRATION_UPDATE,\n        Actions.STAGE_INSTANCE_UPDATE,\n        Actions.STICKER_UPDATE,\n        Actions.THREAD_UPDATE,\n      ].includes(action)\n    ) {\n      return 'UPDATE';\n    }\n\n    return 'ALL';\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\n/**\n * Audit logs entry.\n */\nclass GuildAuditLogsEntry {\n  constructor(logs, guild, data) {\n    const targetType = GuildAuditLogs.targetType(data.action_type);\n    /**\n     * The target type of this entry\n     * @type {AuditLogTargetType}\n     */\n    this.targetType = targetType;\n\n    /**\n     * The action type of this entry\n     * @type {AuditLogActionType}\n     */\n    this.actionType = GuildAuditLogs.actionType(data.action_type);\n\n    /**\n     * Specific action type of this entry in its string presentation\n     * @type {AuditLogAction}\n     */\n    this.action = Object.keys(Actions).find(k => Actions[k] === data.action_type);\n\n    /**\n     * The reason of this entry\n     * @type {?string}\n     */\n    this.reason = data.reason ?? null;\n\n    /**\n     * The user that executed this entry\n     * @type {?User}\n     */\n    this.executor = data.user_id\n      ? guild.client.options.partials.includes(PartialTypes.USER)\n        ? guild.client.users._add({ id: data.user_id })\n        : guild.client.users.cache.get(data.user_id)\n      : null;\n\n    /**\n     * An entry in the audit log representing a specific change.\n     * @typedef {Object} AuditLogChange\n     * @property {string} key The property that was changed, e.g. `nick` for nickname changes\n     * @property {*} [old] The old value of the change, e.g. for nicknames, the old nickname\n     * @property {*} [new] The new value of the change, e.g. for nicknames, the new nickname\n     */\n\n    /**\n     * Specific property changes\n     * @type {?AuditLogChange[]}\n     */\n    this.changes = data.changes?.map(c => ({ key: c.key, old: c.old_value, new: c.new_value })) ?? null;\n\n    /**\n     * The entry's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * Any extra data from the entry\n     * @type {?(Object|Role|GuildMember)}\n     */\n    this.extra = null;\n    switch (data.action_type) {\n      case Actions.MEMBER_PRUNE:\n        this.extra = {\n          removed: Number(data.options.members_removed),\n          days: Number(data.options.delete_member_days),\n        };\n        break;\n\n      case Actions.MEMBER_MOVE:\n      case Actions.MESSAGE_DELETE:\n      case Actions.MESSAGE_BULK_DELETE:\n        this.extra = {\n          channel: guild.channels.cache.get(data.options.channel_id) ?? { id: data.options.channel_id },\n          count: Number(data.options.count),\n        };\n        break;\n\n      case Actions.MESSAGE_PIN:\n      case Actions.MESSAGE_UNPIN:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options.channel_id) ?? { id: data.options.channel_id },\n          messageId: data.options.message_id,\n        };\n        break;\n\n      case Actions.MEMBER_DISCONNECT:\n        this.extra = {\n          count: Number(data.options.count),\n        };\n        break;\n\n      case Actions.CHANNEL_OVERWRITE_CREATE:\n      case Actions.CHANNEL_OVERWRITE_UPDATE:\n      case Actions.CHANNEL_OVERWRITE_DELETE:\n        switch (Number(data.options.type)) {\n          case OverwriteTypes.role:\n            this.extra = guild.roles.cache.get(data.options.id) ?? {\n              id: data.options.id,\n              name: data.options.role_name,\n              type: OverwriteTypes[OverwriteTypes.role],\n            };\n            break;\n\n          case OverwriteTypes.member:\n            this.extra = guild.members.cache.get(data.options.id) ?? {\n              id: data.options.id,\n              type: OverwriteTypes[OverwriteTypes.member],\n            };\n            break;\n\n          default:\n            break;\n        }\n        break;\n\n      case Actions.STAGE_INSTANCE_CREATE:\n      case Actions.STAGE_INSTANCE_DELETE:\n      case Actions.STAGE_INSTANCE_UPDATE:\n        this.extra = {\n          channel: guild.client.channels.cache.get(data.options?.channel_id) ?? { id: data.options?.channel_id },\n        };\n        break;\n\n      default:\n        break;\n    }\n\n    /**\n     * The target of this entry\n     * @type {?AuditLogEntryTarget}\n     */\n    this.target = null;\n    if (targetType === Targets.UNKNOWN) {\n      this.target = this.changes.reduce((o, c) => {\n        o[c.key] = c.new ?? c.old;\n        return o;\n      }, {});\n      this.target.id = data.target_id;\n      // MEMBER_DISCONNECT and similar types do not provide a target_id.\n    } else if (targetType === Targets.USER && data.target_id) {\n      this.target = guild.client.options.partials.includes(PartialTypes.USER)\n        ? guild.client.users._add({ id: data.target_id })\n        : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.GUILD) {\n      this.target = guild.client.guilds.cache.get(data.target_id);\n    } else if (targetType === Targets.WEBHOOK) {\n      this.target =\n        logs.webhooks.get(data.target_id) ??\n        new Webhook(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            {\n              id: data.target_id,\n              guild_id: guild.id,\n            },\n          ),\n        );\n    } else if (targetType === Targets.INVITE) {\n      this.target = guild.members.fetch(guild.client.user.id).then(async me => {\n        if (me.permissions.has(Permissions.FLAGS.MANAGE_GUILD)) {\n          let change = this.changes.find(c => c.key === 'code');\n          change = change.new ?? change.old;\n          const invites = await guild.invites.fetch();\n          this.target = invites.find(i => i.code === change) ?? null;\n        } else {\n          this.target = this.changes.reduce((o, c) => {\n            o[c.key] = c.new ?? c.old;\n            return o;\n          }, {});\n        }\n      });\n    } else if (targetType === Targets.MESSAGE) {\n      // Discord sends a channel id for the MESSAGE_BULK_DELETE action type.\n      this.target =\n        data.action_type === Actions.MESSAGE_BULK_DELETE\n          ? guild.channels.cache.get(data.target_id) ?? { id: data.target_id }\n          : guild.client.users.cache.get(data.target_id);\n    } else if (targetType === Targets.INTEGRATION) {\n      this.target =\n        logs.integrations.get(data.target_id) ??\n        new Integration(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            { id: data.target_id },\n          ),\n          guild,\n        );\n    } else if (targetType === Targets.CHANNEL || targetType === Targets.THREAD) {\n      this.target =\n        guild.channels.cache.get(data.target_id) ??\n        this.changes.reduce(\n          (o, c) => {\n            o[c.key] = c.new ?? c.old;\n            return o;\n          },\n          { id: data.target_id },\n        );\n    } else if (targetType === Targets.STAGE_INSTANCE) {\n      this.target =\n        guild.stageInstances.cache.get(data.target_id) ??\n        new StageInstance(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            {\n              id: data.target_id,\n              channel_id: data.options?.channel_id,\n              guild_id: guild.id,\n            },\n          ),\n        );\n    } else if (targetType === Targets.STICKER) {\n      this.target =\n        guild.stickers.cache.get(data.target_id) ??\n        new Sticker(\n          guild.client,\n          this.changes.reduce(\n            (o, c) => {\n              o[c.key] = c.new ?? c.old;\n              return o;\n            },\n            { id: data.target_id },\n          ),\n        );\n    } else if (data.target_id) {\n      this.target = guild[`${targetType.toLowerCase()}s`]?.cache.get(data.target_id) ?? { id: data.target_id };\n    }\n  }\n\n  /**\n   * The timestamp this entry was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time this entry was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  toJSON() {\n    return Util.flatten(this, { createdTimestamp: true });\n  }\n}\n\nGuildAuditLogs.Actions = Actions;\nGuildAuditLogs.Targets = Targets;\nGuildAuditLogs.Entry = GuildAuditLogsEntry;\n\nmodule.exports = GuildAuditLogs;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}