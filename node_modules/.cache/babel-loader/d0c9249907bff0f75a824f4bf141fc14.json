{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst Interaction = require('./Interaction');\n\nconst InteractionWebhook = require('./InteractionWebhook');\n\nconst InteractionResponses = require('./interfaces/InteractionResponses');\n\nconst {\n  ApplicationCommandOptionTypes\n} = require('../util/Constants');\n/**\n * Represents a command interaction.\n * @extends {Interaction}\n * @implements {InteractionResponses}\n * @abstract\n */\n\n\nclass BaseCommandInteraction extends Interaction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The channel this interaction was sent in\n     * @type {?TextBasedChannels}\n     * @name BaseCommandInteraction#channel\n     * @readonly\n     */\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name BaseCommandInteraction#channelId\n     */\n\n    /**\n     * The invoked application command's id\n     * @type {Snowflake}\n     */\n\n    this.commandId = data.data.id;\n    /**\n     * The invoked application command's name\n     * @type {string}\n     */\n\n    this.commandName = data.data.name;\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n\n    this.deferred = false;\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n\n    this.replied = false;\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n\n    this.ephemeral = null;\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n  /**\n   * The invoked application command, if it was fetched before\n   * @type {?ApplicationCommand}\n   */\n\n\n  get command() {\n    const id = this.commandId;\n    return this.guild?.commands.cache.get(id) ?? this.client.application.commands.cache.get(id) ?? null;\n  }\n  /**\n   * Represents the resolved data of a received command interaction.\n   * @typedef {Object} CommandInteractionResolvedData\n   * @property {Collection<string, User>} [users] The resolved users\n   * @property {Collection<string, GuildMember|APIGuildMember>} [members] The resolved guild members\n   * @property {Collection<string, Role|APIRole>} [roles] The resolved roles\n   * @property {Collection<string, Channel|APIChannel>} [channels] The resolved channels\n   * @property {Collection<string, Message|APIMessage>} [messages] The resolved messages\n   */\n\n  /**\n   * Transforms the resolved received from the API.\n   * @param {APIInteractionDataResolved} resolved The received resolved objects\n   * @returns {CommandInteractionResolvedData}\n   * @private\n   */\n\n\n  transformResolved(_ref) {\n    let {\n      members,\n      users,\n      channels,\n      roles,\n      messages\n    } = _ref;\n    const result = {};\n\n    if (members) {\n      result.members = new Collection();\n\n      for (const [id, member] of Object.entries(members)) {\n        const user = users[id];\n        result.members.set(id, this.guild?.members._add({\n          user,\n          ...member\n        }) ?? member);\n      }\n    }\n\n    if (users) {\n      result.users = new Collection();\n\n      for (const user of Object.values(users)) {\n        result.users.set(user.id, this.client.users._add(user));\n      }\n    }\n\n    if (roles) {\n      result.roles = new Collection();\n\n      for (const role of Object.values(roles)) {\n        result.roles.set(role.id, this.guild?.roles._add(role) ?? role);\n      }\n    }\n\n    if (channels) {\n      result.channels = new Collection();\n\n      for (const channel of Object.values(channels)) {\n        result.channels.set(channel.id, this.client.channels._add(channel, this.guild) ?? channel);\n      }\n    }\n\n    if (messages) {\n      result.messages = new Collection();\n\n      for (const message of Object.values(messages)) {\n        result.messages.set(message.id, this.channel?.messages?._add(message) ?? message);\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Represents an option of a received command interaction.\n   * @typedef {Object} CommandInteractionOption\n   * @property {string} name The name of the option\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {string|number|boolean} [value] The value of the option\n   * @property {CommandInteractionOption[]} [options] Additional options if this option is a\n   * subcommand (group)\n   * @property {User} [user] The resolved user\n   * @property {GuildMember|APIGuildMember} [member] The resolved member\n   * @property {GuildChannel|APIChannel} [channel] The resolved channel\n   * @property {Role|APIRole} [role] The resolved role\n   */\n\n  /**\n   * Transforms an option received from the API.\n   * @param {APIApplicationCommandOption} option The received option\n   * @param {APIInteractionDataResolved} resolved The resolved interaction data\n   * @returns {CommandInteractionOption}\n   * @private\n   */\n\n\n  transformOption(option, resolved) {\n    const result = {\n      name: option.name,\n      type: ApplicationCommandOptionTypes[option.type]\n    };\n    if ('value' in option) result.value = option.value;\n    if ('options' in option) result.options = option.options.map(opt => this.transformOption(opt, resolved));\n\n    if (resolved) {\n      const user = resolved.users?.[option.value];\n      if (user) result.user = this.client.users._add(user);\n      const member = resolved.members?.[option.value];\n      if (member) result.member = this.guild?.members._add({\n        user,\n        ...member\n      }) ?? member;\n      const channel = resolved.channels?.[option.value];\n      if (channel) result.channel = this.client.channels._add(channel, this.guild) ?? channel;\n      const role = resolved.roles?.[option.value];\n      if (role) result.role = this.guild?.roles._add(role) ?? role;\n    }\n\n    return result;\n  } // These are here only for documentation purposes - they are implemented by InteractionResponses\n\n  /* eslint-disable no-empty-function */\n\n\n  defer() {}\n\n  reply() {}\n\n  fetchReply() {}\n\n  editReply() {}\n\n  deleteReply() {}\n\n  followUp() {}\n\n}\n\nInteractionResponses.applyToClass(BaseCommandInteraction, ['deferUpdate', 'update']);\nmodule.exports = BaseCommandInteraction;\n/* eslint-disable max-len */\n\n/**\n * @external APIInteractionDataResolved\n * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-resolved-data-structure}\n */","map":{"version":3,"names":["Collection","require","Interaction","InteractionWebhook","InteractionResponses","ApplicationCommandOptionTypes","BaseCommandInteraction","constructor","client","data","commandId","id","commandName","name","deferred","replied","ephemeral","webhook","applicationId","token","command","guild","commands","cache","get","application","transformResolved","members","users","channels","roles","messages","result","member","Object","entries","user","set","_add","values","role","channel","message","transformOption","option","resolved","type","value","options","map","opt","defer","reply","fetchReply","editReply","deleteReply","followUp","applyToClass","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/BaseCommandInteraction.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst Interaction = require('./Interaction');\nconst InteractionWebhook = require('./InteractionWebhook');\nconst InteractionResponses = require('./interfaces/InteractionResponses');\nconst { ApplicationCommandOptionTypes } = require('../util/Constants');\n\n/**\n * Represents a command interaction.\n * @extends {Interaction}\n * @implements {InteractionResponses}\n * @abstract\n */\nclass BaseCommandInteraction extends Interaction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The channel this interaction was sent in\n     * @type {?TextBasedChannels}\n     * @name BaseCommandInteraction#channel\n     * @readonly\n     */\n\n    /**\n     * The id of the channel this interaction was sent in\n     * @type {Snowflake}\n     * @name BaseCommandInteraction#channelId\n     */\n\n    /**\n     * The invoked application command's id\n     * @type {Snowflake}\n     */\n    this.commandId = data.data.id;\n\n    /**\n     * The invoked application command's name\n     * @type {string}\n     */\n    this.commandName = data.data.name;\n\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n    this.deferred = false;\n\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n    this.replied = false;\n\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n    this.ephemeral = null;\n\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n\n  /**\n   * The invoked application command, if it was fetched before\n   * @type {?ApplicationCommand}\n   */\n  get command() {\n    const id = this.commandId;\n    return this.guild?.commands.cache.get(id) ?? this.client.application.commands.cache.get(id) ?? null;\n  }\n\n  /**\n   * Represents the resolved data of a received command interaction.\n   * @typedef {Object} CommandInteractionResolvedData\n   * @property {Collection<string, User>} [users] The resolved users\n   * @property {Collection<string, GuildMember|APIGuildMember>} [members] The resolved guild members\n   * @property {Collection<string, Role|APIRole>} [roles] The resolved roles\n   * @property {Collection<string, Channel|APIChannel>} [channels] The resolved channels\n   * @property {Collection<string, Message|APIMessage>} [messages] The resolved messages\n   */\n\n  /**\n   * Transforms the resolved received from the API.\n   * @param {APIInteractionDataResolved} resolved The received resolved objects\n   * @returns {CommandInteractionResolvedData}\n   * @private\n   */\n  transformResolved({ members, users, channels, roles, messages }) {\n    const result = {};\n\n    if (members) {\n      result.members = new Collection();\n      for (const [id, member] of Object.entries(members)) {\n        const user = users[id];\n        result.members.set(id, this.guild?.members._add({ user, ...member }) ?? member);\n      }\n    }\n\n    if (users) {\n      result.users = new Collection();\n      for (const user of Object.values(users)) {\n        result.users.set(user.id, this.client.users._add(user));\n      }\n    }\n\n    if (roles) {\n      result.roles = new Collection();\n      for (const role of Object.values(roles)) {\n        result.roles.set(role.id, this.guild?.roles._add(role) ?? role);\n      }\n    }\n\n    if (channels) {\n      result.channels = new Collection();\n      for (const channel of Object.values(channels)) {\n        result.channels.set(channel.id, this.client.channels._add(channel, this.guild) ?? channel);\n      }\n    }\n\n    if (messages) {\n      result.messages = new Collection();\n      for (const message of Object.values(messages)) {\n        result.messages.set(message.id, this.channel?.messages?._add(message) ?? message);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Represents an option of a received command interaction.\n   * @typedef {Object} CommandInteractionOption\n   * @property {string} name The name of the option\n   * @property {ApplicationCommandOptionType} type The type of the option\n   * @property {string|number|boolean} [value] The value of the option\n   * @property {CommandInteractionOption[]} [options] Additional options if this option is a\n   * subcommand (group)\n   * @property {User} [user] The resolved user\n   * @property {GuildMember|APIGuildMember} [member] The resolved member\n   * @property {GuildChannel|APIChannel} [channel] The resolved channel\n   * @property {Role|APIRole} [role] The resolved role\n   */\n\n  /**\n   * Transforms an option received from the API.\n   * @param {APIApplicationCommandOption} option The received option\n   * @param {APIInteractionDataResolved} resolved The resolved interaction data\n   * @returns {CommandInteractionOption}\n   * @private\n   */\n  transformOption(option, resolved) {\n    const result = {\n      name: option.name,\n      type: ApplicationCommandOptionTypes[option.type],\n    };\n\n    if ('value' in option) result.value = option.value;\n    if ('options' in option) result.options = option.options.map(opt => this.transformOption(opt, resolved));\n\n    if (resolved) {\n      const user = resolved.users?.[option.value];\n      if (user) result.user = this.client.users._add(user);\n\n      const member = resolved.members?.[option.value];\n      if (member) result.member = this.guild?.members._add({ user, ...member }) ?? member;\n\n      const channel = resolved.channels?.[option.value];\n      if (channel) result.channel = this.client.channels._add(channel, this.guild) ?? channel;\n\n      const role = resolved.roles?.[option.value];\n      if (role) result.role = this.guild?.roles._add(role) ?? role;\n    }\n\n    return result;\n  }\n\n  // These are here only for documentation purposes - they are implemented by InteractionResponses\n  /* eslint-disable no-empty-function */\n  defer() {}\n  reply() {}\n  fetchReply() {}\n  editReply() {}\n  deleteReply() {}\n  followUp() {}\n}\n\nInteractionResponses.applyToClass(BaseCommandInteraction, ['deferUpdate', 'update']);\n\nmodule.exports = BaseCommandInteraction;\n\n/* eslint-disable max-len */\n/**\n * @external APIInteractionDataResolved\n * @see {@link https://discord.com/developers/docs/interactions/receiving-and-responding#interaction-object-resolved-data-structure}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}