{"ast":null,"code":"'use strict';\n\nconst BaseMessageComponent = require('./BaseMessageComponent');\n\nconst {\n  MessageComponentTypes\n} = require('../util/Constants');\n\nconst Util = require('../util/Util');\n/**\n * Represents a select menu message component\n * @extends {BaseMessageComponent}\n */\n\n\nclass MessageSelectMenu extends BaseMessageComponent {\n  /**\n   * @typedef {BaseMessageComponentOptions} MessageSelectMenuOptions\n   * @property {string} [customId] A unique string to be sent in the interaction when clicked\n   * @property {string} [placeholder] Custom placeholder text to display when nothing is selected\n   * @property {number} [minValues] The minimum number of selections required\n   * @property {number} [maxValues] The maximum number of selections allowed\n   * @property {MessageSelectOption[]} [options] Options for the select menu\n   * @property {boolean} [disabled=false] Disables the select menu to prevent interactions\n   */\n\n  /**\n   * @typedef {Object} MessageSelectOption\n   * @property {string} label The text to be displayed on this option\n   * @property {string} value The value to be sent for this option\n   * @property {?string} description Optional description to show for this option\n   * @property {?RawEmoji} emoji Emoji to display for this option\n   * @property {boolean} default Render this option as the default selection\n   */\n\n  /**\n   * @typedef {Object} MessageSelectOptionData\n   * @property {string} label The text to be displayed on this option\n   * @property {string} value The value to be sent for this option\n   * @property {string} [description] Optional description to show for this option\n   * @property {EmojiIdentifierResolvable} [emoji] Emoji to display for this option\n   * @property {boolean} [default] Render this option as the default selection\n   */\n\n  /**\n   * @param {MessageSelectMenu|MessageSelectMenuOptions} [data={}] MessageSelectMenu to clone or raw data\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      type: 'SELECT_MENU'\n    });\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * A unique string to be sent in the interaction when clicked\n     * @type {?string}\n     */\n    this.customId = data.custom_id ?? data.customId ?? null;\n    /**\n     * Custom placeholder text to display when nothing is selected\n     * @type {?string}\n     */\n\n    this.placeholder = data.placeholder ?? null;\n    /**\n     * The minimum number of selections required\n     * @type {?number}\n     */\n\n    this.minValues = data.min_values ?? data.minValues ?? null;\n    /**\n     * The maximum number of selections allowed\n     * @type {?number}\n     */\n\n    this.maxValues = data.max_values ?? data.maxValues ?? null;\n    /**\n     * Options for the select menu\n     * @type {MessageSelectOption[]}\n     */\n\n    this.options = this.constructor.normalizeOptions(data.options ?? []);\n    /**\n     * Whether this select menu is currently disabled\n     * @type {boolean}\n     */\n\n    this.disabled = data.disabled ?? false;\n  }\n  /**\n   * Sets the custom id of this select menu\n   * @param {string} customId A unique string to be sent in the interaction when clicked\n   * @returns {MessageSelectMenu}\n   */\n\n\n  setCustomId(customId) {\n    this.customId = Util.verifyString(customId, RangeError, 'SELECT_MENU_CUSTOM_ID');\n    return this;\n  }\n  /**\n   * Sets the interactive status of the select menu\n   * @param {boolean} [disabled=true] Whether this select menu should be disabled\n   * @returns {MessageSelectMenu}\n   */\n\n\n  setDisabled() {\n    let disabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.disabled = disabled;\n    return this;\n  }\n  /**\n   * Sets the maximum number of selections allowed for this select menu\n   * @param {number} maxValues Number of selections to be allowed\n   * @returns {MessageSelectMenu}\n   */\n\n\n  setMaxValues(maxValues) {\n    this.maxValues = maxValues;\n    return this;\n  }\n  /**\n   * Sets the minimum number of selections required for this select menu\n   * <info>This will default the maxValues to the number of options, unless manually set</info>\n   * @param {number} minValues Number of selections to be required\n   * @returns {MessageSelectMenu}\n   */\n\n\n  setMinValues(minValues) {\n    this.minValues = minValues;\n    return this;\n  }\n  /**\n   * Sets the placeholder of this select menu\n   * @param {string} placeholder Custom placeholder text to display when nothing is selected\n   * @returns {MessageSelectMenu}\n   */\n\n\n  setPlaceholder(placeholder) {\n    this.placeholder = Util.verifyString(placeholder, RangeError, 'SELECT_MENU_PLACEHOLDER');\n    return this;\n  }\n  /**\n   * Adds options to the select menu.\n   * @param {...MessageSelectOptionData|MessageSelectOptionData[]} options The options to add\n   * @returns {MessageSelectMenu}\n   */\n\n\n  addOptions() {\n    for (var _len = arguments.length, options = new Array(_len), _key = 0; _key < _len; _key++) {\n      options[_key] = arguments[_key];\n    }\n\n    this.options.push(...this.constructor.normalizeOptions(options));\n    return this;\n  }\n  /**\n   * Removes, replaces, and inserts options in the select menu.\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of options to remove\n   * @param {...MessageSelectOptionData|MessageSelectOptionData[]} [options] The replacing option objects\n   * @returns {MessageSelectMenu}\n   */\n\n\n  spliceOptions(index, deleteCount) {\n    for (var _len2 = arguments.length, options = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      options[_key2 - 2] = arguments[_key2];\n    }\n\n    this.options.splice(index, deleteCount, ...this.constructor.normalizeOptions(...options));\n    return this;\n  }\n  /**\n   * Transforms this select menu to a plain object\n   * @returns {Object} The raw data of this select menu\n   */\n\n\n  toJSON() {\n    return {\n      custom_id: this.customId,\n      disabled: this.disabled,\n      placeholder: this.placeholder,\n      min_values: this.minValues,\n      max_values: this.maxValues ?? (this.minValues ? this.options.length : undefined),\n      options: this.options,\n      type: typeof this.type === 'string' ? MessageComponentTypes[this.type] : this.type\n    };\n  }\n  /**\n   * Normalizes option input and resolves strings and emojis.\n   * @param {MessageSelectOptionData} option The select menu option to normalize\n   * @returns {MessageSelectOption}\n   */\n\n\n  static normalizeOption(option) {\n    let {\n      label,\n      value,\n      description,\n      emoji\n    } = option;\n    label = Util.verifyString(label, RangeError, 'SELECT_OPTION_LABEL');\n    value = Util.verifyString(value, RangeError, 'SELECT_OPTION_VALUE');\n    emoji = emoji ? Util.resolvePartialEmoji(emoji) : null;\n    description = description ? Util.verifyString(description, RangeError, 'SELECT_OPTION_DESCRIPTION', true) : null;\n    return {\n      label,\n      value,\n      description,\n      emoji,\n      default: option.default ?? false\n    };\n  }\n  /**\n   * Normalizes option input and resolves strings and emojis.\n   * @param {...MessageSelectOptionData|MessageSelectOptionData[]} options The select menu options to normalize\n   * @returns {MessageSelectOption[]}\n   */\n\n\n  static normalizeOptions() {\n    for (var _len3 = arguments.length, options = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      options[_key3] = arguments[_key3];\n    }\n\n    return options.flat(Infinity).map(option => this.normalizeOption(option));\n  }\n\n}\n\nmodule.exports = MessageSelectMenu;","map":{"version":3,"names":["BaseMessageComponent","require","MessageComponentTypes","Util","MessageSelectMenu","constructor","data","type","setup","customId","custom_id","placeholder","minValues","min_values","maxValues","max_values","options","normalizeOptions","disabled","setCustomId","verifyString","RangeError","setDisabled","setMaxValues","setMinValues","setPlaceholder","addOptions","push","spliceOptions","index","deleteCount","splice","toJSON","length","undefined","normalizeOption","option","label","value","description","emoji","resolvePartialEmoji","default","flat","Infinity","map","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/MessageSelectMenu.js"],"sourcesContent":["'use strict';\n\nconst BaseMessageComponent = require('./BaseMessageComponent');\nconst { MessageComponentTypes } = require('../util/Constants');\nconst Util = require('../util/Util');\n\n/**\n * Represents a select menu message component\n * @extends {BaseMessageComponent}\n */\nclass MessageSelectMenu extends BaseMessageComponent {\n  /**\n   * @typedef {BaseMessageComponentOptions} MessageSelectMenuOptions\n   * @property {string} [customId] A unique string to be sent in the interaction when clicked\n   * @property {string} [placeholder] Custom placeholder text to display when nothing is selected\n   * @property {number} [minValues] The minimum number of selections required\n   * @property {number} [maxValues] The maximum number of selections allowed\n   * @property {MessageSelectOption[]} [options] Options for the select menu\n   * @property {boolean} [disabled=false] Disables the select menu to prevent interactions\n   */\n\n  /**\n   * @typedef {Object} MessageSelectOption\n   * @property {string} label The text to be displayed on this option\n   * @property {string} value The value to be sent for this option\n   * @property {?string} description Optional description to show for this option\n   * @property {?RawEmoji} emoji Emoji to display for this option\n   * @property {boolean} default Render this option as the default selection\n   */\n\n  /**\n   * @typedef {Object} MessageSelectOptionData\n   * @property {string} label The text to be displayed on this option\n   * @property {string} value The value to be sent for this option\n   * @property {string} [description] Optional description to show for this option\n   * @property {EmojiIdentifierResolvable} [emoji] Emoji to display for this option\n   * @property {boolean} [default] Render this option as the default selection\n   */\n\n  /**\n   * @param {MessageSelectMenu|MessageSelectMenuOptions} [data={}] MessageSelectMenu to clone or raw data\n   */\n  constructor(data = {}) {\n    super({ type: 'SELECT_MENU' });\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * A unique string to be sent in the interaction when clicked\n     * @type {?string}\n     */\n    this.customId = data.custom_id ?? data.customId ?? null;\n\n    /**\n     * Custom placeholder text to display when nothing is selected\n     * @type {?string}\n     */\n    this.placeholder = data.placeholder ?? null;\n\n    /**\n     * The minimum number of selections required\n     * @type {?number}\n     */\n    this.minValues = data.min_values ?? data.minValues ?? null;\n\n    /**\n     * The maximum number of selections allowed\n     * @type {?number}\n     */\n    this.maxValues = data.max_values ?? data.maxValues ?? null;\n\n    /**\n     * Options for the select menu\n     * @type {MessageSelectOption[]}\n     */\n    this.options = this.constructor.normalizeOptions(data.options ?? []);\n\n    /**\n     * Whether this select menu is currently disabled\n     * @type {boolean}\n     */\n    this.disabled = data.disabled ?? false;\n  }\n\n  /**\n   * Sets the custom id of this select menu\n   * @param {string} customId A unique string to be sent in the interaction when clicked\n   * @returns {MessageSelectMenu}\n   */\n  setCustomId(customId) {\n    this.customId = Util.verifyString(customId, RangeError, 'SELECT_MENU_CUSTOM_ID');\n    return this;\n  }\n\n  /**\n   * Sets the interactive status of the select menu\n   * @param {boolean} [disabled=true] Whether this select menu should be disabled\n   * @returns {MessageSelectMenu}\n   */\n  setDisabled(disabled = true) {\n    this.disabled = disabled;\n    return this;\n  }\n\n  /**\n   * Sets the maximum number of selections allowed for this select menu\n   * @param {number} maxValues Number of selections to be allowed\n   * @returns {MessageSelectMenu}\n   */\n  setMaxValues(maxValues) {\n    this.maxValues = maxValues;\n    return this;\n  }\n\n  /**\n   * Sets the minimum number of selections required for this select menu\n   * <info>This will default the maxValues to the number of options, unless manually set</info>\n   * @param {number} minValues Number of selections to be required\n   * @returns {MessageSelectMenu}\n   */\n  setMinValues(minValues) {\n    this.minValues = minValues;\n    return this;\n  }\n\n  /**\n   * Sets the placeholder of this select menu\n   * @param {string} placeholder Custom placeholder text to display when nothing is selected\n   * @returns {MessageSelectMenu}\n   */\n  setPlaceholder(placeholder) {\n    this.placeholder = Util.verifyString(placeholder, RangeError, 'SELECT_MENU_PLACEHOLDER');\n    return this;\n  }\n\n  /**\n   * Adds options to the select menu.\n   * @param {...MessageSelectOptionData|MessageSelectOptionData[]} options The options to add\n   * @returns {MessageSelectMenu}\n   */\n  addOptions(...options) {\n    this.options.push(...this.constructor.normalizeOptions(options));\n    return this;\n  }\n\n  /**\n   * Removes, replaces, and inserts options in the select menu.\n   * @param {number} index The index to start at\n   * @param {number} deleteCount The number of options to remove\n   * @param {...MessageSelectOptionData|MessageSelectOptionData[]} [options] The replacing option objects\n   * @returns {MessageSelectMenu}\n   */\n  spliceOptions(index, deleteCount, ...options) {\n    this.options.splice(index, deleteCount, ...this.constructor.normalizeOptions(...options));\n    return this;\n  }\n\n  /**\n   * Transforms this select menu to a plain object\n   * @returns {Object} The raw data of this select menu\n   */\n  toJSON() {\n    return {\n      custom_id: this.customId,\n      disabled: this.disabled,\n      placeholder: this.placeholder,\n      min_values: this.minValues,\n      max_values: this.maxValues ?? (this.minValues ? this.options.length : undefined),\n      options: this.options,\n      type: typeof this.type === 'string' ? MessageComponentTypes[this.type] : this.type,\n    };\n  }\n\n  /**\n   * Normalizes option input and resolves strings and emojis.\n   * @param {MessageSelectOptionData} option The select menu option to normalize\n   * @returns {MessageSelectOption}\n   */\n  static normalizeOption(option) {\n    let { label, value, description, emoji } = option;\n\n    label = Util.verifyString(label, RangeError, 'SELECT_OPTION_LABEL');\n    value = Util.verifyString(value, RangeError, 'SELECT_OPTION_VALUE');\n    emoji = emoji ? Util.resolvePartialEmoji(emoji) : null;\n    description = description ? Util.verifyString(description, RangeError, 'SELECT_OPTION_DESCRIPTION', true) : null;\n\n    return { label, value, description, emoji, default: option.default ?? false };\n  }\n\n  /**\n   * Normalizes option input and resolves strings and emojis.\n   * @param {...MessageSelectOptionData|MessageSelectOptionData[]} options The select menu options to normalize\n   * @returns {MessageSelectOption[]}\n   */\n  static normalizeOptions(...options) {\n    return options.flat(Infinity).map(option => this.normalizeOption(option));\n  }\n}\n\nmodule.exports = MessageSelectMenu;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}