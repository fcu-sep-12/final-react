{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst VoiceState = require('./VoiceState');\n\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\n\nconst {\n  Error\n} = require('../errors');\n\nconst GuildMemberRoleManager = require('../managers/GuildMemberRoleManager');\n\nconst Permissions = require('../util/Permissions');\n/**\n * Represents a member of a guild on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\n\n\nclass GuildMember extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APIGuildMember} data The data for the guild member\n   * @param {Guild} guild The guild the member is part of\n   */\n  constructor(client, data, guild) {\n    super(client);\n    /**\n     * The guild that this member is part of\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n    /**\n     * The timestamp the member joined the guild at\n     * @type {?number}\n     */\n\n    this.joinedTimestamp = null;\n    /**\n     * The timestamp of when the member used their Nitro boost on the guild, if it was used\n     * @type {?number}\n     */\n\n    this.premiumSinceTimestamp = null;\n    /**\n     * Whether the member has been removed from the guild\n     * @type {boolean}\n     */\n\n    this.deleted = false;\n    /**\n     * The nickname of this member, if they have one\n     * @type {?string}\n     */\n\n    this.nickname = null;\n    /**\n     * Whether this member has yet to pass the guild's membership gate\n     * @type {boolean}\n     */\n\n    this.pending = false;\n    this._roles = [];\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('user' in data) {\n      /**\n       * The user that this guild member instance represents\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user, true);\n    }\n\n    if ('nick' in data) this.nickname = data.nick;\n    if ('joined_at' in data) this.joinedTimestamp = new Date(data.joined_at).getTime();\n\n    if ('premium_since' in data) {\n      this.premiumSinceTimestamp = data.premium_since ? new Date(data.premium_since).getTime() : null;\n    }\n\n    if ('roles' in data) this._roles = data.roles;\n    this.pending = data.pending ?? false;\n  }\n\n  _clone() {\n    const clone = super._clone();\n\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n  /**\n   * Whether this GuildMember is a partial\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partial() {\n    return !this.joinedTimestamp;\n  }\n  /**\n   * A manager for the roles belonging to this member\n   * @type {GuildMemberRoleManager}\n   * @readonly\n   */\n\n\n  get roles() {\n    return new GuildMemberRoleManager(this);\n  }\n  /**\n   * The voice state of this member\n   * @type {VoiceState}\n   * @readonly\n   */\n\n\n  get voice() {\n    return this.guild.voiceStates.cache.get(this.id) ?? new VoiceState(this.guild, {\n      user_id: this.id\n    });\n  }\n  /**\n   * The time this member joined the guild\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get joinedAt() {\n    return this.joinedTimestamp ? new Date(this.joinedTimestamp) : null;\n  }\n  /**\n   * The time of when the member used their Nitro boost on the guild, if it was used\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get premiumSince() {\n    return this.premiumSinceTimestamp ? new Date(this.premiumSinceTimestamp) : null;\n  }\n  /**\n   * The presence of this guild member\n   * @type {?Presence}\n   * @readonly\n   */\n\n\n  get presence() {\n    return this.guild.presences.resolve(this.id);\n  }\n  /**\n   * The displayed color of this member in base 10\n   * @type {number}\n   * @readonly\n   */\n\n\n  get displayColor() {\n    return this.roles.color?.color ?? 0;\n  }\n  /**\n   * The displayed color of this member in hexadecimal\n   * @type {string}\n   * @readonly\n   */\n\n\n  get displayHexColor() {\n    return this.roles.color?.hexColor ?? '#000000';\n  }\n  /**\n   * The member's id\n   * @type {Snowflake}\n   * @readonly\n   */\n\n\n  get id() {\n    return this.user.id;\n  }\n  /**\n   * The nickname of this member, or their username if they don't have one\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get displayName() {\n    return this.nickname ?? this.user.username;\n  }\n  /**\n   * The overall set of permissions for this member, taking only roles and owner status into account\n   * @type {Readonly<Permissions>}\n   * @readonly\n   */\n\n\n  get permissions() {\n    if (this.user.id === this.guild.ownerId) return new Permissions(Permissions.ALL).freeze();\n    return new Permissions(this.roles.cache.map(role => role.permissions)).freeze();\n  }\n  /**\n   * Whether the client user is above this user in the hierarchy, according to role position and guild ownership.\n   * This is a prerequisite for many moderative actions.\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get manageable() {\n    if (this.user.id === this.guild.ownerId) return false;\n    if (this.user.id === this.client.user.id) return false;\n    if (this.client.user.id === this.guild.ownerId) return true;\n    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return this.guild.me.roles.highest.comparePositionTo(this.roles.highest) > 0;\n  }\n  /**\n   * Whether this member is kickable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get kickable() {\n    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.KICK_MEMBERS);\n  }\n  /**\n   * Whether this member is bannable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get bannable() {\n    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.BAN_MEMBERS);\n  }\n  /**\n   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\n   * taking into account roles and permission overwrites.\n   * @param {GuildChannelResolvable} channel The guild channel to use as context\n   * @returns {Readonly<Permissions>}\n   */\n\n\n  permissionsIn(channel) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new Error('GUILD_CHANNEL_RESOLVE');\n    return channel.permissionsFor(this);\n  }\n  /**\n   * The data for editing a guild member.\n   * @typedef {Object} GuildMemberEditData\n   * @property {?string} [nick] The nickname to set for the member\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles or role ids to apply\n   * @property {boolean} [mute] Whether or not the member should be muted\n   * @property {boolean} [deaf] Whether or not the member should be deafened\n   * @property {GuildVoiceChannelResolvable|null} [channel] Channel to move the member to\n   * (if they are connected to voice), or `null` if you want to disconnect them from voice\n   */\n\n  /**\n   * Edits this member.\n   * @param {GuildMemberEditData} data The data to edit the member with\n   * @param {string} [reason] Reason for editing this user\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  edit(data, reason) {\n    return this.guild.members.edit(this, data, reason);\n  }\n  /**\n   * Sets the nickname for this member.\n   * @param {?string} nick The nickname for the guild member, or `null` if you want to reset their nickname\n   * @param {string} [reason] Reason for setting the nickname\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  setNickname(nick, reason) {\n    return this.edit({\n      nick\n    }, reason);\n  }\n  /**\n   * Creates a DM channel between the client and this member.\n   * @returns {Promise<DMChannel>}\n   */\n\n\n  createDM() {\n    return this.user.createDM();\n  }\n  /**\n   * Deletes any DMs with this member.\n   * @returns {Promise<DMChannel>}\n   */\n\n\n  deleteDM() {\n    return this.user.deleteDM();\n  }\n  /**\n   * Kicks this member from the guild.\n   * @param {string} [reason] Reason for kicking user\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  kick(reason) {\n    return this.guild.members.kick(this, reason);\n  }\n  /**\n   * Bans this guild member.\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // ban a guild member\n   * guildMember.ban({ days: 7, reason: 'They deserved it' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  ban(options) {\n    return this.guild.members.ban(this, options);\n  }\n  /**\n   * Fetches this GuildMember.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.guild.members.fetch({\n      user: this.id,\n      cache: true,\n      force\n    });\n  }\n  /**\n   * Whether this guild member equals another guild member. It compares all properties, so for most\n   * comparison it is advisable to just compare `member.id === member2.id` as it is significantly faster\n   * and is often what most users need.\n   * @param {GuildMember} member The member to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(member) {\n    return member instanceof this.constructor && this.id === member.id && this.partial === member.partial && this.guild.id === member.guild.id && this.joinedTimestamp === member.joinedTimestamp && this.nickname === member.nickname && this.pending === member.pending && (this._roles === member._roles || this._roles.length === member._roles.length && this._roles.every((role, i) => role === member._roles[i]));\n  }\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${member}!`);\n   */\n\n\n  toString() {\n    return `<@${this.nickname ? '!' : ''}${this.user.id}>`;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildId',\n      user: 'userId',\n      displayName: true,\n      roles: true\n    });\n  } // These are here only for documentation purposes - they are implemented by TextBasedChannel\n\n  /* eslint-disable no-empty-function */\n\n\n  send() {}\n\n}\n\nTextBasedChannel.applyToClass(GuildMember);\nmodule.exports = GuildMember;\n/**\n * @external APIGuildMember\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-member-object}\n */","map":{"version":3,"names":["Base","require","VoiceState","TextBasedChannel","Error","GuildMemberRoleManager","Permissions","GuildMember","constructor","client","data","guild","joinedTimestamp","premiumSinceTimestamp","deleted","nickname","pending","_roles","_patch","user","users","_add","nick","Date","joined_at","getTime","premium_since","roles","_clone","clone","slice","partial","voice","voiceStates","cache","get","id","user_id","joinedAt","premiumSince","presence","presences","resolve","displayColor","color","displayHexColor","hexColor","displayName","username","permissions","ownerId","ALL","freeze","map","role","manageable","me","highest","comparePositionTo","kickable","has","FLAGS","KICK_MEMBERS","bannable","BAN_MEMBERS","permissionsIn","channel","channels","permissionsFor","edit","reason","members","setNickname","createDM","deleteDM","kick","ban","options","fetch","force","equals","member","length","every","i","toString","toJSON","send","applyToClass","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/GuildMember.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst VoiceState = require('./VoiceState');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst { Error } = require('../errors');\nconst GuildMemberRoleManager = require('../managers/GuildMemberRoleManager');\nconst Permissions = require('../util/Permissions');\n\n/**\n * Represents a member of a guild on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass GuildMember extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APIGuildMember} data The data for the guild member\n   * @param {Guild} guild The guild the member is part of\n   */\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild that this member is part of\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The timestamp the member joined the guild at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The timestamp of when the member used their Nitro boost on the guild, if it was used\n     * @type {?number}\n     */\n    this.premiumSinceTimestamp = null;\n\n    /**\n     * Whether the member has been removed from the guild\n     * @type {boolean}\n     */\n    this.deleted = false;\n\n    /**\n     * The nickname of this member, if they have one\n     * @type {?string}\n     */\n    this.nickname = null;\n\n    /**\n     * Whether this member has yet to pass the guild's membership gate\n     * @type {boolean}\n     */\n    this.pending = false;\n\n    this._roles = [];\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    if ('user' in data) {\n      /**\n       * The user that this guild member instance represents\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user, true);\n    }\n\n    if ('nick' in data) this.nickname = data.nick;\n    if ('joined_at' in data) this.joinedTimestamp = new Date(data.joined_at).getTime();\n    if ('premium_since' in data) {\n      this.premiumSinceTimestamp = data.premium_since ? new Date(data.premium_since).getTime() : null;\n    }\n    if ('roles' in data) this._roles = data.roles;\n    this.pending = data.pending ?? false;\n  }\n\n  _clone() {\n    const clone = super._clone();\n    clone._roles = this._roles.slice();\n    return clone;\n  }\n\n  /**\n   * Whether this GuildMember is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return !this.joinedTimestamp;\n  }\n\n  /**\n   * A manager for the roles belonging to this member\n   * @type {GuildMemberRoleManager}\n   * @readonly\n   */\n  get roles() {\n    return new GuildMemberRoleManager(this);\n  }\n\n  /**\n   * The voice state of this member\n   * @type {VoiceState}\n   * @readonly\n   */\n  get voice() {\n    return this.guild.voiceStates.cache.get(this.id) ?? new VoiceState(this.guild, { user_id: this.id });\n  }\n\n  /**\n   * The time this member joined the guild\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp ? new Date(this.joinedTimestamp) : null;\n  }\n\n  /**\n   * The time of when the member used their Nitro boost on the guild, if it was used\n   * @type {?Date}\n   * @readonly\n   */\n  get premiumSince() {\n    return this.premiumSinceTimestamp ? new Date(this.premiumSinceTimestamp) : null;\n  }\n\n  /**\n   * The presence of this guild member\n   * @type {?Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.guild.presences.resolve(this.id);\n  }\n\n  /**\n   * The displayed color of this member in base 10\n   * @type {number}\n   * @readonly\n   */\n  get displayColor() {\n    return this.roles.color?.color ?? 0;\n  }\n\n  /**\n   * The displayed color of this member in hexadecimal\n   * @type {string}\n   * @readonly\n   */\n  get displayHexColor() {\n    return this.roles.color?.hexColor ?? '#000000';\n  }\n\n  /**\n   * The member's id\n   * @type {Snowflake}\n   * @readonly\n   */\n  get id() {\n    return this.user.id;\n  }\n\n  /**\n   * The nickname of this member, or their username if they don't have one\n   * @type {?string}\n   * @readonly\n   */\n  get displayName() {\n    return this.nickname ?? this.user.username;\n  }\n\n  /**\n   * The overall set of permissions for this member, taking only roles and owner status into account\n   * @type {Readonly<Permissions>}\n   * @readonly\n   */\n  get permissions() {\n    if (this.user.id === this.guild.ownerId) return new Permissions(Permissions.ALL).freeze();\n    return new Permissions(this.roles.cache.map(role => role.permissions)).freeze();\n  }\n\n  /**\n   * Whether the client user is above this user in the hierarchy, according to role position and guild ownership.\n   * This is a prerequisite for many moderative actions.\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    if (this.user.id === this.guild.ownerId) return false;\n    if (this.user.id === this.client.user.id) return false;\n    if (this.client.user.id === this.guild.ownerId) return true;\n    if (!this.guild.me) throw new Error('GUILD_UNCACHED_ME');\n    return this.guild.me.roles.highest.comparePositionTo(this.roles.highest) > 0;\n  }\n\n  /**\n   * Whether this member is kickable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get kickable() {\n    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.KICK_MEMBERS);\n  }\n\n  /**\n   * Whether this member is bannable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get bannable() {\n    return this.manageable && this.guild.me.permissions.has(Permissions.FLAGS.BAN_MEMBERS);\n  }\n\n  /**\n   * Returns `channel.permissionsFor(guildMember)`. Returns permissions for a member in a guild channel,\n   * taking into account roles and permission overwrites.\n   * @param {GuildChannelResolvable} channel The guild channel to use as context\n   * @returns {Readonly<Permissions>}\n   */\n  permissionsIn(channel) {\n    channel = this.guild.channels.resolve(channel);\n    if (!channel) throw new Error('GUILD_CHANNEL_RESOLVE');\n    return channel.permissionsFor(this);\n  }\n\n  /**\n   * The data for editing a guild member.\n   * @typedef {Object} GuildMemberEditData\n   * @property {?string} [nick] The nickname to set for the member\n   * @property {Collection<Snowflake, Role>|RoleResolvable[]} [roles] The roles or role ids to apply\n   * @property {boolean} [mute] Whether or not the member should be muted\n   * @property {boolean} [deaf] Whether or not the member should be deafened\n   * @property {GuildVoiceChannelResolvable|null} [channel] Channel to move the member to\n   * (if they are connected to voice), or `null` if you want to disconnect them from voice\n   */\n\n  /**\n   * Edits this member.\n   * @param {GuildMemberEditData} data The data to edit the member with\n   * @param {string} [reason] Reason for editing this user\n   * @returns {Promise<GuildMember>}\n   */\n  edit(data, reason) {\n    return this.guild.members.edit(this, data, reason);\n  }\n\n  /**\n   * Sets the nickname for this member.\n   * @param {?string} nick The nickname for the guild member, or `null` if you want to reset their nickname\n   * @param {string} [reason] Reason for setting the nickname\n   * @returns {Promise<GuildMember>}\n   */\n  setNickname(nick, reason) {\n    return this.edit({ nick }, reason);\n  }\n\n  /**\n   * Creates a DM channel between the client and this member.\n   * @returns {Promise<DMChannel>}\n   */\n  createDM() {\n    return this.user.createDM();\n  }\n\n  /**\n   * Deletes any DMs with this member.\n   * @returns {Promise<DMChannel>}\n   */\n  deleteDM() {\n    return this.user.deleteDM();\n  }\n\n  /**\n   * Kicks this member from the guild.\n   * @param {string} [reason] Reason for kicking user\n   * @returns {Promise<GuildMember>}\n   */\n  kick(reason) {\n    return this.guild.members.kick(this, reason);\n  }\n\n  /**\n   * Bans this guild member.\n   * @param {BanOptions} [options] Options for the ban\n   * @returns {Promise<GuildMember>}\n   * @example\n   * // ban a guild member\n   * guildMember.ban({ days: 7, reason: 'They deserved it' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  ban(options) {\n    return this.guild.members.ban(this, options);\n  }\n\n  /**\n   * Fetches this GuildMember.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<GuildMember>}\n   */\n  fetch(force = true) {\n    return this.guild.members.fetch({ user: this.id, cache: true, force });\n  }\n\n  /**\n   * Whether this guild member equals another guild member. It compares all properties, so for most\n   * comparison it is advisable to just compare `member.id === member2.id` as it is significantly faster\n   * and is often what most users need.\n   * @param {GuildMember} member The member to compare with\n   * @returns {boolean}\n   */\n  equals(member) {\n    return (\n      member instanceof this.constructor &&\n      this.id === member.id &&\n      this.partial === member.partial &&\n      this.guild.id === member.guild.id &&\n      this.joinedTimestamp === member.joinedTimestamp &&\n      this.nickname === member.nickname &&\n      this.pending === member.pending &&\n      (this._roles === member._roles ||\n        (this._roles.length === member._roles.length && this._roles.every((role, i) => role === member._roles[i])))\n    );\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the GuildMember object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${member}!`);\n   */\n  toString() {\n    return `<@${this.nickname ? '!' : ''}${this.user.id}>`;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildId',\n      user: 'userId',\n      displayName: true,\n      roles: true,\n    });\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n}\n\nTextBasedChannel.applyToClass(GuildMember);\n\nmodule.exports = GuildMember;\n\n/**\n * @external APIGuildMember\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-member-object}\n */\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAME,gBAAgB,GAAGF,OAAO,CAAC,+BAAD,CAAhC;;AACA,MAAM;EAAEG;AAAF,IAAYH,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMI,sBAAsB,GAAGJ,OAAO,CAAC,oCAAD,CAAtC;;AACA,MAAMK,WAAW,GAAGL,OAAO,CAAC,qBAAD,CAA3B;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,WAAN,SAA0BP,IAA1B,CAA+B;EAC7B;AACF;AACA;AACA;AACA;EACEQ,WAAW,CAACC,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAsB;IAC/B,MAAMF,MAAN;IAEA;AACJ;AACA;AACA;;IACI,KAAKE,KAAL,GAAaA,KAAb;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,eAAL,GAAuB,IAAvB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,qBAAL,GAA6B,IAA7B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,KAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,QAAL,GAAgB,IAAhB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,KAAf;IAEA,KAAKC,MAAL,GAAc,EAAd;IACA,IAAIP,IAAJ,EAAU,KAAKQ,MAAL,CAAYR,IAAZ;EACX;;EAEDQ,MAAM,CAACR,IAAD,EAAO;IACX,IAAI,UAAUA,IAAd,EAAoB;MAClB;AACN;AACA;AACA;MACM,KAAKS,IAAL,GAAY,KAAKV,MAAL,CAAYW,KAAZ,CAAkBC,IAAlB,CAAuBX,IAAI,CAACS,IAA5B,EAAkC,IAAlC,CAAZ;IACD;;IAED,IAAI,UAAUT,IAAd,EAAoB,KAAKK,QAAL,GAAgBL,IAAI,CAACY,IAArB;IACpB,IAAI,eAAeZ,IAAnB,EAAyB,KAAKE,eAAL,GAAuB,IAAIW,IAAJ,CAASb,IAAI,CAACc,SAAd,EAAyBC,OAAzB,EAAvB;;IACzB,IAAI,mBAAmBf,IAAvB,EAA6B;MAC3B,KAAKG,qBAAL,GAA6BH,IAAI,CAACgB,aAAL,GAAqB,IAAIH,IAAJ,CAASb,IAAI,CAACgB,aAAd,EAA6BD,OAA7B,EAArB,GAA8D,IAA3F;IACD;;IACD,IAAI,WAAWf,IAAf,EAAqB,KAAKO,MAAL,GAAcP,IAAI,CAACiB,KAAnB;IACrB,KAAKX,OAAL,GAAeN,IAAI,CAACM,OAAL,IAAgB,KAA/B;EACD;;EAEDY,MAAM,GAAG;IACP,MAAMC,KAAK,GAAG,MAAMD,MAAN,EAAd;;IACAC,KAAK,CAACZ,MAAN,GAAe,KAAKA,MAAL,CAAYa,KAAZ,EAAf;IACA,OAAOD,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACa,IAAPE,OAAO,GAAG;IACZ,OAAO,CAAC,KAAKnB,eAAb;EACD;EAED;AACF;AACA;AACA;AACA;;;EACW,IAALe,KAAK,GAAG;IACV,OAAO,IAAItB,sBAAJ,CAA2B,IAA3B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACW,IAAL2B,KAAK,GAAG;IACV,OAAO,KAAKrB,KAAL,CAAWsB,WAAX,CAAuBC,KAAvB,CAA6BC,GAA7B,CAAiC,KAAKC,EAAtC,KAA6C,IAAIlC,UAAJ,CAAe,KAAKS,KAApB,EAA2B;MAAE0B,OAAO,EAAE,KAAKD;IAAhB,CAA3B,CAApD;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,IAARE,QAAQ,GAAG;IACb,OAAO,KAAK1B,eAAL,GAAuB,IAAIW,IAAJ,CAAS,KAAKX,eAAd,CAAvB,GAAwD,IAA/D;EACD;EAED;AACF;AACA;AACA;AACA;;;EACkB,IAAZ2B,YAAY,GAAG;IACjB,OAAO,KAAK1B,qBAAL,GAA6B,IAAIU,IAAJ,CAAS,KAAKV,qBAAd,CAA7B,GAAoE,IAA3E;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,IAAR2B,QAAQ,GAAG;IACb,OAAO,KAAK7B,KAAL,CAAW8B,SAAX,CAAqBC,OAArB,CAA6B,KAAKN,EAAlC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACkB,IAAZO,YAAY,GAAG;IACjB,OAAO,KAAKhB,KAAL,CAAWiB,KAAX,EAAkBA,KAAlB,IAA2B,CAAlC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACqB,IAAfC,eAAe,GAAG;IACpB,OAAO,KAAKlB,KAAL,CAAWiB,KAAX,EAAkBE,QAAlB,IAA8B,SAArC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACQ,IAAFV,EAAE,GAAG;IACP,OAAO,KAAKjB,IAAL,CAAUiB,EAAjB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACiB,IAAXW,WAAW,GAAG;IAChB,OAAO,KAAKhC,QAAL,IAAiB,KAAKI,IAAL,CAAU6B,QAAlC;EACD;EAED;AACF;AACA;AACA;AACA;;;EACiB,IAAXC,WAAW,GAAG;IAChB,IAAI,KAAK9B,IAAL,CAAUiB,EAAV,KAAiB,KAAKzB,KAAL,CAAWuC,OAAhC,EAAyC,OAAO,IAAI5C,WAAJ,CAAgBA,WAAW,CAAC6C,GAA5B,EAAiCC,MAAjC,EAAP;IACzC,OAAO,IAAI9C,WAAJ,CAAgB,KAAKqB,KAAL,CAAWO,KAAX,CAAiBmB,GAAjB,CAAqBC,IAAI,IAAIA,IAAI,CAACL,WAAlC,CAAhB,EAAgEG,MAAhE,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACgB,IAAVG,UAAU,GAAG;IACf,IAAI,KAAKpC,IAAL,CAAUiB,EAAV,KAAiB,KAAKzB,KAAL,CAAWuC,OAAhC,EAAyC,OAAO,KAAP;IACzC,IAAI,KAAK/B,IAAL,CAAUiB,EAAV,KAAiB,KAAK3B,MAAL,CAAYU,IAAZ,CAAiBiB,EAAtC,EAA0C,OAAO,KAAP;IAC1C,IAAI,KAAK3B,MAAL,CAAYU,IAAZ,CAAiBiB,EAAjB,KAAwB,KAAKzB,KAAL,CAAWuC,OAAvC,EAAgD,OAAO,IAAP;IAChD,IAAI,CAAC,KAAKvC,KAAL,CAAW6C,EAAhB,EAAoB,MAAM,IAAIpD,KAAJ,CAAU,mBAAV,CAAN;IACpB,OAAO,KAAKO,KAAL,CAAW6C,EAAX,CAAc7B,KAAd,CAAoB8B,OAApB,CAA4BC,iBAA5B,CAA8C,KAAK/B,KAAL,CAAW8B,OAAzD,IAAoE,CAA3E;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,IAARE,QAAQ,GAAG;IACb,OAAO,KAAKJ,UAAL,IAAmB,KAAK5C,KAAL,CAAW6C,EAAX,CAAcP,WAAd,CAA0BW,GAA1B,CAA8BtD,WAAW,CAACuD,KAAZ,CAAkBC,YAAhD,CAA1B;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,IAARC,QAAQ,GAAG;IACb,OAAO,KAAKR,UAAL,IAAmB,KAAK5C,KAAL,CAAW6C,EAAX,CAAcP,WAAd,CAA0BW,GAA1B,CAA8BtD,WAAW,CAACuD,KAAZ,CAAkBG,WAAhD,CAA1B;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEC,aAAa,CAACC,OAAD,EAAU;IACrBA,OAAO,GAAG,KAAKvD,KAAL,CAAWwD,QAAX,CAAoBzB,OAApB,CAA4BwB,OAA5B,CAAV;IACA,IAAI,CAACA,OAAL,EAAc,MAAM,IAAI9D,KAAJ,CAAU,uBAAV,CAAN;IACd,OAAO8D,OAAO,CAACE,cAAR,CAAuB,IAAvB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;;EACEC,IAAI,CAAC3D,IAAD,EAAO4D,MAAP,EAAe;IACjB,OAAO,KAAK3D,KAAL,CAAW4D,OAAX,CAAmBF,IAAnB,CAAwB,IAAxB,EAA8B3D,IAA9B,EAAoC4D,MAApC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEE,WAAW,CAAClD,IAAD,EAAOgD,MAAP,EAAe;IACxB,OAAO,KAAKD,IAAL,CAAU;MAAE/C;IAAF,CAAV,EAAoBgD,MAApB,CAAP;EACD;EAED;AACF;AACA;AACA;;;EACEG,QAAQ,GAAG;IACT,OAAO,KAAKtD,IAAL,CAAUsD,QAAV,EAAP;EACD;EAED;AACF;AACA;AACA;;;EACEC,QAAQ,GAAG;IACT,OAAO,KAAKvD,IAAL,CAAUuD,QAAV,EAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,IAAI,CAACL,MAAD,EAAS;IACX,OAAO,KAAK3D,KAAL,CAAW4D,OAAX,CAAmBI,IAAnB,CAAwB,IAAxB,EAA8BL,MAA9B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEM,GAAG,CAACC,OAAD,EAAU;IACX,OAAO,KAAKlE,KAAL,CAAW4D,OAAX,CAAmBK,GAAnB,CAAuB,IAAvB,EAA6BC,OAA7B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,KAAK,GAAe;IAAA,IAAdC,KAAc,uEAAN,IAAM;IAClB,OAAO,KAAKpE,KAAL,CAAW4D,OAAX,CAAmBO,KAAnB,CAAyB;MAAE3D,IAAI,EAAE,KAAKiB,EAAb;MAAiBF,KAAK,EAAE,IAAxB;MAA8B6C;IAA9B,CAAzB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEC,MAAM,CAACC,MAAD,EAAS;IACb,OACEA,MAAM,YAAY,KAAKzE,WAAvB,IACA,KAAK4B,EAAL,KAAY6C,MAAM,CAAC7C,EADnB,IAEA,KAAKL,OAAL,KAAiBkD,MAAM,CAAClD,OAFxB,IAGA,KAAKpB,KAAL,CAAWyB,EAAX,KAAkB6C,MAAM,CAACtE,KAAP,CAAayB,EAH/B,IAIA,KAAKxB,eAAL,KAAyBqE,MAAM,CAACrE,eAJhC,IAKA,KAAKG,QAAL,KAAkBkE,MAAM,CAAClE,QALzB,IAMA,KAAKC,OAAL,KAAiBiE,MAAM,CAACjE,OANxB,KAOC,KAAKC,MAAL,KAAgBgE,MAAM,CAAChE,MAAvB,IACE,KAAKA,MAAL,CAAYiE,MAAZ,KAAuBD,MAAM,CAAChE,MAAP,CAAciE,MAArC,IAA+C,KAAKjE,MAAL,CAAYkE,KAAZ,CAAkB,CAAC7B,IAAD,EAAO8B,CAAP,KAAa9B,IAAI,KAAK2B,MAAM,CAAChE,MAAP,CAAcmE,CAAd,CAAxC,CARlD,CADF;EAWD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACEC,QAAQ,GAAG;IACT,OAAQ,KAAI,KAAKtE,QAAL,GAAgB,GAAhB,GAAsB,EAAG,GAAE,KAAKI,IAAL,CAAUiB,EAAG,GAApD;EACD;;EAEDkD,MAAM,GAAG;IACP,OAAO,MAAMA,MAAN,CAAa;MAClB3E,KAAK,EAAE,SADW;MAElBQ,IAAI,EAAE,QAFY;MAGlB4B,WAAW,EAAE,IAHK;MAIlBpB,KAAK,EAAE;IAJW,CAAb,CAAP;EAMD,CA/U4B,CAiV7B;;EACA;;;EACA4D,IAAI,GAAG,CAAE;;AAnVoB;;AAsV/BpF,gBAAgB,CAACqF,YAAjB,CAA8BjF,WAA9B;AAEAkF,MAAM,CAACC,OAAP,GAAiBnF,WAAjB;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}