{"ast":null,"code":"'use strict';\n\nconst CachedManager = require('./CachedManager');\n\nconst GuildMember = require('../structures/GuildMember');\n\nconst Message = require('../structures/Message');\n\nconst ThreadMember = require('../structures/ThreadMember');\n\nconst User = require('../structures/User');\n/**\n * Manages API methods for users and stores their cache.\n * @extends {CachedManager}\n */\n\n\nclass UserManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, User, iterable);\n  }\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name UserManager#cache\n   */\n\n  /**\n   * Data that resolves to give a User object. This can be:\n   * * A User object\n   * * A Snowflake\n   * * A Message object (resolves to the message author)\n   * * A GuildMember object\n   * * A ThreadMember object\n   * @typedef {User|Snowflake|Message|GuildMember|ThreadMember} UserResolvable\n   */\n\n  /**\n   * Resolves a {@link UserResolvable} to a {@link User} object.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?User}\n   */\n\n\n  resolve(user) {\n    if (user instanceof GuildMember || user instanceof ThreadMember) return user.user;\n    if (user instanceof Message) return user.author;\n    return super.resolve(user);\n  }\n  /**\n   * Resolves a {@link UserResolvable} to a {@link User} id.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?Snowflake}\n   */\n\n\n  resolveId(user) {\n    if (user instanceof ThreadMember) return user.id;\n    if (user instanceof GuildMember) return user.user.id;\n    if (user instanceof Message) return user.author.id;\n    return super.resolveId(user);\n  }\n  /**\n   * Obtains a user from Discord, or the user cache if it's already available.\n   * @param {Snowflake} id The user's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<User>}\n   */\n\n\n  async fetch(id) {\n    let {\n      cache = true,\n      force = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!force) {\n      const existing = this.cache.get(id);\n      if (existing && !existing.partial) return existing;\n    }\n\n    const data = await this.client.api.users(id).get();\n    return this._add(data, cache);\n  }\n\n}\n\nmodule.exports = UserManager;","map":{"version":3,"names":["CachedManager","require","GuildMember","Message","ThreadMember","User","UserManager","constructor","client","iterable","resolve","user","author","resolveId","id","fetch","cache","force","existing","get","partial","data","api","users","_add","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/UserManager.js"],"sourcesContent":["'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst GuildMember = require('../structures/GuildMember');\nconst Message = require('../structures/Message');\nconst ThreadMember = require('../structures/ThreadMember');\nconst User = require('../structures/User');\n\n/**\n * Manages API methods for users and stores their cache.\n * @extends {CachedManager}\n */\nclass UserManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, User, iterable);\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name UserManager#cache\n   */\n\n  /**\n   * Data that resolves to give a User object. This can be:\n   * * A User object\n   * * A Snowflake\n   * * A Message object (resolves to the message author)\n   * * A GuildMember object\n   * * A ThreadMember object\n   * @typedef {User|Snowflake|Message|GuildMember|ThreadMember} UserResolvable\n   */\n\n  /**\n   * Resolves a {@link UserResolvable} to a {@link User} object.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?User}\n   */\n  resolve(user) {\n    if (user instanceof GuildMember || user instanceof ThreadMember) return user.user;\n    if (user instanceof Message) return user.author;\n    return super.resolve(user);\n  }\n\n  /**\n   * Resolves a {@link UserResolvable} to a {@link User} id.\n   * @param {UserResolvable} user The UserResolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveId(user) {\n    if (user instanceof ThreadMember) return user.id;\n    if (user instanceof GuildMember) return user.user.id;\n    if (user instanceof Message) return user.author.id;\n    return super.resolveId(user);\n  }\n\n  /**\n   * Obtains a user from Discord, or the user cache if it's already available.\n   * @param {Snowflake} id The user's id\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<User>}\n   */\n  async fetch(id, { cache = true, force = false } = {}) {\n    if (!force) {\n      const existing = this.cache.get(id);\n      if (existing && !existing.partial) return existing;\n    }\n\n    const data = await this.client.api.users(id).get();\n    return this._add(data, cache);\n  }\n}\n\nmodule.exports = UserManager;\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,2BAAD,CAA3B;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,uBAAD,CAAvB;;AACA,MAAMG,YAAY,GAAGH,OAAO,CAAC,4BAAD,CAA5B;;AACA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,oBAAD,CAApB;AAEA;AACA;AACA;AACA;;;AACA,MAAMK,WAAN,SAA0BN,aAA1B,CAAwC;EACtCO,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmB;IAC5B,MAAMD,MAAN,EAAcH,IAAd,EAAoBI,QAApB;EACD;EAED;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;;EACEC,OAAO,CAACC,IAAD,EAAO;IACZ,IAAIA,IAAI,YAAYT,WAAhB,IAA+BS,IAAI,YAAYP,YAAnD,EAAiE,OAAOO,IAAI,CAACA,IAAZ;IACjE,IAAIA,IAAI,YAAYR,OAApB,EAA6B,OAAOQ,IAAI,CAACC,MAAZ;IAC7B,OAAO,MAAMF,OAAN,CAAcC,IAAd,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,SAAS,CAACF,IAAD,EAAO;IACd,IAAIA,IAAI,YAAYP,YAApB,EAAkC,OAAOO,IAAI,CAACG,EAAZ;IAClC,IAAIH,IAAI,YAAYT,WAApB,EAAiC,OAAOS,IAAI,CAACA,IAAL,CAAUG,EAAjB;IACjC,IAAIH,IAAI,YAAYR,OAApB,EAA6B,OAAOQ,IAAI,CAACC,MAAL,CAAYE,EAAnB;IAC7B,OAAO,MAAMD,SAAN,CAAgBF,IAAhB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACa,MAALI,KAAK,CAACD,EAAD,EAA2C;IAAA,IAAtC;MAAEE,KAAK,GAAG,IAAV;MAAgBC,KAAK,GAAG;IAAxB,CAAsC,uEAAJ,EAAI;;IACpD,IAAI,CAACA,KAAL,EAAY;MACV,MAAMC,QAAQ,GAAG,KAAKF,KAAL,CAAWG,GAAX,CAAeL,EAAf,CAAjB;MACA,IAAII,QAAQ,IAAI,CAACA,QAAQ,CAACE,OAA1B,EAAmC,OAAOF,QAAP;IACpC;;IAED,MAAMG,IAAI,GAAG,MAAM,KAAKb,MAAL,CAAYc,GAAZ,CAAgBC,KAAhB,CAAsBT,EAAtB,EAA0BK,GAA1B,EAAnB;IACA,OAAO,KAAKK,IAAL,CAAUH,IAAV,EAAgBL,KAAhB,CAAP;EACD;;AA1DqC;;AA6DxCS,MAAM,CAACC,OAAP,GAAiBpB,WAAjB"},"metadata":{},"sourceType":"script"}