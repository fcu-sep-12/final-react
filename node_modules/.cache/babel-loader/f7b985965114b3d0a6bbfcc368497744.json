{"ast":null,"code":"'use strict';\n\nconst CachedManager = require('./CachedManager');\n\nconst VoiceState = require('../structures/VoiceState');\n/**\n * Manages API methods for VoiceStates and stores their cache.\n * @extends {CachedManager}\n */\n\n\nclass VoiceStateManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, VoiceState, iterable);\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n  }\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, VoiceState>}\n   * @name VoiceStateManager#cache\n   */\n\n\n  _add(data) {\n    let cache = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const existing = this.cache.get(data.user_id);\n    if (existing) return existing._patch(data);\n    const entry = new this.holds(this.guild, data);\n    if (cache) this.cache.set(data.user_id, entry);\n    return entry;\n  }\n\n}\n\nmodule.exports = VoiceStateManager;","map":{"version":3,"names":["CachedManager","require","VoiceState","VoiceStateManager","constructor","guild","iterable","client","_add","data","cache","existing","get","user_id","_patch","entry","holds","set","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/VoiceStateManager.js"],"sourcesContent":["'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst VoiceState = require('../structures/VoiceState');\n\n/**\n * Manages API methods for VoiceStates and stores their cache.\n * @extends {CachedManager}\n */\nclass VoiceStateManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, VoiceState, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, VoiceState>}\n   * @name VoiceStateManager#cache\n   */\n\n  _add(data, cache = true) {\n    const existing = this.cache.get(data.user_id);\n    if (existing) return existing._patch(data);\n\n    const entry = new this.holds(this.guild, data);\n    if (cache) this.cache.set(data.user_id, entry);\n    return entry;\n  }\n}\n\nmodule.exports = VoiceStateManager;\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,0BAAD,CAA1B;AAEA;AACA;AACA;AACA;;;AACA,MAAME,iBAAN,SAAgCH,aAAhC,CAA8C;EAC5CI,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkB;IAC3B,MAAMD,KAAK,CAACE,MAAZ,EAAoBL,UAApB,EAAgCI,QAAhC;IAEA;AACJ;AACA;AACA;;IACI,KAAKD,KAAL,GAAaA,KAAb;EACD;EAED;AACF;AACA;AACA;AACA;;;EAEEG,IAAI,CAACC,IAAD,EAAqB;IAAA,IAAdC,KAAc,uEAAN,IAAM;IACvB,MAAMC,QAAQ,GAAG,KAAKD,KAAL,CAAWE,GAAX,CAAeH,IAAI,CAACI,OAApB,CAAjB;IACA,IAAIF,QAAJ,EAAc,OAAOA,QAAQ,CAACG,MAAT,CAAgBL,IAAhB,CAAP;IAEd,MAAMM,KAAK,GAAG,IAAI,KAAKC,KAAT,CAAe,KAAKX,KAApB,EAA2BI,IAA3B,CAAd;IACA,IAAIC,KAAJ,EAAW,KAAKA,KAAL,CAAWO,GAAX,CAAeR,IAAI,CAACI,OAApB,EAA6BE,KAA7B;IACX,OAAOA,KAAP;EACD;;AAxB2C;;AA2B9CG,MAAM,CAACC,OAAP,GAAiBhB,iBAAjB"},"metadata":{},"sourceType":"script"}