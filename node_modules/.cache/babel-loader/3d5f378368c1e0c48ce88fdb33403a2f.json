{"ast":null,"code":"'use strict';\n\nconst BaseClient = require('./BaseClient');\n\nconst {\n  Error\n} = require('../errors');\n\nconst Webhook = require('../structures/Webhook');\n/**\n * The webhook client.\n * @implements {Webhook}\n * @extends {BaseClient}\n */\n\n\nclass WebhookClient extends BaseClient {\n  /**\n   * The data for the webhook client containing either an id and token or just a URL\n   * @typedef {Object} WebhookClientData\n   * @property {Snowflake} [id] The id of the webhook\n   * @property {string} [token] The token of the webhook\n   * @property {string} [url] The full url for the webhook client\n   */\n\n  /**\n   * @param {WebhookClientData} data The data of the webhook\n   * @param {ClientOptions} [options] Options for the client\n   */\n  constructor(data, options) {\n    super(options);\n    Object.defineProperty(this, 'client', {\n      value: this\n    });\n    let {\n      id,\n      token\n    } = data;\n\n    if ('url' in data) {\n      const url = data.url.match( // eslint-disable-next-line no-useless-escape\n      /^https?:\\/\\/(?:canary|ptb)?\\.?discord\\.com\\/api\\/webhooks(?:\\/v[0-9]\\d*)?\\/([^\\/]+)\\/([^\\/]+)/i);\n      if (!url || url.length <= 1) throw new Error('WEBHOOK_URL_INVALID');\n      [, id, token] = url;\n    }\n\n    this.id = id;\n    Object.defineProperty(this, 'token', {\n      value: token,\n      writable: true,\n      configurable: true\n    });\n  } // These are here only for documentation purposes - they are implemented by Webhook\n\n  /* eslint-disable no-empty-function */\n\n\n  send() {}\n\n  sendSlackMessage() {}\n\n  fetchMessage() {}\n\n  edit() {}\n\n  editMessage() {}\n\n  delete() {}\n\n  deleteMessage() {}\n\n  get createdTimestamp() {}\n\n  get createdAt() {}\n\n  get url() {}\n\n}\n\nWebhook.applyToClass(WebhookClient);\nmodule.exports = WebhookClient;","map":{"version":3,"names":["BaseClient","require","Error","Webhook","WebhookClient","constructor","data","options","Object","defineProperty","value","id","token","url","match","length","writable","configurable","send","sendSlackMessage","fetchMessage","edit","editMessage","delete","deleteMessage","createdTimestamp","createdAt","applyToClass","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/WebhookClient.js"],"sourcesContent":["'use strict';\n\nconst BaseClient = require('./BaseClient');\nconst { Error } = require('../errors');\nconst Webhook = require('../structures/Webhook');\n\n/**\n * The webhook client.\n * @implements {Webhook}\n * @extends {BaseClient}\n */\nclass WebhookClient extends BaseClient {\n  /**\n   * The data for the webhook client containing either an id and token or just a URL\n   * @typedef {Object} WebhookClientData\n   * @property {Snowflake} [id] The id of the webhook\n   * @property {string} [token] The token of the webhook\n   * @property {string} [url] The full url for the webhook client\n   */\n\n  /**\n   * @param {WebhookClientData} data The data of the webhook\n   * @param {ClientOptions} [options] Options for the client\n   */\n  constructor(data, options) {\n    super(options);\n    Object.defineProperty(this, 'client', { value: this });\n    let { id, token } = data;\n\n    if ('url' in data) {\n      const url = data.url.match(\n        // eslint-disable-next-line no-useless-escape\n        /^https?:\\/\\/(?:canary|ptb)?\\.?discord\\.com\\/api\\/webhooks(?:\\/v[0-9]\\d*)?\\/([^\\/]+)\\/([^\\/]+)/i,\n      );\n\n      if (!url || url.length <= 1) throw new Error('WEBHOOK_URL_INVALID');\n\n      [, id, token] = url;\n    }\n\n    this.id = id;\n    Object.defineProperty(this, 'token', { value: token, writable: true, configurable: true });\n  }\n\n  // These are here only for documentation purposes - they are implemented by Webhook\n  /* eslint-disable no-empty-function */\n  send() {}\n  sendSlackMessage() {}\n  fetchMessage() {}\n  edit() {}\n  editMessage() {}\n  delete() {}\n  deleteMessage() {}\n  get createdTimestamp() {}\n  get createdAt() {}\n  get url() {}\n}\n\nWebhook.applyToClass(WebhookClient);\n\nmodule.exports = WebhookClient;\n"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAM;EAAEC;AAAF,IAAYD,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAME,OAAO,GAAGF,OAAO,CAAC,uBAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,aAAN,SAA4BJ,UAA5B,CAAuC;EACrC;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;EACEK,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;IACzB,MAAMA,OAAN;IACAC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;MAAEC,KAAK,EAAE;IAAT,CAAtC;IACA,IAAI;MAAEC,EAAF;MAAMC;IAAN,IAAgBN,IAApB;;IAEA,IAAI,SAASA,IAAb,EAAmB;MACjB,MAAMO,GAAG,GAAGP,IAAI,CAACO,GAAL,CAASC,KAAT,EACV;MACA,gGAFU,CAAZ;MAKA,IAAI,CAACD,GAAD,IAAQA,GAAG,CAACE,MAAJ,IAAc,CAA1B,EAA6B,MAAM,IAAIb,KAAJ,CAAU,qBAAV,CAAN;MAE7B,GAAGS,EAAH,EAAOC,KAAP,IAAgBC,GAAhB;IACD;;IAED,KAAKF,EAAL,GAAUA,EAAV;IACAH,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;MAAEC,KAAK,EAAEE,KAAT;MAAgBI,QAAQ,EAAE,IAA1B;MAAgCC,YAAY,EAAE;IAA9C,CAArC;EACD,CA/BoC,CAiCrC;;EACA;;;EACAC,IAAI,GAAG,CAAE;;EACTC,gBAAgB,GAAG,CAAE;;EACrBC,YAAY,GAAG,CAAE;;EACjBC,IAAI,GAAG,CAAE;;EACTC,WAAW,GAAG,CAAE;;EAChBC,MAAM,GAAG,CAAE;;EACXC,aAAa,GAAG,CAAE;;EACE,IAAhBC,gBAAgB,GAAG,CAAE;;EACZ,IAATC,SAAS,GAAG,CAAE;;EACX,IAAHb,GAAG,GAAG,CAAE;;AA5CyB;;AA+CvCV,OAAO,CAACwB,YAAR,CAAqBvB,aAArB;AAEAwB,MAAM,CAACC,OAAP,GAAiBzB,aAAjB"},"metadata":{},"sourceType":"script"}