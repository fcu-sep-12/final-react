{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst AnonymousGuild = require('./AnonymousGuild');\n\nconst GuildAuditLogs = require('./GuildAuditLogs');\n\nconst GuildPreview = require('./GuildPreview');\n\nconst GuildTemplate = require('./GuildTemplate');\n\nconst Integration = require('./Integration');\n\nconst Webhook = require('./Webhook');\n\nconst WelcomeScreen = require('./WelcomeScreen');\n\nconst {\n  Error\n} = require('../errors');\n\nconst GuildApplicationCommandManager = require('../managers/GuildApplicationCommandManager');\n\nconst GuildBanManager = require('../managers/GuildBanManager');\n\nconst GuildChannelManager = require('../managers/GuildChannelManager');\n\nconst GuildEmojiManager = require('../managers/GuildEmojiManager');\n\nconst GuildInviteManager = require('../managers/GuildInviteManager');\n\nconst GuildMemberManager = require('../managers/GuildMemberManager');\n\nconst GuildStickerManager = require('../managers/GuildStickerManager');\n\nconst PresenceManager = require('../managers/PresenceManager');\n\nconst RoleManager = require('../managers/RoleManager');\n\nconst StageInstanceManager = require('../managers/StageInstanceManager');\n\nconst VoiceStateManager = require('../managers/VoiceStateManager');\n\nconst {\n  ChannelTypes,\n  DefaultMessageNotificationLevels,\n  PartialTypes,\n  VerificationLevels,\n  ExplicitContentFilterLevels,\n  Status,\n  MFALevels,\n  PremiumTiers\n} = require('../util/Constants');\n\nconst DataResolver = require('../util/DataResolver');\n\nconst SystemChannelFlags = require('../util/SystemChannelFlags');\n\nconst Util = require('../util/Util');\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with {@link Guild#available}.</info>\n * @extends {AnonymousGuild}\n */\n\n\nclass Guild extends AnonymousGuild {\n  constructor(client, data) {\n    super(client, data, false);\n    /**\n     * A manager of the application commands belonging to this guild\n     * @type {GuildApplicationCommandManager}\n     */\n\n    this.commands = new GuildApplicationCommandManager(this);\n    /**\n     * A manager of the members belonging to this guild\n     * @type {GuildMemberManager}\n     */\n\n    this.members = new GuildMemberManager(this);\n    /**\n     * A manager of the channels belonging to this guild\n     * @type {GuildChannelManager}\n     */\n\n    this.channels = new GuildChannelManager(this);\n    /**\n     * A manager of the bans belonging to this guild\n     * @type {GuildBanManager}\n     */\n\n    this.bans = new GuildBanManager(this);\n    /**\n     * A manager of the roles belonging to this guild\n     * @type {RoleManager}\n     */\n\n    this.roles = new RoleManager(this);\n    /**\n     * A manager of the presences belonging to this guild\n     * @type {PresenceManager}\n     */\n\n    this.presences = new PresenceManager(this.client);\n    /**\n     * A manager of the voice states of this guild\n     * @type {VoiceStateManager}\n     */\n\n    this.voiceStates = new VoiceStateManager(this);\n    /**\n     * A manager of the stage instances of this guild\n     * @type {StageInstanceManager}\n     */\n\n    this.stageInstances = new StageInstanceManager(this);\n    /**\n     * A manager of the invites of this guild\n     * @type {GuildInviteManager}\n     */\n\n    this.invites = new GuildInviteManager(this);\n    /**\n     * Whether the bot has been removed from the guild\n     * @type {boolean}\n     */\n\n    this.deleted = false;\n    if (!data) return;\n\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n    } else {\n      this._patch(data);\n\n      if (!data.channels) this.available = false;\n    }\n    /**\n     * The id of the shard this Guild belongs to.\n     * @type {number}\n     */\n\n\n    this.shardId = data.shardId;\n  }\n  /**\n   * The Shard this Guild belongs to.\n   * @type {WebSocketShard}\n   * @readonly\n   */\n\n\n  get shard() {\n    return this.client.ws.shards.get(this.shardId);\n  }\n  /**\n   * Sets up the guild.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n\n\n  _patch(data) {\n    super._patch(data);\n\n    this.id = data.id;\n    this.name = data.name;\n    this.icon = data.icon;\n    this.available = !data.unavailable;\n    /**\n     * The hash of the guild discovery splash image\n     * @type {?string}\n     */\n\n    this.discoverySplash = data.discovery_splash;\n    /**\n     * The full amount of members in this guild\n     * @type {number}\n     */\n\n    this.memberCount = data.member_count ?? this.memberCount;\n    /**\n     * Whether the guild is \"large\" (has more than large_threshold members, 50 by default)\n     * @type {boolean}\n     */\n\n    this.large = Boolean(data.large ?? this.large);\n    /**\n     * An array of enabled guild features, here are the possible values:\n     * * ANIMATED_ICON\n     * * BANNER\n     * * COMMERCE\n     * * COMMUNITY\n     * * DISCOVERABLE\n     * * FEATURABLE\n     * * INVITE_SPLASH\n     * * MEMBER_VERIFICATION_GATE_ENABLED\n     * * NEWS\n     * * PARTNERED\n     * * PREVIEW_ENABLED\n     * * VANITY_URL\n     * * VERIFIED\n     * * VIP_REGIONS\n     * * WELCOME_SCREEN_ENABLED\n     * * TICKETED_EVENTS_ENABLED\n     * * MONETIZATION_ENABLED\n     * * MORE_STICKERS\n     * * THREE_DAY_THREAD_ARCHIVE\n     * * SEVEN_DAY_THREAD_ARCHIVE\n     * * PRIVATE_THREADS\n     * @typedef {string} Features\n     * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-guild-features}\n     */\n\n    /**\n     * The id of the application that created this guild (if applicable)\n     * @type {?Snowflake}\n     */\n\n    this.applicationId = data.application_id;\n    /**\n     * The time in seconds before a user is counted as \"away from keyboard\"\n     * @type {?number}\n     */\n\n    this.afkTimeout = data.afk_timeout;\n    /**\n     * The id of the voice channel where AFK members are moved\n     * @type {?Snowflake}\n     */\n\n    this.afkChannelId = data.afk_channel_id;\n    /**\n     * The system channel's id\n     * @type {?Snowflake}\n     */\n\n    this.systemChannelId = data.system_channel_id;\n    /**\n     * The premium tier of this guild\n     * @type {PremiumTier}\n     */\n\n    this.premiumTier = PremiumTiers[data.premium_tier];\n\n    if (typeof data.premium_subscription_count !== 'undefined') {\n      /**\n       * The total number of boosts for this server\n       * @type {?number}\n       */\n      this.premiumSubscriptionCount = data.premium_subscription_count;\n    }\n\n    if (typeof data.widget_enabled !== 'undefined') {\n      /**\n       * Whether widget images are enabled on this guild\n       * @type {?boolean}\n       */\n      this.widgetEnabled = data.widget_enabled;\n    }\n\n    if (typeof data.widget_channel_id !== 'undefined') {\n      /**\n       * The widget channel's id, if enabled\n       * @type {?string}\n       */\n      this.widgetChannelId = data.widget_channel_id;\n    }\n    /**\n     * The explicit content filter level of the guild\n     * @type {ExplicitContentFilterLevel}\n     */\n\n\n    this.explicitContentFilter = ExplicitContentFilterLevels[data.explicit_content_filter];\n    /**\n     * The required MFA level for this guild\n     * @type {MFALevel}\n     */\n\n    this.mfaLevel = MFALevels[data.mfa_level];\n    /**\n     * The timestamp the client user joined the guild at\n     * @type {number}\n     */\n\n    this.joinedTimestamp = data.joined_at ? new Date(data.joined_at).getTime() : this.joinedTimestamp;\n    /**\n     * The default message notification level of the guild\n     * @type {DefaultMessageNotificationLevel}\n     */\n\n    this.defaultMessageNotifications = DefaultMessageNotificationLevels[data.default_message_notifications];\n    /**\n     * The value set for the guild's system channel flags\n     * @type {Readonly<SystemChannelFlags>}\n     */\n\n    this.systemChannelFlags = new SystemChannelFlags(data.system_channel_flags).freeze();\n\n    if (typeof data.max_members !== 'undefined') {\n      /**\n       * The maximum amount of members the guild can have\n       * @type {?number}\n       */\n      this.maximumMembers = data.max_members;\n    } else if (typeof this.maximumMembers === 'undefined') {\n      this.maximumMembers = null;\n    }\n\n    if (typeof data.max_presences !== 'undefined') {\n      /**\n       * The maximum amount of presences the guild can have\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.maximumPresences = data.max_presences ?? 25000;\n    } else if (typeof this.maximumPresences === 'undefined') {\n      this.maximumPresences = null;\n    }\n\n    if (typeof data.approximate_member_count !== 'undefined') {\n      /**\n       * The approximate amount of members the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    } else if (typeof this.approximateMemberCount === 'undefined') {\n      this.approximateMemberCount = null;\n    }\n\n    if (typeof data.approximate_presence_count !== 'undefined') {\n      /**\n       * The approximate amount of presences the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    } else if (typeof this.approximatePresenceCount === 'undefined') {\n      this.approximatePresenceCount = null;\n    }\n    /**\n     * The use count of the vanity URL code of the guild, if any\n     * <info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>\n     * @type {?number}\n     */\n\n\n    this.vanityURLUses = null;\n    /**\n     * The rules channel's id for the guild\n     * @type {?Snowflake}\n     */\n\n    this.rulesChannelId = data.rules_channel_id;\n    /**\n     * The community updates channel's id for the guild\n     * @type {?Snowflake}\n     */\n\n    this.publicUpdatesChannelId = data.public_updates_channel_id;\n    /**\n     * The preferred locale of the guild, defaults to `en-US`\n     * @type {string}\n     * @see {@link https://discord.com/developers/docs/dispatch/field-values#predefined-field-values-accepted-locales}\n     */\n\n    this.preferredLocale = data.preferred_locale;\n\n    if (data.channels) {\n      this.channels.cache.clear();\n\n      for (const rawChannel of data.channels) {\n        this.client.channels._add(rawChannel, this);\n      }\n    }\n\n    if (data.threads) {\n      for (const rawThread of data.threads) {\n        this.client.channels._add(rawThread, this);\n      }\n    }\n\n    if (data.roles) {\n      this.roles.cache.clear();\n\n      for (const role of data.roles) this.roles._add(role);\n    }\n\n    if (data.members) {\n      this.members.cache.clear();\n\n      for (const guildUser of data.members) this.members._add(guildUser);\n    }\n\n    if (data.owner_id) {\n      /**\n       * The user id of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerId = data.owner_id;\n    }\n\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this.presences._add(Object.assign(presence, {\n          guild: this\n        }));\n      }\n    }\n\n    if (data.stage_instances) {\n      this.stageInstances.cache.clear();\n\n      for (const stageInstance of data.stage_instances) {\n        this.stageInstances._add(stageInstance);\n      }\n    }\n\n    if (data.voice_states) {\n      this.voiceStates.cache.clear();\n\n      for (const voiceState of data.voice_states) {\n        this.voiceStates._add(voiceState);\n      }\n    }\n\n    if (!this.emojis) {\n      /**\n       * A manager of the emojis belonging to this guild\n       * @type {GuildEmojiManager}\n       */\n      this.emojis = new GuildEmojiManager(this);\n      if (data.emojis) for (const emoji of data.emojis) this.emojis._add(emoji);\n    } else if (data.emojis) {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis\n      });\n    }\n\n    if (!this.stickers) {\n      /**\n       * A manager of the stickers belonging to this guild\n       * @type {GuildStickerManager}\n       */\n      this.stickers = new GuildStickerManager(this);\n      if (data.stickers) for (const sticker of data.stickers) this.stickers._add(sticker);\n    } else if (data.stickers) {\n      this.client.actions.GuildStickersUpdate.handle({\n        guild_id: this.id,\n        stickers: data.stickers\n      });\n    }\n  }\n  /**\n   * The URL to this guild's banner.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  bannerURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.banner && this.client.rest.cdn.Banner(this.id, this.banner, format, size);\n  }\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n  /**\n   * The URL to this guild's invite splash image.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  splashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.splash && this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n  /**\n   * The URL to this guild's discovery splash image.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  discoverySplashURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.discoverySplash && this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n  /**\n   * Options used to fetch the owner of a guild or a thread.\n   * @typedef {Object} FetchOwnerOptions\n   * @property {boolean} [cache=true] Whether or not to cache the fetched member\n   * @property {boolean} [force=false] Whether to skip the cache check and request the API\n   */\n\n  /**\n   * Fetches the owner of the guild.\n   * If the member object isn't needed, use {@link Guild#ownerId} instead.\n   * @param {FetchOwnerOptions} [options] The options for fetching the member\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  fetchOwner(options) {\n    return this.members.fetch({ ...options,\n      user: this.ownerId\n    });\n  }\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n\n\n  get afkChannel() {\n    return this.client.channels.resolve(this.afkChannelId);\n  }\n  /**\n   * System channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n\n\n  get systemChannel() {\n    return this.client.channels.resolve(this.systemChannelId);\n  }\n  /**\n   * Widget channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n\n\n  get widgetChannel() {\n    return this.client.channels.resolve(this.widgetChannelId);\n  }\n  /**\n   * Rules channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n\n\n  get rulesChannel() {\n    return this.client.channels.resolve(this.rulesChannelId);\n  }\n  /**\n   * Public updates channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n\n\n  get publicUpdatesChannel() {\n    return this.client.channels.resolve(this.publicUpdatesChannelId);\n  }\n  /**\n   * The client user as a GuildMember of this guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n\n\n  get me() {\n    return this.members.resolve(this.client.user.id) ?? (this.client.options.partials.includes(PartialTypes.GUILD_MEMBER) ? this.members._add({\n      user: {\n        id: this.client.user.id\n      }\n    }, true) : null);\n  }\n  /**\n   * Fetches a collection of integrations to this guild.\n   * Resolves with a collection mapping integrations by their ids.\n   * @returns {Promise<Collection<string, Integration>>}\n   * @example\n   * // Fetch integrations\n   * guild.fetchIntegrations()\n   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchIntegrations() {\n    const data = await this.client.api.guilds(this.id).integrations.get();\n    return data.reduce((collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)), new Collection());\n  }\n  /**\n   * Fetches a collection of templates from this guild.\n   * Resolves with a collection mapping templates by their codes.\n   * @returns {Promise<Collection<string, GuildTemplate>>}\n   */\n\n\n  async fetchTemplates() {\n    const templates = await this.client.api.guilds(this.id).templates.get();\n    return templates.reduce((col, data) => col.set(data.code, new GuildTemplate(this.client, data)), new Collection());\n  }\n  /**\n   * Fetches the welcome screen for this guild.\n   * @returns {Promise<WelcomeScreen>}\n   */\n\n\n  async fetchWelcomeScreen() {\n    const data = await this.client.api.guilds(this.id, 'welcome-screen').get();\n    return new WelcomeScreen(this, data);\n  }\n  /**\n   * Creates a template for the guild.\n   * @param {string} name The name for the template\n   * @param {string} [description] The description for the template\n   * @returns {Promise<GuildTemplate>}\n   */\n\n\n  async createTemplate(name, description) {\n    const data = await this.client.api.guilds(this.id).templates.post({\n      data: {\n        name,\n        description\n      }\n    });\n    return new GuildTemplate(this.client, data);\n  }\n  /**\n   * Obtains a guild preview for this guild from Discord.\n   * @returns {Promise<GuildPreview>}\n   */\n\n\n  async fetchPreview() {\n    const data = await this.client.api.guilds(this.id).preview.get();\n    return new GuildPreview(this.client, data);\n  }\n  /**\n   * An object containing information about a guild's vanity invite.\n   * @typedef {Object} Vanity\n   * @property {?string} code Vanity invite code\n   * @property {?number} uses How many times this invite has been used\n   */\n\n  /**\n   * Fetches the vanity url invite object to this guild.\n   * Resolves with an object containing the vanity url invite code and the use count\n   * @returns {Promise<Vanity>}\n   * @example\n   * // Fetch invite data\n   * guild.fetchVanityData()\n   *   .then(res => {\n   *     console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n   *   })\n   *   .catch(console.error);\n   */\n\n\n  async fetchVanityData() {\n    if (!this.features.includes('VANITY_URL')) {\n      throw new Error('VANITY_URL');\n    }\n\n    const data = await this.client.api.guilds(this.id, 'vanity-url').get();\n    this.vanityURLCode = data.code;\n    this.vanityURLUses = data.uses;\n    return data;\n  }\n  /**\n   * Fetches all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchWebhooks() {\n    const apiHooks = await this.client.api.guilds(this.id).webhooks.get();\n    const hooks = new Collection();\n\n    for (const hook of apiHooks) hooks.set(hook.id, new Webhook(this.client, hook));\n\n    return hooks;\n  }\n  /**\n   * Fetches the guild widget data, requires the widget to be enabled.\n   * @returns {Promise<Widget>}\n   * @example\n   * // Fetches the guild widget data\n   * guild.fetchWidget()\n   *   .then(widget => console.log(`The widget shows ${widget.channels.size} channels`))\n   *   .catch(console.error);\n   */\n\n\n  fetchWidget() {\n    return this.client.fetchGuildWidget(this.id);\n  }\n  /**\n   * Data for the Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettings\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannel} channel The widget invite channel\n   */\n\n  /**\n   * The Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettingsData\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannelResolvable} channel The widget invite channel\n   */\n\n  /**\n   * Fetches the guild widget settings.\n   * @returns {Promise<GuildWidgetSettings>}\n   * @example\n   * // Fetches the guild widget settings\n   * guild.fetchWidgetSettings()\n   *   .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n\n\n  async fetchWidgetSettings() {\n    const data = await this.client.api.guilds(this.id).widget.get();\n    this.widgetEnabled = data.enabled;\n    this.widgetChannelId = data.channel_id;\n    return {\n      enabled: data.enabled,\n      channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null\n    };\n  }\n  /**\n   * Options used to fetch audit logs.\n   * @typedef {Object} GuildAuditLogsFetchOptions\n   * @property {Snowflake|GuildAuditLogsEntry} [before] Only return entries before this entry\n   * @property {number} [limit] The number of entries to return\n   * @property {UserResolvable} [user] Only return entries for actions made by this user\n   * @property {AuditLogAction|number} [type] Only return entries for this action type\n   */\n\n  /**\n   * Fetches audit logs for this guild.\n   * @param {GuildAuditLogsFetchOptions} [options={}] Options for fetching audit logs\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n\n\n  async fetchAuditLogs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (options.before && options.before instanceof GuildAuditLogs.Entry) options.before = options.before.id;\n    if (typeof options.type === 'string') options.type = GuildAuditLogs.Actions[options.type];\n    const data = await this.client.api.guilds(this.id)['audit-logs'].get({\n      query: {\n        before: options.before,\n        limit: options.limit,\n        user_id: this.client.users.resolveId(options.user),\n        action_type: options.type\n      }\n    });\n    return GuildAuditLogs.build(this, data);\n  }\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditData\n   * @property {string} [name] The name of the guild\n   * @property {VerificationLevel|number} [verificationLevel] The verification level of the guild\n   * @property {ExplicitContentFilterLevel|number} [explicitContentFilter] The level of the explicit content filter\n   * @property {VoiceChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {TextChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {Base64Resolvable} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {Base64Resolvable} [splash] The invite splash image of the guild\n   * @property {Base64Resolvable} [discoverySplash] The discovery splash image of the guild\n   * @property {Base64Resolvable} [banner] The banner of the guild\n   * @property {DefaultMessageNotificationLevel|number} [defaultMessageNotifications] The default message notification\n   * level of the guild\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild\n   * @property {TextChannelResolvable} [rulesChannel] The rules channel of the guild\n   * @property {TextChannelResolvable} [publicUpdatesChannel] The community updates channel of the guild\n   * @property {string} [preferredLocale] The preferred locale of the guild\n   * @property {string} [description] The discovery description of the guild\n   * @property {Features[]} [features] The features of the guild\n   */\n\n  /**\n   * Data that can be resolved to a Text Channel object. This can be:\n   * * A TextChannel\n   * * A Snowflake\n   * @typedef {TextChannel|Snowflake} TextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a Voice Channel object. This can be:\n   * * A VoiceChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|Snowflake} VoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditData} data The data to update the guild with\n   * @param {string} [reason] Reason for editing this guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name\n   * guild.edit({\n   *   name: 'Discord Guild',\n   * })\n   *   .then(updated => console.log(`New guild name ${updated}`))\n   *   .catch(console.error);\n   */\n\n\n  async edit(data, reason) {\n    const _data = {};\n    if (data.name) _data.name = data.name;\n\n    if (typeof data.verificationLevel !== 'undefined') {\n      _data.verification_level = typeof data.verificationLevel === 'number' ? data.verificationLevel : VerificationLevels[data.verificationLevel];\n    }\n\n    if (typeof data.afkChannel !== 'undefined') {\n      _data.afk_channel_id = this.client.channels.resolveId(data.afkChannel);\n    }\n\n    if (typeof data.systemChannel !== 'undefined') {\n      _data.system_channel_id = this.client.channels.resolveId(data.systemChannel);\n    }\n\n    if (data.afkTimeout) _data.afk_timeout = Number(data.afkTimeout);\n    if (typeof data.icon !== 'undefined') _data.icon = data.icon;\n    if (data.owner) _data.owner_id = this.client.users.resolveId(data.owner);\n    if (data.splash) _data.splash = data.splash;\n    if (data.discoverySplash) _data.discovery_splash = data.discoverySplash;\n    if (data.banner) _data.banner = data.banner;\n\n    if (typeof data.explicitContentFilter !== 'undefined') {\n      _data.explicit_content_filter = typeof data.explicitContentFilter === 'number' ? data.explicitContentFilter : ExplicitContentFilterLevels[data.explicitContentFilter];\n    }\n\n    if (typeof data.defaultMessageNotifications !== 'undefined') {\n      _data.default_message_notifications = typeof data.defaultMessageNotifications === 'number' ? data.defaultMessageNotifications : DefaultMessageNotificationLevels[data.defaultMessageNotifications];\n    }\n\n    if (typeof data.systemChannelFlags !== 'undefined') {\n      _data.system_channel_flags = SystemChannelFlags.resolve(data.systemChannelFlags);\n    }\n\n    if (typeof data.rulesChannel !== 'undefined') {\n      _data.rules_channel_id = this.client.channels.resolveId(data.rulesChannel);\n    }\n\n    if (typeof data.publicUpdatesChannel !== 'undefined') {\n      _data.public_updates_channel_id = this.client.channels.resolveId(data.publicUpdatesChannel);\n    }\n\n    if (typeof data.features !== 'undefined') {\n      _data.features = data.features;\n    }\n\n    if (typeof data.description !== 'undefined') {\n      _data.description = data.description;\n    }\n\n    if (data.preferredLocale) _data.preferred_locale = data.preferredLocale;\n    const newData = await this.client.api.guilds(this.id).patch({\n      data: _data,\n      reason\n    });\n    return this.client.actions.GuildUpdate.handle(newData).updated;\n  }\n  /**\n   * Welcome channel data\n   * @typedef {Object} WelcomeChannelData\n   * @property {string} description The description to show for this welcome channel\n   * @property {GuildTextChannelResolvable} channel The channel to link for this welcome channel\n   * @property {EmojiIdentifierResolvable} [emoji] The emoji to display for this welcome channel\n   */\n\n  /**\n   * Welcome screen edit data\n   * @typedef {Object} WelcomeScreenEditData\n   * @property {boolean} [enabled] Whether the welcome screen is enabled\n   * @property {string} [description] The description for the welcome screen\n   * @property {WelcomeChannelData[]} [welcomeChannels] The welcome channel data for the welcome screen\n   */\n\n  /**\n   * Data that can be resolved to a GuildTextChannel object. This can be:\n   * * A TextChannel\n   * * A NewsChannel\n   * * A Snowflake\n   * @typedef {TextChannel|NewsChannel|Snowflake} GuildTextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a GuildVoiceChannel object. This can be:\n   * * A VoiceChannel\n   * * A StageChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|StageChannel|Snowflake} GuildVoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild's welcome screen\n   * @param {WelcomeScreenEditData} data Data to edit the welcome screen with\n   * @returns {Promise<WelcomeScreen>}\n   * @example\n   * guild.editWelcomeScreen({\n   *   description: 'Hello World',\n   *   enabled: true,\n   *   welcomeChannels: [\n   *     {\n   *       description: 'foobar',\n   *       channel: '222197033908436994',\n   *     }\n   *   ],\n   * })\n   */\n\n\n  async editWelcomeScreen(data) {\n    const {\n      enabled,\n      description,\n      welcomeChannels\n    } = data;\n    const welcome_channels = welcomeChannels?.map(welcomeChannelData => {\n      const emoji = this.emojis.resolve(welcomeChannelData.emoji);\n      return {\n        emoji_id: emoji && emoji.id,\n        emoji_name: emoji?.name ?? welcomeChannelData.emoji,\n        channel_id: this.channels.resolveId(welcomeChannelData.channel),\n        description: welcomeChannelData.description\n      };\n    });\n    const patchData = await this.client.api.guilds(this.id, 'welcome-screen').patch({\n      data: {\n        welcome_channels,\n        description,\n        enabled\n      }\n    });\n    return new WelcomeScreen(this, patchData);\n  }\n  /**\n   * Edits the level of the explicit content filter.\n   * @param {ExplicitContentFilterLevel|number} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n\n\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({\n      explicitContentFilter\n    }, reason);\n  }\n  /* eslint-disable max-len */\n\n  /**\n   * Edits the setting of the default message notifications of the guild.\n   * @param {DefaultMessageNotificationLevel|number} defaultMessageNotifications The new default message notification level of the guild\n   * @param {string} [reason] Reason for changing the setting of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n\n\n  setDefaultMessageNotifications(defaultMessageNotifications, reason) {\n    return this.edit({\n      defaultMessageNotifications\n    }, reason);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Edits the flags of the default message notifications of the guild.\n   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications\n   * @param {string} [reason] Reason for changing the flags of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n\n\n  setSystemChannelFlags(systemChannelFlags, reason) {\n    return this.edit({\n      systemChannelFlags\n    }, reason);\n  }\n  /**\n   * Edits the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${updated.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setName(name, reason) {\n    return this.edit({\n      name\n    }, reason);\n  }\n  /**\n   * Edits the verification level of the guild.\n   * @param {VerificationLevel|number} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n\n\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({\n      verificationLevel\n    }, reason);\n  }\n  /**\n   * Edits the AFK channel of the guild.\n   * @param {VoiceChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({\n      afkChannel\n    }, reason);\n  }\n  /**\n   * Edits the system channel of the guild.\n   * @param {TextChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild system channel\n   * guild.setSystemChannel(channel)\n   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({\n      systemChannel\n    }, reason);\n  }\n  /**\n   * Edits the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n\n\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({\n      afkTimeout\n    }, reason);\n  }\n  /**\n   * Sets a new guild icon.\n   * @param {Base64Resolvable|BufferResolvable} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n\n\n  async setIcon(icon, reason) {\n    return this.edit({\n      icon: await DataResolver.resolveImage(icon)\n    }, reason);\n  }\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.cache.first())\n   *  .then(updated => console.log(`Updated the guild owner to ${updated.owner.displayName}`))\n   *  .catch(console.error);\n   */\n\n\n  setOwner(owner, reason) {\n    return this.edit({\n      owner\n    }, reason);\n  }\n  /**\n   * Sets a new guild invite splash image.\n   * @param {Base64Resolvable|BufferResolvable} splash The new invite splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's invite splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n\n\n  async setSplash(splash, reason) {\n    return this.edit({\n      splash: await DataResolver.resolveImage(splash)\n    }, reason);\n  }\n  /**\n   * Sets a new guild discovery splash image.\n   * @param {Base64Resolvable|BufferResolvable} discoverySplash The new discovery splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's discovery splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild discovery splash\n   * guild.setDiscoverySplash('./discoverysplash.png')\n   *   .then(updated => console.log('Updated the guild discovery splash'))\n   *   .catch(console.error);\n   */\n\n\n  async setDiscoverySplash(discoverySplash, reason) {\n    return this.edit({\n      discoverySplash: await DataResolver.resolveImage(discoverySplash)\n    }, reason);\n  }\n  /**\n   * Sets a new guild banner.\n   * @param {Base64Resolvable|BufferResolvable} banner The new banner of the guild\n   * @param {string} [reason] Reason for changing the guild's banner\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setBanner('./banner.png')\n   *  .then(updated => console.log('Updated the guild banner'))\n   *  .catch(console.error);\n   */\n\n\n  async setBanner(banner, reason) {\n    return this.edit({\n      banner: await DataResolver.resolveImage(banner)\n    }, reason);\n  }\n  /**\n   * Edits the rules channel of the guild.\n   * @param {TextChannelResolvable} rulesChannel The new rules channel\n   * @param {string} [reason] Reason for changing the guild's rules channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild rules channel\n   * guild.setRulesChannel(channel)\n   *  .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setRulesChannel(rulesChannel, reason) {\n    return this.edit({\n      rulesChannel\n    }, reason);\n  }\n  /**\n   * Edits the community updates channel of the guild.\n   * @param {TextChannelResolvable} publicUpdatesChannel The new community updates channel\n   * @param {string} [reason] Reason for changing the guild's community updates channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild community updates channel\n   * guild.setPublicUpdatesChannel(channel)\n   *  .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))\n   *  .catch(console.error);\n   */\n\n\n  setPublicUpdatesChannel(publicUpdatesChannel, reason) {\n    return this.edit({\n      publicUpdatesChannel\n    }, reason);\n  }\n  /**\n   * Edits the preferred locale of the guild.\n   * @param {string} preferredLocale The new preferred locale of the guild\n   * @param {string} [reason] Reason for changing the guild's preferred locale\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild preferred locale\n   * guild.setPreferredLocale('en-US')\n   *  .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))\n   *  .catch(console.error);\n   */\n\n\n  setPreferredLocale(preferredLocale, reason) {\n    return this.edit({\n      preferredLocale\n    }, reason);\n  }\n  /**\n   * Data that can be resolved to give a Category Channel object. This can be:\n   * * A CategoryChannel object\n   * * A Snowflake\n   * @typedef {CategoryChannel|Snowflake} CategoryChannelResolvable\n   */\n\n  /**\n   * The data needed for updating a channel's position.\n   * @typedef {Object} ChannelPosition\n   * @property {GuildChannel|Snowflake} channel Channel to update\n   * @property {number} [position] New position for the channel\n   * @property {CategoryChannelResolvable} [parent] Parent channel for this channel\n   * @property {boolean} [lockPermissions] If the overwrites should be locked to the parents overwrites\n   */\n\n  /**\n   * Batch-updates the guild's channels' positions.\n   * <info>Only one channel's parent can be changed at a time</info>\n   * @param {ChannelPosition[]} channelPositions Channel positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setChannelPositions([{ channel: channelId, position: newChannelIndex }])\n   *   .then(guild => console.log(`Updated channel positions for ${guild}`))\n   *   .catch(console.error);\n   */\n\n\n  async setChannelPositions(channelPositions) {\n    const updatedChannels = channelPositions.map(r => ({\n      id: this.client.channels.resolveId(r.channel),\n      position: r.position,\n      lock_permissions: r.lockPermissions,\n      parent_id: typeof r.parent !== 'undefined' ? this.channels.resolveId(r.parent) : undefined\n    }));\n    await this.client.api.guilds(this.id).channels.patch({\n      data: updatedChannels\n    });\n    return this.client.actions.GuildChannelsPositionUpdate.handle({\n      guild_id: this.id,\n      channels: updatedChannels\n    }).guild;\n  }\n  /**\n   * The data needed for updating a guild role's position\n   * @typedef {Object} GuildRolePosition\n   * @property {RoleResolvable} role The role's id\n   * @property {number} position The position to update\n   */\n\n  /**\n   * Batch-updates the guild's role positions\n   * @param {GuildRolePosition[]} rolePositions Role positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setRolePositions([{ role: roleId, position: updatedRoleIndex }])\n   *  .then(guild => console.log(`Role positions updated for ${guild}`))\n   *  .catch(console.error);\n   */\n\n\n  async setRolePositions(rolePositions) {\n    // Make sure rolePositions are prepared for API\n    rolePositions = rolePositions.map(o => ({\n      id: this.roles.resolveId(o.role),\n      position: o.position\n    })); // Call the API to update role positions\n\n    await this.client.api.guilds(this.id).roles.patch({\n      data: rolePositions\n    });\n    return this.client.actions.GuildRolesPositionUpdate.handle({\n      guild_id: this.id,\n      roles: rolePositions\n    }).guild;\n  }\n  /**\n   * Edits the guild's widget settings.\n   * @param {GuildWidgetSettingsData} settings The widget settings for the guild\n   * @param {string} [reason] Reason for changing the guild's widget settings\n   * @returns {Promise<Guild>}\n   */\n\n\n  async setWidgetSettings(settings, reason) {\n    await this.client.api.guilds(this.id).widget.patch({\n      data: {\n        enabled: settings.enabled,\n        channel_id: this.channels.resolveId(settings.channel)\n      },\n      reason\n    });\n    return this;\n  }\n  /**\n   * Leaves the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(g => console.log(`Left the guild ${g}`))\n   *   .catch(console.error);\n   */\n\n\n  async leave() {\n    if (this.ownerId === this.client.user.id) throw new Error('GUILD_OWNED');\n    await this.client.api.users('@me').guilds(this.id).delete();\n    return this.client.actions.GuildDelete.handle({\n      id: this.id\n    }).guild;\n  }\n  /**\n   * Deletes the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(g => console.log(`Deleted the guild ${g}`))\n   *   .catch(console.error);\n   */\n\n\n  async delete() {\n    await this.client.api.guilds(this.id).delete();\n    return this.client.actions.GuildDelete.handle({\n      id: this.id\n    }).guild;\n  }\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(guild) {\n    return guild && guild instanceof this.constructor && this.id === guild.id && this.available === guild.available && this.splash === guild.splash && this.discoverySplash === guild.discoverySplash && this.name === guild.name && this.memberCount === guild.memberCount && this.large === guild.large && this.icon === guild.icon && this.ownerId === guild.ownerId && this.verificationLevel === guild.verificationLevel && (this.features === guild.features || this.features.length === guild.features.length && this.features.every((feat, i) => feat === guild.features[i]));\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      available: false,\n      createdTimestamp: true,\n      nameAcronym: true,\n      presences: false,\n      voiceStates: false\n    });\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    json.discoverySplashURL = this.discoverySplashURL();\n    json.bannerURL = this.bannerURL();\n    return json;\n  }\n  /**\n   * The voice state adapter for this guild that can be used with @discordjs/voice to play audio in voice\n   * and stage channels.\n   * @type {Function}\n   * @readonly\n   */\n\n\n  get voiceAdapterCreator() {\n    return methods => {\n      this.client.voice.adapters.set(this.id, methods);\n      return {\n        sendPayload: data => {\n          if (this.shard.status !== Status.READY) return false;\n          this.shard.send(data);\n          return true;\n        },\n        destroy: () => {\n          this.client.voice.adapters.delete(this.id);\n        }\n      };\n    };\n  }\n  /**\n   * Creates a collection of this guild's roles, sorted by their position and ids.\n   * @returns {Collection<Snowflake, Role>}\n   * @private\n   */\n\n\n  _sortedRoles() {\n    return Util.discordSort(this.roles.cache);\n  }\n  /**\n   * Creates a collection of this guild's or a specific category's channels, sorted by their position and ids.\n   * @param {GuildChannel} [channel] Category to get the channels of\n   * @returns {Collection<Snowflake, GuildChannel>}\n   * @private\n   */\n\n\n  _sortedChannels(channel) {\n    const category = channel.type === ChannelTypes.GUILD_CATEGORY;\n    return Util.discordSort(this.channels.cache.filter(c => (['GUILD_TEXT', 'GUILD_NEWS', 'GUILD_STORE'].includes(channel.type) ? ['GUILD_TEXT', 'GUILD_NEWS', 'GUILD_STORE'].includes(c.type) : c.type === channel.type) && (category || c.parent === channel.parent)));\n  }\n\n}\n\nmodule.exports = Guild;\n/**\n * @external APIGuild\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object}\n */","map":{"version":3,"names":["Collection","require","AnonymousGuild","GuildAuditLogs","GuildPreview","GuildTemplate","Integration","Webhook","WelcomeScreen","Error","GuildApplicationCommandManager","GuildBanManager","GuildChannelManager","GuildEmojiManager","GuildInviteManager","GuildMemberManager","GuildStickerManager","PresenceManager","RoleManager","StageInstanceManager","VoiceStateManager","ChannelTypes","DefaultMessageNotificationLevels","PartialTypes","VerificationLevels","ExplicitContentFilterLevels","Status","MFALevels","PremiumTiers","DataResolver","SystemChannelFlags","Util","Guild","constructor","client","data","commands","members","channels","bans","roles","presences","voiceStates","stageInstances","invites","deleted","unavailable","available","_patch","shardId","shard","ws","shards","get","id","name","icon","discoverySplash","discovery_splash","memberCount","member_count","large","Boolean","applicationId","application_id","afkTimeout","afk_timeout","afkChannelId","afk_channel_id","systemChannelId","system_channel_id","premiumTier","premium_tier","premium_subscription_count","premiumSubscriptionCount","widget_enabled","widgetEnabled","widget_channel_id","widgetChannelId","explicitContentFilter","explicit_content_filter","mfaLevel","mfa_level","joinedTimestamp","joined_at","Date","getTime","defaultMessageNotifications","default_message_notifications","systemChannelFlags","system_channel_flags","freeze","max_members","maximumMembers","max_presences","maximumPresences","approximate_member_count","approximateMemberCount","approximate_presence_count","approximatePresenceCount","vanityURLUses","rulesChannelId","rules_channel_id","publicUpdatesChannelId","public_updates_channel_id","preferredLocale","preferred_locale","cache","clear","rawChannel","_add","threads","rawThread","role","guildUser","owner_id","ownerId","presence","Object","assign","guild","stage_instances","stageInstance","voice_states","voiceState","emojis","emoji","actions","GuildEmojisUpdate","handle","guild_id","stickers","sticker","GuildStickersUpdate","bannerURL","format","size","banner","rest","cdn","Banner","joinedAt","splashURL","splash","Splash","discoverySplashURL","DiscoverySplash","fetchOwner","options","fetch","user","afkChannel","resolve","systemChannel","widgetChannel","rulesChannel","publicUpdatesChannel","me","partials","includes","GUILD_MEMBER","fetchIntegrations","api","guilds","integrations","reduce","collection","integration","set","fetchTemplates","templates","col","code","fetchWelcomeScreen","createTemplate","description","post","fetchPreview","preview","fetchVanityData","features","vanityURLCode","uses","fetchWebhooks","apiHooks","webhooks","hooks","hook","fetchWidget","fetchGuildWidget","fetchWidgetSettings","widget","enabled","channel_id","channel","fetchAuditLogs","before","Entry","type","Actions","query","limit","user_id","users","resolveId","action_type","build","edit","reason","_data","verificationLevel","verification_level","Number","owner","newData","patch","GuildUpdate","updated","editWelcomeScreen","welcomeChannels","welcome_channels","map","welcomeChannelData","emoji_id","emoji_name","patchData","setExplicitContentFilter","setDefaultMessageNotifications","setSystemChannelFlags","setName","setVerificationLevel","setAFKChannel","setSystemChannel","setAFKTimeout","setIcon","resolveImage","setOwner","setSplash","setDiscoverySplash","setBanner","setRulesChannel","setPublicUpdatesChannel","setPreferredLocale","setChannelPositions","channelPositions","updatedChannels","r","position","lock_permissions","lockPermissions","parent_id","parent","undefined","GuildChannelsPositionUpdate","setRolePositions","rolePositions","o","GuildRolesPositionUpdate","setWidgetSettings","settings","leave","delete","GuildDelete","equals","length","every","feat","i","toJSON","json","createdTimestamp","nameAcronym","iconURL","voiceAdapterCreator","methods","voice","adapters","sendPayload","status","READY","send","destroy","_sortedRoles","discordSort","_sortedChannels","category","GUILD_CATEGORY","filter","c","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/Guild.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst AnonymousGuild = require('./AnonymousGuild');\nconst GuildAuditLogs = require('./GuildAuditLogs');\nconst GuildPreview = require('./GuildPreview');\nconst GuildTemplate = require('./GuildTemplate');\nconst Integration = require('./Integration');\nconst Webhook = require('./Webhook');\nconst WelcomeScreen = require('./WelcomeScreen');\nconst { Error } = require('../errors');\nconst GuildApplicationCommandManager = require('../managers/GuildApplicationCommandManager');\nconst GuildBanManager = require('../managers/GuildBanManager');\nconst GuildChannelManager = require('../managers/GuildChannelManager');\nconst GuildEmojiManager = require('../managers/GuildEmojiManager');\nconst GuildInviteManager = require('../managers/GuildInviteManager');\nconst GuildMemberManager = require('../managers/GuildMemberManager');\nconst GuildStickerManager = require('../managers/GuildStickerManager');\nconst PresenceManager = require('../managers/PresenceManager');\nconst RoleManager = require('../managers/RoleManager');\nconst StageInstanceManager = require('../managers/StageInstanceManager');\nconst VoiceStateManager = require('../managers/VoiceStateManager');\nconst {\n  ChannelTypes,\n  DefaultMessageNotificationLevels,\n  PartialTypes,\n  VerificationLevels,\n  ExplicitContentFilterLevels,\n  Status,\n  MFALevels,\n  PremiumTiers,\n} = require('../util/Constants');\nconst DataResolver = require('../util/DataResolver');\nconst SystemChannelFlags = require('../util/SystemChannelFlags');\nconst Util = require('../util/Util');\n\n/**\n * Represents a guild (or a server) on Discord.\n * <info>It's recommended to see if a guild is available before performing operations or reading data from it. You can\n * check this with {@link Guild#available}.</info>\n * @extends {AnonymousGuild}\n */\nclass Guild extends AnonymousGuild {\n  constructor(client, data) {\n    super(client, data, false);\n\n    /**\n     * A manager of the application commands belonging to this guild\n     * @type {GuildApplicationCommandManager}\n     */\n    this.commands = new GuildApplicationCommandManager(this);\n\n    /**\n     * A manager of the members belonging to this guild\n     * @type {GuildMemberManager}\n     */\n    this.members = new GuildMemberManager(this);\n\n    /**\n     * A manager of the channels belonging to this guild\n     * @type {GuildChannelManager}\n     */\n    this.channels = new GuildChannelManager(this);\n\n    /**\n     * A manager of the bans belonging to this guild\n     * @type {GuildBanManager}\n     */\n    this.bans = new GuildBanManager(this);\n\n    /**\n     * A manager of the roles belonging to this guild\n     * @type {RoleManager}\n     */\n    this.roles = new RoleManager(this);\n\n    /**\n     * A manager of the presences belonging to this guild\n     * @type {PresenceManager}\n     */\n    this.presences = new PresenceManager(this.client);\n\n    /**\n     * A manager of the voice states of this guild\n     * @type {VoiceStateManager}\n     */\n    this.voiceStates = new VoiceStateManager(this);\n\n    /**\n     * A manager of the stage instances of this guild\n     * @type {StageInstanceManager}\n     */\n    this.stageInstances = new StageInstanceManager(this);\n\n    /**\n     * A manager of the invites of this guild\n     * @type {GuildInviteManager}\n     */\n    this.invites = new GuildInviteManager(this);\n\n    /**\n     * Whether the bot has been removed from the guild\n     * @type {boolean}\n     */\n    this.deleted = false;\n\n    if (!data) return;\n    if (data.unavailable) {\n      /**\n       * Whether the guild is available to access. If it is not available, it indicates a server outage\n       * @type {boolean}\n       */\n      this.available = false;\n    } else {\n      this._patch(data);\n      if (!data.channels) this.available = false;\n    }\n\n    /**\n     * The id of the shard this Guild belongs to.\n     * @type {number}\n     */\n    this.shardId = data.shardId;\n  }\n\n  /**\n   * The Shard this Guild belongs to.\n   * @type {WebSocketShard}\n   * @readonly\n   */\n  get shard() {\n    return this.client.ws.shards.get(this.shardId);\n  }\n\n  /**\n   * Sets up the guild.\n   * @param {*} data The raw data of the guild\n   * @private\n   */\n  _patch(data) {\n    super._patch(data);\n    this.id = data.id;\n    this.name = data.name;\n    this.icon = data.icon;\n    this.available = !data.unavailable;\n\n    /**\n     * The hash of the guild discovery splash image\n     * @type {?string}\n     */\n    this.discoverySplash = data.discovery_splash;\n\n    /**\n     * The full amount of members in this guild\n     * @type {number}\n     */\n    this.memberCount = data.member_count ?? this.memberCount;\n\n    /**\n     * Whether the guild is \"large\" (has more than large_threshold members, 50 by default)\n     * @type {boolean}\n     */\n    this.large = Boolean(data.large ?? this.large);\n\n    /**\n     * An array of enabled guild features, here are the possible values:\n     * * ANIMATED_ICON\n     * * BANNER\n     * * COMMERCE\n     * * COMMUNITY\n     * * DISCOVERABLE\n     * * FEATURABLE\n     * * INVITE_SPLASH\n     * * MEMBER_VERIFICATION_GATE_ENABLED\n     * * NEWS\n     * * PARTNERED\n     * * PREVIEW_ENABLED\n     * * VANITY_URL\n     * * VERIFIED\n     * * VIP_REGIONS\n     * * WELCOME_SCREEN_ENABLED\n     * * TICKETED_EVENTS_ENABLED\n     * * MONETIZATION_ENABLED\n     * * MORE_STICKERS\n     * * THREE_DAY_THREAD_ARCHIVE\n     * * SEVEN_DAY_THREAD_ARCHIVE\n     * * PRIVATE_THREADS\n     * @typedef {string} Features\n     * @see {@link https://discord.com/developers/docs/resources/guild#guild-object-guild-features}\n     */\n\n    /**\n     * The id of the application that created this guild (if applicable)\n     * @type {?Snowflake}\n     */\n    this.applicationId = data.application_id;\n\n    /**\n     * The time in seconds before a user is counted as \"away from keyboard\"\n     * @type {?number}\n     */\n    this.afkTimeout = data.afk_timeout;\n\n    /**\n     * The id of the voice channel where AFK members are moved\n     * @type {?Snowflake}\n     */\n    this.afkChannelId = data.afk_channel_id;\n\n    /**\n     * The system channel's id\n     * @type {?Snowflake}\n     */\n    this.systemChannelId = data.system_channel_id;\n\n    /**\n     * The premium tier of this guild\n     * @type {PremiumTier}\n     */\n    this.premiumTier = PremiumTiers[data.premium_tier];\n\n    if (typeof data.premium_subscription_count !== 'undefined') {\n      /**\n       * The total number of boosts for this server\n       * @type {?number}\n       */\n      this.premiumSubscriptionCount = data.premium_subscription_count;\n    }\n\n    if (typeof data.widget_enabled !== 'undefined') {\n      /**\n       * Whether widget images are enabled on this guild\n       * @type {?boolean}\n       */\n      this.widgetEnabled = data.widget_enabled;\n    }\n\n    if (typeof data.widget_channel_id !== 'undefined') {\n      /**\n       * The widget channel's id, if enabled\n       * @type {?string}\n       */\n      this.widgetChannelId = data.widget_channel_id;\n    }\n\n    /**\n     * The explicit content filter level of the guild\n     * @type {ExplicitContentFilterLevel}\n     */\n    this.explicitContentFilter = ExplicitContentFilterLevels[data.explicit_content_filter];\n\n    /**\n     * The required MFA level for this guild\n     * @type {MFALevel}\n     */\n    this.mfaLevel = MFALevels[data.mfa_level];\n\n    /**\n     * The timestamp the client user joined the guild at\n     * @type {number}\n     */\n    this.joinedTimestamp = data.joined_at ? new Date(data.joined_at).getTime() : this.joinedTimestamp;\n\n    /**\n     * The default message notification level of the guild\n     * @type {DefaultMessageNotificationLevel}\n     */\n    this.defaultMessageNotifications = DefaultMessageNotificationLevels[data.default_message_notifications];\n\n    /**\n     * The value set for the guild's system channel flags\n     * @type {Readonly<SystemChannelFlags>}\n     */\n    this.systemChannelFlags = new SystemChannelFlags(data.system_channel_flags).freeze();\n\n    if (typeof data.max_members !== 'undefined') {\n      /**\n       * The maximum amount of members the guild can have\n       * @type {?number}\n       */\n      this.maximumMembers = data.max_members;\n    } else if (typeof this.maximumMembers === 'undefined') {\n      this.maximumMembers = null;\n    }\n\n    if (typeof data.max_presences !== 'undefined') {\n      /**\n       * The maximum amount of presences the guild can have\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.maximumPresences = data.max_presences ?? 25000;\n    } else if (typeof this.maximumPresences === 'undefined') {\n      this.maximumPresences = null;\n    }\n\n    if (typeof data.approximate_member_count !== 'undefined') {\n      /**\n       * The approximate amount of members the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximateMemberCount = data.approximate_member_count;\n    } else if (typeof this.approximateMemberCount === 'undefined') {\n      this.approximateMemberCount = null;\n    }\n\n    if (typeof data.approximate_presence_count !== 'undefined') {\n      /**\n       * The approximate amount of presences the guild has\n       * <info>You will need to fetch the guild using {@link Guild#fetch} if you want to receive this parameter</info>\n       * @type {?number}\n       */\n      this.approximatePresenceCount = data.approximate_presence_count;\n    } else if (typeof this.approximatePresenceCount === 'undefined') {\n      this.approximatePresenceCount = null;\n    }\n\n    /**\n     * The use count of the vanity URL code of the guild, if any\n     * <info>You will need to fetch this parameter using {@link Guild#fetchVanityData} if you want to receive it</info>\n     * @type {?number}\n     */\n    this.vanityURLUses = null;\n\n    /**\n     * The rules channel's id for the guild\n     * @type {?Snowflake}\n     */\n    this.rulesChannelId = data.rules_channel_id;\n\n    /**\n     * The community updates channel's id for the guild\n     * @type {?Snowflake}\n     */\n    this.publicUpdatesChannelId = data.public_updates_channel_id;\n\n    /**\n     * The preferred locale of the guild, defaults to `en-US`\n     * @type {string}\n     * @see {@link https://discord.com/developers/docs/dispatch/field-values#predefined-field-values-accepted-locales}\n     */\n    this.preferredLocale = data.preferred_locale;\n\n    if (data.channels) {\n      this.channels.cache.clear();\n      for (const rawChannel of data.channels) {\n        this.client.channels._add(rawChannel, this);\n      }\n    }\n\n    if (data.threads) {\n      for (const rawThread of data.threads) {\n        this.client.channels._add(rawThread, this);\n      }\n    }\n\n    if (data.roles) {\n      this.roles.cache.clear();\n      for (const role of data.roles) this.roles._add(role);\n    }\n\n    if (data.members) {\n      this.members.cache.clear();\n      for (const guildUser of data.members) this.members._add(guildUser);\n    }\n\n    if (data.owner_id) {\n      /**\n       * The user id of this guild's owner\n       * @type {Snowflake}\n       */\n      this.ownerId = data.owner_id;\n    }\n\n    if (data.presences) {\n      for (const presence of data.presences) {\n        this.presences._add(Object.assign(presence, { guild: this }));\n      }\n    }\n\n    if (data.stage_instances) {\n      this.stageInstances.cache.clear();\n      for (const stageInstance of data.stage_instances) {\n        this.stageInstances._add(stageInstance);\n      }\n    }\n\n    if (data.voice_states) {\n      this.voiceStates.cache.clear();\n      for (const voiceState of data.voice_states) {\n        this.voiceStates._add(voiceState);\n      }\n    }\n\n    if (!this.emojis) {\n      /**\n       * A manager of the emojis belonging to this guild\n       * @type {GuildEmojiManager}\n       */\n      this.emojis = new GuildEmojiManager(this);\n      if (data.emojis) for (const emoji of data.emojis) this.emojis._add(emoji);\n    } else if (data.emojis) {\n      this.client.actions.GuildEmojisUpdate.handle({\n        guild_id: this.id,\n        emojis: data.emojis,\n      });\n    }\n\n    if (!this.stickers) {\n      /**\n       * A manager of the stickers belonging to this guild\n       * @type {GuildStickerManager}\n       */\n      this.stickers = new GuildStickerManager(this);\n      if (data.stickers) for (const sticker of data.stickers) this.stickers._add(sticker);\n    } else if (data.stickers) {\n      this.client.actions.GuildStickersUpdate.handle({\n        guild_id: this.id,\n        stickers: data.stickers,\n      });\n    }\n  }\n\n  /**\n   * The URL to this guild's banner.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  bannerURL({ format, size } = {}) {\n    return this.banner && this.client.rest.cdn.Banner(this.id, this.banner, format, size);\n  }\n\n  /**\n   * The time the client user joined the guild\n   * @type {Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return new Date(this.joinedTimestamp);\n  }\n\n  /**\n   * The URL to this guild's invite splash image.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  splashURL({ format, size } = {}) {\n    return this.splash && this.client.rest.cdn.Splash(this.id, this.splash, format, size);\n  }\n\n  /**\n   * The URL to this guild's discovery splash image.\n   * @param {StaticImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  discoverySplashURL({ format, size } = {}) {\n    return this.discoverySplash && this.client.rest.cdn.DiscoverySplash(this.id, this.discoverySplash, format, size);\n  }\n\n  /**\n   * Options used to fetch the owner of a guild or a thread.\n   * @typedef {Object} FetchOwnerOptions\n   * @property {boolean} [cache=true] Whether or not to cache the fetched member\n   * @property {boolean} [force=false] Whether to skip the cache check and request the API\n   */\n\n  /**\n   * Fetches the owner of the guild.\n   * If the member object isn't needed, use {@link Guild#ownerId} instead.\n   * @param {FetchOwnerOptions} [options] The options for fetching the member\n   * @returns {Promise<GuildMember>}\n   */\n  fetchOwner(options) {\n    return this.members.fetch({ ...options, user: this.ownerId });\n  }\n\n  /**\n   * AFK voice channel for this guild\n   * @type {?VoiceChannel}\n   * @readonly\n   */\n  get afkChannel() {\n    return this.client.channels.resolve(this.afkChannelId);\n  }\n\n  /**\n   * System channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get systemChannel() {\n    return this.client.channels.resolve(this.systemChannelId);\n  }\n\n  /**\n   * Widget channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get widgetChannel() {\n    return this.client.channels.resolve(this.widgetChannelId);\n  }\n\n  /**\n   * Rules channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get rulesChannel() {\n    return this.client.channels.resolve(this.rulesChannelId);\n  }\n\n  /**\n   * Public updates channel for this guild\n   * @type {?TextChannel}\n   * @readonly\n   */\n  get publicUpdatesChannel() {\n    return this.client.channels.resolve(this.publicUpdatesChannelId);\n  }\n\n  /**\n   * The client user as a GuildMember of this guild\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get me() {\n    return (\n      this.members.resolve(this.client.user.id) ??\n      (this.client.options.partials.includes(PartialTypes.GUILD_MEMBER)\n        ? this.members._add({ user: { id: this.client.user.id } }, true)\n        : null)\n    );\n  }\n\n  /**\n   * Fetches a collection of integrations to this guild.\n   * Resolves with a collection mapping integrations by their ids.\n   * @returns {Promise<Collection<string, Integration>>}\n   * @example\n   * // Fetch integrations\n   * guild.fetchIntegrations()\n   *   .then(integrations => console.log(`Fetched ${integrations.size} integrations`))\n   *   .catch(console.error);\n   */\n  async fetchIntegrations() {\n    const data = await this.client.api.guilds(this.id).integrations.get();\n    return data.reduce(\n      (collection, integration) => collection.set(integration.id, new Integration(this.client, integration, this)),\n      new Collection(),\n    );\n  }\n\n  /**\n   * Fetches a collection of templates from this guild.\n   * Resolves with a collection mapping templates by their codes.\n   * @returns {Promise<Collection<string, GuildTemplate>>}\n   */\n  async fetchTemplates() {\n    const templates = await this.client.api.guilds(this.id).templates.get();\n    return templates.reduce((col, data) => col.set(data.code, new GuildTemplate(this.client, data)), new Collection());\n  }\n\n  /**\n   * Fetches the welcome screen for this guild.\n   * @returns {Promise<WelcomeScreen>}\n   */\n  async fetchWelcomeScreen() {\n    const data = await this.client.api.guilds(this.id, 'welcome-screen').get();\n    return new WelcomeScreen(this, data);\n  }\n\n  /**\n   * Creates a template for the guild.\n   * @param {string} name The name for the template\n   * @param {string} [description] The description for the template\n   * @returns {Promise<GuildTemplate>}\n   */\n  async createTemplate(name, description) {\n    const data = await this.client.api.guilds(this.id).templates.post({ data: { name, description } });\n    return new GuildTemplate(this.client, data);\n  }\n\n  /**\n   * Obtains a guild preview for this guild from Discord.\n   * @returns {Promise<GuildPreview>}\n   */\n  async fetchPreview() {\n    const data = await this.client.api.guilds(this.id).preview.get();\n    return new GuildPreview(this.client, data);\n  }\n\n  /**\n   * An object containing information about a guild's vanity invite.\n   * @typedef {Object} Vanity\n   * @property {?string} code Vanity invite code\n   * @property {?number} uses How many times this invite has been used\n   */\n\n  /**\n   * Fetches the vanity url invite object to this guild.\n   * Resolves with an object containing the vanity url invite code and the use count\n   * @returns {Promise<Vanity>}\n   * @example\n   * // Fetch invite data\n   * guild.fetchVanityData()\n   *   .then(res => {\n   *     console.log(`Vanity URL: https://discord.gg/${res.code} with ${res.uses} uses`);\n   *   })\n   *   .catch(console.error);\n   */\n  async fetchVanityData() {\n    if (!this.features.includes('VANITY_URL')) {\n      throw new Error('VANITY_URL');\n    }\n    const data = await this.client.api.guilds(this.id, 'vanity-url').get();\n    this.vanityURLCode = data.code;\n    this.vanityURLUses = data.uses;\n\n    return data;\n  }\n\n  /**\n   * Fetches all webhooks for the guild.\n   * @returns {Promise<Collection<Snowflake, Webhook>>}\n   * @example\n   * // Fetch webhooks\n   * guild.fetchWebhooks()\n   *   .then(webhooks => console.log(`Fetched ${webhooks.size} webhooks`))\n   *   .catch(console.error);\n   */\n  async fetchWebhooks() {\n    const apiHooks = await this.client.api.guilds(this.id).webhooks.get();\n    const hooks = new Collection();\n    for (const hook of apiHooks) hooks.set(hook.id, new Webhook(this.client, hook));\n    return hooks;\n  }\n\n  /**\n   * Fetches the guild widget data, requires the widget to be enabled.\n   * @returns {Promise<Widget>}\n   * @example\n   * // Fetches the guild widget data\n   * guild.fetchWidget()\n   *   .then(widget => console.log(`The widget shows ${widget.channels.size} channels`))\n   *   .catch(console.error);\n   */\n  fetchWidget() {\n    return this.client.fetchGuildWidget(this.id);\n  }\n\n  /**\n   * Data for the Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettings\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannel} channel The widget invite channel\n   */\n\n  /**\n   * The Guild Widget Settings object\n   * @typedef {Object} GuildWidgetSettingsData\n   * @property {boolean} enabled Whether the widget is enabled\n   * @property {?GuildChannelResolvable} channel The widget invite channel\n   */\n\n  /**\n   * Fetches the guild widget settings.\n   * @returns {Promise<GuildWidgetSettings>}\n   * @example\n   * // Fetches the guild widget settings\n   * guild.fetchWidgetSettings()\n   *   .then(widget => console.log(`The widget is ${widget.enabled ? 'enabled' : 'disabled'}`))\n   *   .catch(console.error);\n   */\n  async fetchWidgetSettings() {\n    const data = await this.client.api.guilds(this.id).widget.get();\n    this.widgetEnabled = data.enabled;\n    this.widgetChannelId = data.channel_id;\n    return {\n      enabled: data.enabled,\n      channel: data.channel_id ? this.channels.cache.get(data.channel_id) : null,\n    };\n  }\n\n  /**\n   * Options used to fetch audit logs.\n   * @typedef {Object} GuildAuditLogsFetchOptions\n   * @property {Snowflake|GuildAuditLogsEntry} [before] Only return entries before this entry\n   * @property {number} [limit] The number of entries to return\n   * @property {UserResolvable} [user] Only return entries for actions made by this user\n   * @property {AuditLogAction|number} [type] Only return entries for this action type\n   */\n\n  /**\n   * Fetches audit logs for this guild.\n   * @param {GuildAuditLogsFetchOptions} [options={}] Options for fetching audit logs\n   * @returns {Promise<GuildAuditLogs>}\n   * @example\n   * // Output audit log entries\n   * guild.fetchAuditLogs()\n   *   .then(audit => console.log(audit.entries.first()))\n   *   .catch(console.error);\n   */\n  async fetchAuditLogs(options = {}) {\n    if (options.before && options.before instanceof GuildAuditLogs.Entry) options.before = options.before.id;\n    if (typeof options.type === 'string') options.type = GuildAuditLogs.Actions[options.type];\n\n    const data = await this.client.api.guilds(this.id)['audit-logs'].get({\n      query: {\n        before: options.before,\n        limit: options.limit,\n        user_id: this.client.users.resolveId(options.user),\n        action_type: options.type,\n      },\n    });\n    return GuildAuditLogs.build(this, data);\n  }\n\n  /**\n   * The data for editing a guild.\n   * @typedef {Object} GuildEditData\n   * @property {string} [name] The name of the guild\n   * @property {VerificationLevel|number} [verificationLevel] The verification level of the guild\n   * @property {ExplicitContentFilterLevel|number} [explicitContentFilter] The level of the explicit content filter\n   * @property {VoiceChannelResolvable} [afkChannel] The AFK channel of the guild\n   * @property {TextChannelResolvable} [systemChannel] The system channel of the guild\n   * @property {number} [afkTimeout] The AFK timeout of the guild\n   * @property {Base64Resolvable} [icon] The icon of the guild\n   * @property {GuildMemberResolvable} [owner] The owner of the guild\n   * @property {Base64Resolvable} [splash] The invite splash image of the guild\n   * @property {Base64Resolvable} [discoverySplash] The discovery splash image of the guild\n   * @property {Base64Resolvable} [banner] The banner of the guild\n   * @property {DefaultMessageNotificationLevel|number} [defaultMessageNotifications] The default message notification\n   * level of the guild\n   * @property {SystemChannelFlagsResolvable} [systemChannelFlags] The system channel flags of the guild\n   * @property {TextChannelResolvable} [rulesChannel] The rules channel of the guild\n   * @property {TextChannelResolvable} [publicUpdatesChannel] The community updates channel of the guild\n   * @property {string} [preferredLocale] The preferred locale of the guild\n   * @property {string} [description] The discovery description of the guild\n   * @property {Features[]} [features] The features of the guild\n   */\n\n  /**\n   * Data that can be resolved to a Text Channel object. This can be:\n   * * A TextChannel\n   * * A Snowflake\n   * @typedef {TextChannel|Snowflake} TextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a Voice Channel object. This can be:\n   * * A VoiceChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|Snowflake} VoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild with new information - e.g. a new name.\n   * @param {GuildEditData} data The data to update the guild with\n   * @param {string} [reason] Reason for editing this guild\n   * @returns {Promise<Guild>}\n   * @example\n   * // Set the guild name\n   * guild.edit({\n   *   name: 'Discord Guild',\n   * })\n   *   .then(updated => console.log(`New guild name ${updated}`))\n   *   .catch(console.error);\n   */\n  async edit(data, reason) {\n    const _data = {};\n    if (data.name) _data.name = data.name;\n    if (typeof data.verificationLevel !== 'undefined') {\n      _data.verification_level =\n        typeof data.verificationLevel === 'number'\n          ? data.verificationLevel\n          : VerificationLevels[data.verificationLevel];\n    }\n    if (typeof data.afkChannel !== 'undefined') {\n      _data.afk_channel_id = this.client.channels.resolveId(data.afkChannel);\n    }\n    if (typeof data.systemChannel !== 'undefined') {\n      _data.system_channel_id = this.client.channels.resolveId(data.systemChannel);\n    }\n    if (data.afkTimeout) _data.afk_timeout = Number(data.afkTimeout);\n    if (typeof data.icon !== 'undefined') _data.icon = data.icon;\n    if (data.owner) _data.owner_id = this.client.users.resolveId(data.owner);\n    if (data.splash) _data.splash = data.splash;\n    if (data.discoverySplash) _data.discovery_splash = data.discoverySplash;\n    if (data.banner) _data.banner = data.banner;\n    if (typeof data.explicitContentFilter !== 'undefined') {\n      _data.explicit_content_filter =\n        typeof data.explicitContentFilter === 'number'\n          ? data.explicitContentFilter\n          : ExplicitContentFilterLevels[data.explicitContentFilter];\n    }\n    if (typeof data.defaultMessageNotifications !== 'undefined') {\n      _data.default_message_notifications =\n        typeof data.defaultMessageNotifications === 'number'\n          ? data.defaultMessageNotifications\n          : DefaultMessageNotificationLevels[data.defaultMessageNotifications];\n    }\n    if (typeof data.systemChannelFlags !== 'undefined') {\n      _data.system_channel_flags = SystemChannelFlags.resolve(data.systemChannelFlags);\n    }\n    if (typeof data.rulesChannel !== 'undefined') {\n      _data.rules_channel_id = this.client.channels.resolveId(data.rulesChannel);\n    }\n    if (typeof data.publicUpdatesChannel !== 'undefined') {\n      _data.public_updates_channel_id = this.client.channels.resolveId(data.publicUpdatesChannel);\n    }\n    if (typeof data.features !== 'undefined') {\n      _data.features = data.features;\n    }\n    if (typeof data.description !== 'undefined') {\n      _data.description = data.description;\n    }\n    if (data.preferredLocale) _data.preferred_locale = data.preferredLocale;\n    const newData = await this.client.api.guilds(this.id).patch({ data: _data, reason });\n    return this.client.actions.GuildUpdate.handle(newData).updated;\n  }\n\n  /**\n   * Welcome channel data\n   * @typedef {Object} WelcomeChannelData\n   * @property {string} description The description to show for this welcome channel\n   * @property {GuildTextChannelResolvable} channel The channel to link for this welcome channel\n   * @property {EmojiIdentifierResolvable} [emoji] The emoji to display for this welcome channel\n   */\n\n  /**\n   * Welcome screen edit data\n   * @typedef {Object} WelcomeScreenEditData\n   * @property {boolean} [enabled] Whether the welcome screen is enabled\n   * @property {string} [description] The description for the welcome screen\n   * @property {WelcomeChannelData[]} [welcomeChannels] The welcome channel data for the welcome screen\n   */\n\n  /**\n   * Data that can be resolved to a GuildTextChannel object. This can be:\n   * * A TextChannel\n   * * A NewsChannel\n   * * A Snowflake\n   * @typedef {TextChannel|NewsChannel|Snowflake} GuildTextChannelResolvable\n   */\n\n  /**\n   * Data that can be resolved to a GuildVoiceChannel object. This can be:\n   * * A VoiceChannel\n   * * A StageChannel\n   * * A Snowflake\n   * @typedef {VoiceChannel|StageChannel|Snowflake} GuildVoiceChannelResolvable\n   */\n\n  /**\n   * Updates the guild's welcome screen\n   * @param {WelcomeScreenEditData} data Data to edit the welcome screen with\n   * @returns {Promise<WelcomeScreen>}\n   * @example\n   * guild.editWelcomeScreen({\n   *   description: 'Hello World',\n   *   enabled: true,\n   *   welcomeChannels: [\n   *     {\n   *       description: 'foobar',\n   *       channel: '222197033908436994',\n   *     }\n   *   ],\n   * })\n   */\n  async editWelcomeScreen(data) {\n    const { enabled, description, welcomeChannels } = data;\n    const welcome_channels = welcomeChannels?.map(welcomeChannelData => {\n      const emoji = this.emojis.resolve(welcomeChannelData.emoji);\n      return {\n        emoji_id: emoji && emoji.id,\n        emoji_name: emoji?.name ?? welcomeChannelData.emoji,\n        channel_id: this.channels.resolveId(welcomeChannelData.channel),\n        description: welcomeChannelData.description,\n      };\n    });\n\n    const patchData = await this.client.api.guilds(this.id, 'welcome-screen').patch({\n      data: {\n        welcome_channels,\n        description,\n        enabled,\n      },\n    });\n    return new WelcomeScreen(this, patchData);\n  }\n\n  /**\n   * Edits the level of the explicit content filter.\n   * @param {ExplicitContentFilterLevel|number} explicitContentFilter The new level of the explicit content filter\n   * @param {string} [reason] Reason for changing the level of the guild's explicit content filter\n   * @returns {Promise<Guild>}\n   */\n  setExplicitContentFilter(explicitContentFilter, reason) {\n    return this.edit({ explicitContentFilter }, reason);\n  }\n\n  /* eslint-disable max-len */\n  /**\n   * Edits the setting of the default message notifications of the guild.\n   * @param {DefaultMessageNotificationLevel|number} defaultMessageNotifications The new default message notification level of the guild\n   * @param {string} [reason] Reason for changing the setting of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setDefaultMessageNotifications(defaultMessageNotifications, reason) {\n    return this.edit({ defaultMessageNotifications }, reason);\n  }\n  /* eslint-enable max-len */\n\n  /**\n   * Edits the flags of the default message notifications of the guild.\n   * @param {SystemChannelFlagsResolvable} systemChannelFlags The new flags for the default message notifications\n   * @param {string} [reason] Reason for changing the flags of the default message notifications\n   * @returns {Promise<Guild>}\n   */\n  setSystemChannelFlags(systemChannelFlags, reason) {\n    return this.edit({ systemChannelFlags }, reason);\n  }\n\n  /**\n   * Edits the name of the guild.\n   * @param {string} name The new name of the guild\n   * @param {string} [reason] Reason for changing the guild's name\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild name\n   * guild.setName('Discord Guild')\n   *  .then(updated => console.log(`Updated guild name to ${updated.name}`))\n   *  .catch(console.error);\n   */\n  setName(name, reason) {\n    return this.edit({ name }, reason);\n  }\n\n  /**\n   * Edits the verification level of the guild.\n   * @param {VerificationLevel|number} verificationLevel The new verification level of the guild\n   * @param {string} [reason] Reason for changing the guild's verification level\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild verification level\n   * guild.setVerificationLevel(1)\n   *  .then(updated => console.log(`Updated guild verification level to ${guild.verificationLevel}`))\n   *  .catch(console.error);\n   */\n  setVerificationLevel(verificationLevel, reason) {\n    return this.edit({ verificationLevel }, reason);\n  }\n\n  /**\n   * Edits the AFK channel of the guild.\n   * @param {VoiceChannelResolvable} afkChannel The new AFK channel\n   * @param {string} [reason] Reason for changing the guild's AFK channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKChannel(channel)\n   *  .then(updated => console.log(`Updated guild AFK channel to ${guild.afkChannel.name}`))\n   *  .catch(console.error);\n   */\n  setAFKChannel(afkChannel, reason) {\n    return this.edit({ afkChannel }, reason);\n  }\n\n  /**\n   * Edits the system channel of the guild.\n   * @param {TextChannelResolvable} systemChannel The new system channel\n   * @param {string} [reason] Reason for changing the guild's system channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild system channel\n   * guild.setSystemChannel(channel)\n   *  .then(updated => console.log(`Updated guild system channel to ${guild.systemChannel.name}`))\n   *  .catch(console.error);\n   */\n  setSystemChannel(systemChannel, reason) {\n    return this.edit({ systemChannel }, reason);\n  }\n\n  /**\n   * Edits the AFK timeout of the guild.\n   * @param {number} afkTimeout The time in seconds that a user must be idle to be considered AFK\n   * @param {string} [reason] Reason for changing the guild's AFK timeout\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild AFK channel\n   * guild.setAFKTimeout(60)\n   *  .then(updated => console.log(`Updated guild AFK timeout to ${guild.afkTimeout}`))\n   *  .catch(console.error);\n   */\n  setAFKTimeout(afkTimeout, reason) {\n    return this.edit({ afkTimeout }, reason);\n  }\n\n  /**\n   * Sets a new guild icon.\n   * @param {Base64Resolvable|BufferResolvable} icon The new icon of the guild\n   * @param {string} [reason] Reason for changing the guild's icon\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild icon\n   * guild.setIcon('./icon.png')\n   *  .then(updated => console.log('Updated the guild icon'))\n   *  .catch(console.error);\n   */\n  async setIcon(icon, reason) {\n    return this.edit({ icon: await DataResolver.resolveImage(icon) }, reason);\n  }\n\n  /**\n   * Sets a new owner of the guild.\n   * @param {GuildMemberResolvable} owner The new owner of the guild\n   * @param {string} [reason] Reason for setting the new owner\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild owner\n   * guild.setOwner(guild.members.cache.first())\n   *  .then(updated => console.log(`Updated the guild owner to ${updated.owner.displayName}`))\n   *  .catch(console.error);\n   */\n  setOwner(owner, reason) {\n    return this.edit({ owner }, reason);\n  }\n\n  /**\n   * Sets a new guild invite splash image.\n   * @param {Base64Resolvable|BufferResolvable} splash The new invite splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's invite splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild splash\n   * guild.setSplash('./splash.png')\n   *  .then(updated => console.log('Updated the guild splash'))\n   *  .catch(console.error);\n   */\n  async setSplash(splash, reason) {\n    return this.edit({ splash: await DataResolver.resolveImage(splash) }, reason);\n  }\n\n  /**\n   * Sets a new guild discovery splash image.\n   * @param {Base64Resolvable|BufferResolvable} discoverySplash The new discovery splash image of the guild\n   * @param {string} [reason] Reason for changing the guild's discovery splash image\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild discovery splash\n   * guild.setDiscoverySplash('./discoverysplash.png')\n   *   .then(updated => console.log('Updated the guild discovery splash'))\n   *   .catch(console.error);\n   */\n  async setDiscoverySplash(discoverySplash, reason) {\n    return this.edit({ discoverySplash: await DataResolver.resolveImage(discoverySplash) }, reason);\n  }\n\n  /**\n   * Sets a new guild banner.\n   * @param {Base64Resolvable|BufferResolvable} banner The new banner of the guild\n   * @param {string} [reason] Reason for changing the guild's banner\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setBanner('./banner.png')\n   *  .then(updated => console.log('Updated the guild banner'))\n   *  .catch(console.error);\n   */\n  async setBanner(banner, reason) {\n    return this.edit({ banner: await DataResolver.resolveImage(banner) }, reason);\n  }\n\n  /**\n   * Edits the rules channel of the guild.\n   * @param {TextChannelResolvable} rulesChannel The new rules channel\n   * @param {string} [reason] Reason for changing the guild's rules channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild rules channel\n   * guild.setRulesChannel(channel)\n   *  .then(updated => console.log(`Updated guild rules channel to ${guild.rulesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setRulesChannel(rulesChannel, reason) {\n    return this.edit({ rulesChannel }, reason);\n  }\n\n  /**\n   * Edits the community updates channel of the guild.\n   * @param {TextChannelResolvable} publicUpdatesChannel The new community updates channel\n   * @param {string} [reason] Reason for changing the guild's community updates channel\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild community updates channel\n   * guild.setPublicUpdatesChannel(channel)\n   *  .then(updated => console.log(`Updated guild community updates channel to ${guild.publicUpdatesChannel.name}`))\n   *  .catch(console.error);\n   */\n  setPublicUpdatesChannel(publicUpdatesChannel, reason) {\n    return this.edit({ publicUpdatesChannel }, reason);\n  }\n\n  /**\n   * Edits the preferred locale of the guild.\n   * @param {string} preferredLocale The new preferred locale of the guild\n   * @param {string} [reason] Reason for changing the guild's preferred locale\n   * @returns {Promise<Guild>}\n   * @example\n   * // Edit the guild preferred locale\n   * guild.setPreferredLocale('en-US')\n   *  .then(updated => console.log(`Updated guild preferred locale to ${guild.preferredLocale}`))\n   *  .catch(console.error);\n   */\n  setPreferredLocale(preferredLocale, reason) {\n    return this.edit({ preferredLocale }, reason);\n  }\n\n  /**\n   * Data that can be resolved to give a Category Channel object. This can be:\n   * * A CategoryChannel object\n   * * A Snowflake\n   * @typedef {CategoryChannel|Snowflake} CategoryChannelResolvable\n   */\n\n  /**\n   * The data needed for updating a channel's position.\n   * @typedef {Object} ChannelPosition\n   * @property {GuildChannel|Snowflake} channel Channel to update\n   * @property {number} [position] New position for the channel\n   * @property {CategoryChannelResolvable} [parent] Parent channel for this channel\n   * @property {boolean} [lockPermissions] If the overwrites should be locked to the parents overwrites\n   */\n\n  /**\n   * Batch-updates the guild's channels' positions.\n   * <info>Only one channel's parent can be changed at a time</info>\n   * @param {ChannelPosition[]} channelPositions Channel positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setChannelPositions([{ channel: channelId, position: newChannelIndex }])\n   *   .then(guild => console.log(`Updated channel positions for ${guild}`))\n   *   .catch(console.error);\n   */\n  async setChannelPositions(channelPositions) {\n    const updatedChannels = channelPositions.map(r => ({\n      id: this.client.channels.resolveId(r.channel),\n      position: r.position,\n      lock_permissions: r.lockPermissions,\n      parent_id: typeof r.parent !== 'undefined' ? this.channels.resolveId(r.parent) : undefined,\n    }));\n\n    await this.client.api.guilds(this.id).channels.patch({ data: updatedChannels });\n    return this.client.actions.GuildChannelsPositionUpdate.handle({\n      guild_id: this.id,\n      channels: updatedChannels,\n    }).guild;\n  }\n\n  /**\n   * The data needed for updating a guild role's position\n   * @typedef {Object} GuildRolePosition\n   * @property {RoleResolvable} role The role's id\n   * @property {number} position The position to update\n   */\n\n  /**\n   * Batch-updates the guild's role positions\n   * @param {GuildRolePosition[]} rolePositions Role positions to update\n   * @returns {Promise<Guild>}\n   * @example\n   * guild.setRolePositions([{ role: roleId, position: updatedRoleIndex }])\n   *  .then(guild => console.log(`Role positions updated for ${guild}`))\n   *  .catch(console.error);\n   */\n  async setRolePositions(rolePositions) {\n    // Make sure rolePositions are prepared for API\n    rolePositions = rolePositions.map(o => ({\n      id: this.roles.resolveId(o.role),\n      position: o.position,\n    }));\n\n    // Call the API to update role positions\n    await this.client.api.guilds(this.id).roles.patch({\n      data: rolePositions,\n    });\n    return this.client.actions.GuildRolesPositionUpdate.handle({\n      guild_id: this.id,\n      roles: rolePositions,\n    }).guild;\n  }\n\n  /**\n   * Edits the guild's widget settings.\n   * @param {GuildWidgetSettingsData} settings The widget settings for the guild\n   * @param {string} [reason] Reason for changing the guild's widget settings\n   * @returns {Promise<Guild>}\n   */\n  async setWidgetSettings(settings, reason) {\n    await this.client.api.guilds(this.id).widget.patch({\n      data: {\n        enabled: settings.enabled,\n        channel_id: this.channels.resolveId(settings.channel),\n      },\n      reason,\n    });\n    return this;\n  }\n\n  /**\n   * Leaves the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Leave a guild\n   * guild.leave()\n   *   .then(g => console.log(`Left the guild ${g}`))\n   *   .catch(console.error);\n   */\n  async leave() {\n    if (this.ownerId === this.client.user.id) throw new Error('GUILD_OWNED');\n    await this.client.api.users('@me').guilds(this.id).delete();\n    return this.client.actions.GuildDelete.handle({ id: this.id }).guild;\n  }\n\n  /**\n   * Deletes the guild.\n   * @returns {Promise<Guild>}\n   * @example\n   * // Delete a guild\n   * guild.delete()\n   *   .then(g => console.log(`Deleted the guild ${g}`))\n   *   .catch(console.error);\n   */\n  async delete() {\n    await this.client.api.guilds(this.id).delete();\n    return this.client.actions.GuildDelete.handle({ id: this.id }).guild;\n  }\n\n  /**\n   * Whether this guild equals another guild. It compares all properties, so for most operations\n   * it is advisable to just compare `guild.id === guild2.id` as it is much faster and is often\n   * what most users need.\n   * @param {Guild} guild The guild to compare with\n   * @returns {boolean}\n   */\n  equals(guild) {\n    return (\n      guild &&\n      guild instanceof this.constructor &&\n      this.id === guild.id &&\n      this.available === guild.available &&\n      this.splash === guild.splash &&\n      this.discoverySplash === guild.discoverySplash &&\n      this.name === guild.name &&\n      this.memberCount === guild.memberCount &&\n      this.large === guild.large &&\n      this.icon === guild.icon &&\n      this.ownerId === guild.ownerId &&\n      this.verificationLevel === guild.verificationLevel &&\n      (this.features === guild.features ||\n        (this.features.length === guild.features.length &&\n          this.features.every((feat, i) => feat === guild.features[i])))\n    );\n  }\n\n  toJSON() {\n    const json = super.toJSON({\n      available: false,\n      createdTimestamp: true,\n      nameAcronym: true,\n      presences: false,\n      voiceStates: false,\n    });\n    json.iconURL = this.iconURL();\n    json.splashURL = this.splashURL();\n    json.discoverySplashURL = this.discoverySplashURL();\n    json.bannerURL = this.bannerURL();\n    return json;\n  }\n\n  /**\n   * The voice state adapter for this guild that can be used with @discordjs/voice to play audio in voice\n   * and stage channels.\n   * @type {Function}\n   * @readonly\n   */\n  get voiceAdapterCreator() {\n    return methods => {\n      this.client.voice.adapters.set(this.id, methods);\n      return {\n        sendPayload: data => {\n          if (this.shard.status !== Status.READY) return false;\n          this.shard.send(data);\n          return true;\n        },\n        destroy: () => {\n          this.client.voice.adapters.delete(this.id);\n        },\n      };\n    };\n  }\n\n  /**\n   * Creates a collection of this guild's roles, sorted by their position and ids.\n   * @returns {Collection<Snowflake, Role>}\n   * @private\n   */\n  _sortedRoles() {\n    return Util.discordSort(this.roles.cache);\n  }\n\n  /**\n   * Creates a collection of this guild's or a specific category's channels, sorted by their position and ids.\n   * @param {GuildChannel} [channel] Category to get the channels of\n   * @returns {Collection<Snowflake, GuildChannel>}\n   * @private\n   */\n  _sortedChannels(channel) {\n    const category = channel.type === ChannelTypes.GUILD_CATEGORY;\n    return Util.discordSort(\n      this.channels.cache.filter(\n        c =>\n          (['GUILD_TEXT', 'GUILD_NEWS', 'GUILD_STORE'].includes(channel.type)\n            ? ['GUILD_TEXT', 'GUILD_NEWS', 'GUILD_STORE'].includes(c.type)\n            : c.type === channel.type) &&\n          (category || c.parent === channel.parent),\n      ),\n    );\n  }\n}\n\nmodule.exports = Guild;\n\n/**\n * @external APIGuild\n * @see {@link https://discord.com/developers/docs/resources/guild#guild-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}