{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst ThreadMemberFlags = require('../util/ThreadMemberFlags');\n/**\n * Represents a Member for a Thread.\n * @extends {Base}\n */\n\n\nclass ThreadMember extends Base {\n  /**\n   * @param {ThreadChannel} thread The thread that this member is associated with\n   * @param {APIThreadMember} data The data for the thread member\n   */\n  constructor(thread, data) {\n    super(thread.client);\n    /**\n     * The thread that this member is a part of\n     * @type {ThreadChannel}\n     */\n\n    this.thread = thread;\n    /**\n     * The timestamp the member last joined the thread at\n     * @type {?number}\n     */\n\n    this.joinedTimestamp = null;\n    /**\n     * The id of the thread member\n     * @type {Snowflake}\n     */\n\n    this.id = data.user_id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    this.joinedTimestamp = new Date(data.join_timestamp).getTime();\n    /**\n     * The flags for this thread member\n     * @type {ThreadMemberFlags}\n     */\n\n    this.flags = new ThreadMemberFlags(data.flags).freeze();\n  }\n  /**\n   * The guild member associated with this thread member\n   * @type {?GuildMember}\n   * @readonly\n   */\n\n\n  get guildMember() {\n    return this.thread.guild.members.resolve(this.id);\n  }\n  /**\n   * The last time this member joined the thread\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get joinedAt() {\n    return this.joinedTimestamp ? new Date(this.joinedTimestamp) : null;\n  }\n  /**\n   * The user associated with this thread member\n   * @type {?User}\n   * @readonly\n   */\n\n\n  get user() {\n    return this.client.users.resolve(this.id);\n  }\n  /**\n   * Whether the client user can manage this thread member\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get manageable() {\n    return !this.thread.archived && this.thread.editable;\n  }\n  /**\n   * Removes this member from the thread.\n   * @param {string} [reason] Reason for removing the member\n   * @returns {ThreadMember}\n   */\n\n\n  async remove(reason) {\n    await this.thread.members.remove(this.id, reason);\n    return this;\n  }\n\n}\n\nmodule.exports = ThreadMember;\n/**\n * @external APIThreadMember\n * @see {@link https://discord.com/developers/docs/resources/channel#thread-member-object}\n */","map":{"version":3,"names":["Base","require","ThreadMemberFlags","ThreadMember","constructor","thread","data","client","joinedTimestamp","id","user_id","_patch","Date","join_timestamp","getTime","flags","freeze","guildMember","guild","members","resolve","joinedAt","user","users","manageable","archived","editable","remove","reason","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/ThreadMember.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst ThreadMemberFlags = require('../util/ThreadMemberFlags');\n\n/**\n * Represents a Member for a Thread.\n * @extends {Base}\n */\nclass ThreadMember extends Base {\n  /**\n   * @param {ThreadChannel} thread The thread that this member is associated with\n   * @param {APIThreadMember} data The data for the thread member\n   */\n  constructor(thread, data) {\n    super(thread.client);\n\n    /**\n     * The thread that this member is a part of\n     * @type {ThreadChannel}\n     */\n    this.thread = thread;\n\n    /**\n     * The timestamp the member last joined the thread at\n     * @type {?number}\n     */\n    this.joinedTimestamp = null;\n\n    /**\n     * The id of the thread member\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    this.joinedTimestamp = new Date(data.join_timestamp).getTime();\n\n    /**\n     * The flags for this thread member\n     * @type {ThreadMemberFlags}\n     */\n    this.flags = new ThreadMemberFlags(data.flags).freeze();\n  }\n\n  /**\n   * The guild member associated with this thread member\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get guildMember() {\n    return this.thread.guild.members.resolve(this.id);\n  }\n\n  /**\n   * The last time this member joined the thread\n   * @type {?Date}\n   * @readonly\n   */\n  get joinedAt() {\n    return this.joinedTimestamp ? new Date(this.joinedTimestamp) : null;\n  }\n\n  /**\n   * The user associated with this thread member\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.resolve(this.id);\n  }\n\n  /**\n   * Whether the client user can manage this thread member\n   * @type {boolean}\n   * @readonly\n   */\n  get manageable() {\n    return !this.thread.archived && this.thread.editable;\n  }\n\n  /**\n   * Removes this member from the thread.\n   * @param {string} [reason] Reason for removing the member\n   * @returns {ThreadMember}\n   */\n  async remove(reason) {\n    await this.thread.members.remove(this.id, reason);\n    return this;\n  }\n}\n\nmodule.exports = ThreadMember;\n\n/**\n * @external APIThreadMember\n * @see {@link https://discord.com/developers/docs/resources/channel#thread-member-object}\n */\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,2BAAD,CAAjC;AAEA;AACA;AACA;AACA;;;AACA,MAAME,YAAN,SAA2BH,IAA3B,CAAgC;EAC9B;AACF;AACA;AACA;EACEI,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACxB,MAAMD,MAAM,CAACE,MAAb;IAEA;AACJ;AACA;AACA;;IACI,KAAKF,MAAL,GAAcA,MAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKG,eAAL,GAAuB,IAAvB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,EAAL,GAAUH,IAAI,CAACI,OAAf;;IAEA,KAAKC,MAAL,CAAYL,IAAZ;EACD;;EAEDK,MAAM,CAACL,IAAD,EAAO;IACX,KAAKE,eAAL,GAAuB,IAAII,IAAJ,CAASN,IAAI,CAACO,cAAd,EAA8BC,OAA9B,EAAvB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,KAAL,GAAa,IAAIb,iBAAJ,CAAsBI,IAAI,CAACS,KAA3B,EAAkCC,MAAlC,EAAb;EACD;EAED;AACF;AACA;AACA;AACA;;;EACiB,IAAXC,WAAW,GAAG;IAChB,OAAO,KAAKZ,MAAL,CAAYa,KAAZ,CAAkBC,OAAlB,CAA0BC,OAA1B,CAAkC,KAAKX,EAAvC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,IAARY,QAAQ,GAAG;IACb,OAAO,KAAKb,eAAL,GAAuB,IAAII,IAAJ,CAAS,KAAKJ,eAAd,CAAvB,GAAwD,IAA/D;EACD;EAED;AACF;AACA;AACA;AACA;;;EACU,IAAJc,IAAI,GAAG;IACT,OAAO,KAAKf,MAAL,CAAYgB,KAAZ,CAAkBH,OAAlB,CAA0B,KAAKX,EAA/B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACgB,IAAVe,UAAU,GAAG;IACf,OAAO,CAAC,KAAKnB,MAAL,CAAYoB,QAAb,IAAyB,KAAKpB,MAAL,CAAYqB,QAA5C;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,MAANC,MAAM,CAACC,MAAD,EAAS;IACnB,MAAM,KAAKvB,MAAL,CAAYc,OAAZ,CAAoBQ,MAApB,CAA2B,KAAKlB,EAAhC,EAAoCmB,MAApC,CAAN;IACA,OAAO,IAAP;EACD;;AAnF6B;;AAsFhCC,MAAM,CAACC,OAAP,GAAiB3B,YAAjB;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}