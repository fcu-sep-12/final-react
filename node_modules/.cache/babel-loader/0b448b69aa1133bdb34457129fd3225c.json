{"ast":null,"code":"'use strict'; // Heavily inspired by node's `internal/errors` module\n\nconst kCode = Symbol('code');\nconst messages = new Map();\n/**\n * Extend an error of some sort into a DiscordjsError.\n * @param {Error} Base Base error to extend\n * @returns {DiscordjsError}\n */\n\nfunction makeDiscordjsError(Base) {\n  return class DiscordjsError extends Base {\n    constructor(key) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      super(message(key, args));\n      this[kCode] = key;\n      if (Error.captureStackTrace) Error.captureStackTrace(this, DiscordjsError);\n    }\n\n    get name() {\n      return `${super.name} [${this[kCode]}]`;\n    }\n\n    get code() {\n      return this[kCode];\n    }\n\n  };\n}\n/**\n * Format the message for an error.\n * @param {string} key Error key\n * @param {Array<*>} args Arguments to pass for util format or as function args\n * @returns {string} Formatted string\n */\n\n\nfunction message(key, args) {\n  if (typeof key !== 'string') throw new Error('Error message key must be a string');\n  const msg = messages.get(key);\n  if (!msg) throw new Error(`An invalid error message key was used: ${key}.`);\n  if (typeof msg === 'function') return msg(...args);\n  if (!args?.length) return msg;\n  args.unshift(msg);\n  return String(...args);\n}\n/**\n * Register an error code and message.\n * @param {string} sym Unique name for the error\n * @param {*} val Value of the error\n */\n\n\nfunction register(sym, val) {\n  messages.set(sym, typeof val === 'function' ? val : String(val));\n}\n\nmodule.exports = {\n  register,\n  Error: makeDiscordjsError(Error),\n  TypeError: makeDiscordjsError(TypeError),\n  RangeError: makeDiscordjsError(RangeError)\n};","map":{"version":3,"names":["kCode","Symbol","messages","Map","makeDiscordjsError","Base","DiscordjsError","constructor","key","args","message","Error","captureStackTrace","name","code","msg","get","length","unshift","String","register","sym","val","set","module","exports","TypeError","RangeError"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/errors/DJSError.js"],"sourcesContent":["'use strict';\n\n// Heavily inspired by node's `internal/errors` module\n\nconst kCode = Symbol('code');\nconst messages = new Map();\n\n/**\n * Extend an error of some sort into a DiscordjsError.\n * @param {Error} Base Base error to extend\n * @returns {DiscordjsError}\n */\nfunction makeDiscordjsError(Base) {\n  return class DiscordjsError extends Base {\n    constructor(key, ...args) {\n      super(message(key, args));\n      this[kCode] = key;\n      if (Error.captureStackTrace) Error.captureStackTrace(this, DiscordjsError);\n    }\n\n    get name() {\n      return `${super.name} [${this[kCode]}]`;\n    }\n\n    get code() {\n      return this[kCode];\n    }\n  };\n}\n\n/**\n * Format the message for an error.\n * @param {string} key Error key\n * @param {Array<*>} args Arguments to pass for util format or as function args\n * @returns {string} Formatted string\n */\nfunction message(key, args) {\n  if (typeof key !== 'string') throw new Error('Error message key must be a string');\n  const msg = messages.get(key);\n  if (!msg) throw new Error(`An invalid error message key was used: ${key}.`);\n  if (typeof msg === 'function') return msg(...args);\n  if (!args?.length) return msg;\n  args.unshift(msg);\n  return String(...args);\n}\n\n/**\n * Register an error code and message.\n * @param {string} sym Unique name for the error\n * @param {*} val Value of the error\n */\nfunction register(sym, val) {\n  messages.set(sym, typeof val === 'function' ? val : String(val));\n}\n\nmodule.exports = {\n  register,\n  Error: makeDiscordjsError(Error),\n  TypeError: makeDiscordjsError(TypeError),\n  RangeError: makeDiscordjsError(RangeError),\n};\n"],"mappings":"AAAA,a,CAEA;;AAEA,MAAMA,KAAK,GAAGC,MAAM,CAAC,MAAD,CAApB;AACA,MAAMC,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkC;EAChC,OAAO,MAAMC,cAAN,SAA6BD,IAA7B,CAAkC;IACvCE,WAAW,CAACC,GAAD,EAAe;MAAA,kCAANC,IAAM;QAANA,IAAM;MAAA;;MACxB,MAAMC,OAAO,CAACF,GAAD,EAAMC,IAAN,CAAb;MACA,KAAKT,KAAL,IAAcQ,GAAd;MACA,IAAIG,KAAK,CAACC,iBAAV,EAA6BD,KAAK,CAACC,iBAAN,CAAwB,IAAxB,EAA8BN,cAA9B;IAC9B;;IAEO,IAAJO,IAAI,GAAG;MACT,OAAQ,GAAE,MAAMA,IAAK,KAAI,KAAKb,KAAL,CAAY,GAArC;IACD;;IAEO,IAAJc,IAAI,GAAG;MACT,OAAO,KAAKd,KAAL,CAAP;IACD;;EAbsC,CAAzC;AAeD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASU,OAAT,CAAiBF,GAAjB,EAAsBC,IAAtB,EAA4B;EAC1B,IAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B,MAAM,IAAIG,KAAJ,CAAU,oCAAV,CAAN;EAC7B,MAAMI,GAAG,GAAGb,QAAQ,CAACc,GAAT,CAAaR,GAAb,CAAZ;EACA,IAAI,CAACO,GAAL,EAAU,MAAM,IAAIJ,KAAJ,CAAW,0CAAyCH,GAAI,GAAxD,CAAN;EACV,IAAI,OAAOO,GAAP,KAAe,UAAnB,EAA+B,OAAOA,GAAG,CAAC,GAAGN,IAAJ,CAAV;EAC/B,IAAI,CAACA,IAAI,EAAEQ,MAAX,EAAmB,OAAOF,GAAP;EACnBN,IAAI,CAACS,OAAL,CAAaH,GAAb;EACA,OAAOI,MAAM,CAAC,GAAGV,IAAJ,CAAb;AACD;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASW,QAAT,CAAkBC,GAAlB,EAAuBC,GAAvB,EAA4B;EAC1BpB,QAAQ,CAACqB,GAAT,CAAaF,GAAb,EAAkB,OAAOC,GAAP,KAAe,UAAf,GAA4BA,GAA5B,GAAkCH,MAAM,CAACG,GAAD,CAA1D;AACD;;AAEDE,MAAM,CAACC,OAAP,GAAiB;EACfL,QADe;EAEfT,KAAK,EAAEP,kBAAkB,CAACO,KAAD,CAFV;EAGfe,SAAS,EAAEtB,kBAAkB,CAACsB,SAAD,CAHd;EAIfC,UAAU,EAAEvB,kBAAkB,CAACuB,UAAD;AAJf,CAAjB"},"metadata":{},"sourceType":"script"}