{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Faces = exports.TimestampStyles = exports.time = exports.formatEmoji = exports.roleMention = exports.channelMention = exports.memberNicknameMention = exports.userMention = exports.spoiler = exports.hyperlink = exports.hideLinkEmbed = exports.blockQuote = exports.quote = exports.strikethrough = exports.underscore = exports.bold = exports.italic = exports.inlineCode = exports.codeBlock = void 0;\n\nfunction codeBlock(language, content) {\n  return typeof content === 'undefined' ? `\\`\\`\\`\\n${language}\\`\\`\\`` : `\\`\\`\\`${language}\\n${content}\\`\\`\\``;\n}\n\nexports.codeBlock = codeBlock;\n/**\n * Wraps the content inside \\`backticks\\`, which formats it as inline code.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\n\nfunction inlineCode(content) {\n  return `\\`${content}\\``;\n}\n\nexports.inlineCode = inlineCode;\n/**\n * Formats the content into italic text.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\n\nfunction italic(content) {\n  return `_${content}_`;\n}\n\nexports.italic = italic;\n/**\n * Formats the content into bold text.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\n\nfunction bold(content) {\n  return `**${content}**`;\n}\n\nexports.bold = bold;\n/**\n * Formats the content into underscored text.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\n\nfunction underscore(content) {\n  return `__${content}__`;\n}\n\nexports.underscore = underscore;\n/**\n * Formats the content into strike-through text.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\n\nfunction strikethrough(content) {\n  return `~~${content}~~`;\n}\n\nexports.strikethrough = strikethrough;\n/**\n * Formats the content into a quote. This needs to be at the start of the line for Discord to format it.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\n\nfunction quote(content) {\n  return `> ${content}`;\n}\n\nexports.quote = quote;\n/**\n * Formats the content into a block quote. This needs to be at the start of the line for Discord to format it.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\n\nfunction blockQuote(content) {\n  return `>>> ${content}`;\n}\n\nexports.blockQuote = blockQuote;\n\nfunction hideLinkEmbed(url) {\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  return `<${url}>`;\n}\n\nexports.hideLinkEmbed = hideLinkEmbed;\n\nfunction hyperlink(content, url, title) {\n  // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n  return title ? `[${content}](${url} \"${title}\")` : `[${content}](${url})`;\n}\n\nexports.hyperlink = hyperlink;\n/**\n * Wraps the content inside spoiler (hidden text).\n * @param content The content to wrap.\n * @returns The formatted content.\n */\n\nfunction spoiler(content) {\n  return `||${content}||`;\n}\n\nexports.spoiler = spoiler;\n/**\n * Formats a user ID into a user mention.\n * @param userId The user ID to format.\n * @returns The formatted user mention.\n */\n\nfunction userMention(userId) {\n  return `<@${userId}>`;\n}\n\nexports.userMention = userMention;\n/**\n * Formats a user ID into a member-nickname mention.\n * @param memberId The user ID to format.\n * @returns The formatted member-nickname mention.\n */\n\nfunction memberNicknameMention(memberId) {\n  return `<@!${memberId}>`;\n}\n\nexports.memberNicknameMention = memberNicknameMention;\n/**\n * Formats a channel ID into a channel mention.\n * @param channelId The channel ID to format.\n * @returns The formatted channel mention.\n */\n\nfunction channelMention(channelId) {\n  return `<#${channelId}>`;\n}\n\nexports.channelMention = channelMention;\n/**\n * Formats a role ID into a role mention.\n * @param roleId The role ID to format.\n * @returns The formatted role mention.\n */\n\nfunction roleMention(roleId) {\n  return `<@&${roleId}>`;\n}\n\nexports.roleMention = roleMention;\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n * @param emojiId The emoji ID to format.\n * @param animated Whether the emoji is animated or not. Defaults to `false`\n * @returns The formatted emoji.\n */\n\nfunction formatEmoji(emojiId) {\n  let animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return `<${animated ? 'a' : ''}:_:${emojiId}>`;\n}\n\nexports.formatEmoji = formatEmoji;\n\nfunction time(timeOrSeconds, style) {\n  if (typeof timeOrSeconds !== 'number') {\n    timeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1000);\n  }\n\n  return typeof style === 'string' ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;\n}\n\nexports.time = time;\n/**\n * The [message formatting timestamp styles](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles) supported by Discord.\n */\n\nexports.TimestampStyles = {\n  /**\n   * Short time format, consisting of hours and minutes, e.g. 16:20.\n   */\n  ShortTime: 't',\n\n  /**\n   * Long time format, consisting of hours, minutes, and seconds, e.g. 16:20:30.\n   */\n  LongTime: 'T',\n\n  /**\n   * Short date format, consisting of day, month, and year, e.g. 20/04/2021.\n   */\n  ShortDate: 'd',\n\n  /**\n   * Long date format, consisting of day, month, and year, e.g. 20 April 2021.\n   */\n  LongDate: 'D',\n\n  /**\n   * Short date-time format, consisting of short date and short time formats, e.g. 20 April 2021 16:20.\n   */\n  ShortDateTime: 'f',\n\n  /**\n   * Long date-time format, consisting of long date and short time formats, e.g. Tuesday, 20 April 2021 16:20.\n   */\n  LongDateTime: 'F',\n\n  /**\n   * Relative time format, consisting of a relative duration format, e.g. 2 months ago.\n   */\n  RelativeTime: 'R'\n};\n/**\n * An enum with all the available faces from Discord's native slash commands\n */\n\nvar Faces;\n\n(function (Faces) {\n  /**\n   * ¯\\\\_(ツ)\\\\_/¯\n   */\n  Faces[\"Shrug\"] = \"\\u00AF\\\\_(\\u30C4)\\\\_/\\u00AF\";\n  /**\n   * (╯°□°）╯︵ ┻━┻\n   */\n\n  Faces[\"Tableflip\"] = \"(\\u256F\\u00B0\\u25A1\\u00B0\\uFF09\\u256F\\uFE35 \\u253B\\u2501\\u253B\";\n  /**\n   * ┬─┬ ノ( ゜-゜ノ)\n   */\n\n  Faces[\"Unflip\"] = \"\\u252C\\u2500\\u252C \\u30CE( \\u309C-\\u309C\\u30CE)\";\n})(Faces = exports.Faces || (exports.Faces = {}));","map":{"version":3,"mappings":"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","names":["codeBlock","language","content","exports","inlineCode","italic","bold","underscore","strikethrough","quote","blockQuote","hideLinkEmbed","url","hyperlink","title","spoiler","userMention","userId","memberNicknameMention","memberId","channelMention","channelId","roleMention","roleId","formatEmoji","emojiId","animated","time","timeOrSeconds","style","Math","floor","getTime","Date","now","ShortTime","LongTime","ShortDate","LongDate","ShortDateTime","LongDateTime","RelativeTime","Faces"],"sources":["\\messages\\formatters.ts"],"sourcesContent":["import type { Snowflake } from 'discord-api-types/globals';\nimport type { URL } from 'url';\n\n/**\n * Wraps the content inside a codeblock with no language.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\nexport function codeBlock<C extends string>(content: C): `\\`\\`\\`\\n${C}\\`\\`\\``;\n\n/**\n * Wraps the content inside a codeblock with the specified language.\n * @param language The language for the codeblock.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\nexport function codeBlock<L extends string, C extends string>(language: L, content: C): `\\`\\`\\`${L}\\n${C}\\`\\`\\``;\nexport function codeBlock(language: string, content?: string): string {\n\treturn typeof content === 'undefined' ? `\\`\\`\\`\\n${language}\\`\\`\\`` : `\\`\\`\\`${language}\\n${content}\\`\\`\\``;\n}\n\n/**\n * Wraps the content inside \\`backticks\\`, which formats it as inline code.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\nexport function inlineCode<C extends string>(content: C): `\\`${C}\\`` {\n\treturn `\\`${content}\\``;\n}\n\n/**\n * Formats the content into italic text.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\nexport function italic<C extends string>(content: C): `_${C}_` {\n\treturn `_${content}_`;\n}\n\n/**\n * Formats the content into bold text.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\nexport function bold<C extends string>(content: C): `**${C}**` {\n\treturn `**${content}**`;\n}\n\n/**\n * Formats the content into underscored text.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\nexport function underscore<C extends string>(content: C): `__${C}__` {\n\treturn `__${content}__`;\n}\n\n/**\n * Formats the content into strike-through text.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\nexport function strikethrough<C extends string>(content: C): `~~${C}~~` {\n\treturn `~~${content}~~`;\n}\n\n/**\n * Formats the content into a quote. This needs to be at the start of the line for Discord to format it.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\nexport function quote<C extends string>(content: C): `> ${C}` {\n\treturn `> ${content}`;\n}\n\n/**\n * Formats the content into a block quote. This needs to be at the start of the line for Discord to format it.\n * @param content The content to wrap.\n * @returns The formatted content.\n */\nexport function blockQuote<C extends string>(content: C): `>>> ${C}` {\n\treturn `>>> ${content}`;\n}\n\n/**\n * Wraps the URL into `<>`, which stops it from embedding.\n * @param url The URL to wrap.\n * @returns The formatted content.\n */\nexport function hideLinkEmbed<C extends string>(url: C): `<${C}>`;\n\n/**\n * Wraps the URL into `<>`, which stops it from embedding.\n * @param url The URL to wrap.\n * @returns The formatted content.\n */\nexport function hideLinkEmbed(url: URL): `<${string}>`;\nexport function hideLinkEmbed(url: string | URL) {\n\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\treturn `<${url}>`;\n}\n\n/**\n * Formats the content and the URL into a masked URL.\n * @param content The content to display.\n * @param url The URL the content links to.\n * @returns The formatted content.\n */\nexport function hyperlink<C extends string>(content: C, url: URL): `[${C}](${string})`;\n\n/**\n * Formats the content and the URL into a masked URL.\n * @param content The content to display.\n * @param url The URL the content links to.\n * @returns The formatted content.\n */\nexport function hyperlink<C extends string, U extends string>(content: C, url: U): `[${C}](${U})`;\n\n/**\n * Formats the content and the URL into a masked URL.\n * @param content The content to display.\n * @param url The URL the content links to.\n * @param title The title shown when hovering on the masked link.\n * @returns The formatted content.\n */\nexport function hyperlink<C extends string, T extends string>(\n\tcontent: C,\n\turl: URL,\n\ttitle: T,\n): `[${C}](${string} \"${T}\")`;\n\n/**\n * Formats the content and the URL into a masked URL.\n * @param content The content to display.\n * @param url The URL the content links to.\n * @param title The title shown when hovering on the masked link.\n * @returns The formatted content.\n */\nexport function hyperlink<C extends string, U extends string, T extends string>(\n\tcontent: C,\n\turl: U,\n\ttitle: T,\n): `[${C}](${U} \"${T}\")`;\nexport function hyperlink(content: string, url: string | URL, title?: string) {\n\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\treturn title ? `[${content}](${url} \"${title}\")` : `[${content}](${url})`;\n}\n\n/**\n * Wraps the content inside spoiler (hidden text).\n * @param content The content to wrap.\n * @returns The formatted content.\n */\nexport function spoiler<C extends string>(content: C): `||${C}||` {\n\treturn `||${content}||`;\n}\n\n/**\n * Formats a user ID into a user mention.\n * @param userId The user ID to format.\n * @returns The formatted user mention.\n */\nexport function userMention<C extends Snowflake>(userId: C): `<@${C}>` {\n\treturn `<@${userId}>`;\n}\n\n/**\n * Formats a user ID into a member-nickname mention.\n * @param memberId The user ID to format.\n * @returns The formatted member-nickname mention.\n */\nexport function memberNicknameMention<C extends Snowflake>(memberId: C): `<@!${C}>` {\n\treturn `<@!${memberId}>`;\n}\n\n/**\n * Formats a channel ID into a channel mention.\n * @param channelId The channel ID to format.\n * @returns The formatted channel mention.\n */\nexport function channelMention<C extends Snowflake>(channelId: C): `<#${C}>` {\n\treturn `<#${channelId}>`;\n}\n\n/**\n * Formats a role ID into a role mention.\n * @param roleId The role ID to format.\n * @returns The formatted role mention.\n */\nexport function roleMention<C extends Snowflake>(roleId: C): `<@&${C}>` {\n\treturn `<@&${roleId}>`;\n}\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n * @param emojiId The emoji ID to format.\n * @returns The formatted emoji.\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: false): `<:_:${C}>`;\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n * @param emojiId The emoji ID to format.\n * @param animated Whether the emoji is animated or not. Defaults to `false`\n * @returns The formatted emoji.\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated?: true): `<a:_:${C}>`;\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n * @param emojiId The emoji ID to format.\n * @param animated Whether the emoji is animated or not. Defaults to `false`\n * @returns The formatted emoji.\n */\nexport function formatEmoji<C extends Snowflake>(emojiId: C, animated = false): `<a:_:${C}>` | `<:_:${C}>` {\n\treturn `<${animated ? 'a' : ''}:_:${emojiId}>`;\n}\n\n/**\n * Formats a date into a short date-time string.\n * @param date The date to format, defaults to the current time.\n */\nexport function time(date?: Date): `<t:${bigint}>`;\n\n/**\n * Formats a date given a format style.\n * @param date The date to format.\n * @param style The style to use.\n */\nexport function time<S extends TimestampStylesString>(date: Date, style: S): `<t:${bigint}:${S}>`;\n\n/**\n * Formats the given timestamp into a short date-time string.\n * @param seconds The time to format, represents an UNIX timestamp in seconds.\n */\nexport function time<C extends number>(seconds: C): `<t:${C}>`;\n\n/**\n * Formats the given timestamp into a short date-time string.\n * @param seconds The time to format, represents an UNIX timestamp in seconds.\n * @param style The style to use.\n */\nexport function time<C extends number, S extends TimestampStylesString>(seconds: C, style: S): `<t:${C}:${S}>`;\nexport function time(timeOrSeconds?: number | Date, style?: TimestampStylesString): string {\n\tif (typeof timeOrSeconds !== 'number') {\n\t\ttimeOrSeconds = Math.floor((timeOrSeconds?.getTime() ?? Date.now()) / 1000);\n\t}\n\n\treturn typeof style === 'string' ? `<t:${timeOrSeconds}:${style}>` : `<t:${timeOrSeconds}>`;\n}\n\n/**\n * The [message formatting timestamp styles](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles) supported by Discord.\n */\nexport const TimestampStyles = {\n\t/**\n\t * Short time format, consisting of hours and minutes, e.g. 16:20.\n\t */\n\tShortTime: 't',\n\n\t/**\n\t * Long time format, consisting of hours, minutes, and seconds, e.g. 16:20:30.\n\t */\n\tLongTime: 'T',\n\n\t/**\n\t * Short date format, consisting of day, month, and year, e.g. 20/04/2021.\n\t */\n\tShortDate: 'd',\n\n\t/**\n\t * Long date format, consisting of day, month, and year, e.g. 20 April 2021.\n\t */\n\tLongDate: 'D',\n\n\t/**\n\t * Short date-time format, consisting of short date and short time formats, e.g. 20 April 2021 16:20.\n\t */\n\tShortDateTime: 'f',\n\n\t/**\n\t * Long date-time format, consisting of long date and short time formats, e.g. Tuesday, 20 April 2021 16:20.\n\t */\n\tLongDateTime: 'F',\n\n\t/**\n\t * Relative time format, consisting of a relative duration format, e.g. 2 months ago.\n\t */\n\tRelativeTime: 'R',\n} as const;\n\n/**\n * The possible values, see {@link TimestampStyles} for more information.\n */\nexport type TimestampStylesString = typeof TimestampStyles[keyof typeof TimestampStyles];\n\n/**\n * An enum with all the available faces from Discord's native slash commands\n */\nexport enum Faces {\n\t/**\n\t * ¯\\\\_(ツ)\\\\_/¯\n\t */\n\tShrug = '¯\\\\_(ツ)\\\\_/¯',\n\n\t/**\n\t * (╯°□°）╯︵ ┻━┻\n\t */\n\tTableflip = '(╯°□°）╯︵ ┻━┻',\n\n\t/**\n\t * ┬─┬ ノ( ゜-゜ノ)\n\t */\n\tUnflip = '┬─┬ ノ( ゜-゜ノ)',\n}\n"]},"metadata":{},"sourceType":"script"}