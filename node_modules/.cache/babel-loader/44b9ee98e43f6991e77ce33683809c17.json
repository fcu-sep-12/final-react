{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst VoiceState = require('../../structures/VoiceState');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nclass VoiceStateUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n\n    if (guild) {\n      // Update the state\n      const oldState = guild.voiceStates.cache.get(data.user_id)?._clone() ?? new VoiceState(guild, {\n        user_id: data.user_id\n      });\n\n      const newState = guild.voiceStates._add(data); // Get the member\n\n\n      let member = guild.members.cache.get(data.user_id);\n\n      if (member && data.member) {\n        member._patch(data.member);\n      } else if (data.member?.user && data.member.joined_at) {\n        member = guild.members._add(data.member);\n      } // Emit event\n\n\n      if (member?.user.id === client.user.id) {\n        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);\n        client.voice.onVoiceStateUpdate(data);\n      }\n      /**\n       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n       * @event Client#voiceStateUpdate\n       * @param {VoiceState} oldState The voice state before the update\n       * @param {VoiceState} newState The voice state after the update\n       */\n\n\n      client.emit(Events.VOICE_STATE_UPDATE, oldState, newState);\n    }\n  }\n\n}\n\nmodule.exports = VoiceStateUpdate;","map":{"version":3,"names":["Action","require","VoiceState","Events","VoiceStateUpdate","handle","data","client","guild","guilds","cache","get","guild_id","oldState","voiceStates","user_id","_clone","newState","_add","member","members","_patch","user","joined_at","id","emit","JSON","stringify","voice","onVoiceStateUpdate","VOICE_STATE_UPDATE","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/actions/VoiceStateUpdate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst VoiceState = require('../../structures/VoiceState');\nconst { Events } = require('../../util/Constants');\n\nclass VoiceStateUpdate extends Action {\n  handle(data) {\n    const client = this.client;\n    const guild = client.guilds.cache.get(data.guild_id);\n    if (guild) {\n      // Update the state\n      const oldState =\n        guild.voiceStates.cache.get(data.user_id)?._clone() ?? new VoiceState(guild, { user_id: data.user_id });\n\n      const newState = guild.voiceStates._add(data);\n\n      // Get the member\n      let member = guild.members.cache.get(data.user_id);\n      if (member && data.member) {\n        member._patch(data.member);\n      } else if (data.member?.user && data.member.joined_at) {\n        member = guild.members._add(data.member);\n      }\n\n      // Emit event\n      if (member?.user.id === client.user.id) {\n        client.emit('debug', `[VOICE] received voice state update: ${JSON.stringify(data)}`);\n        client.voice.onVoiceStateUpdate(data);\n      }\n\n      /**\n       * Emitted whenever a member changes voice state - e.g. joins/leaves a channel, mutes/unmutes.\n       * @event Client#voiceStateUpdate\n       * @param {VoiceState} oldState The voice state before the update\n       * @param {VoiceState} newState The voice state after the update\n       */\n      client.emit(Events.VOICE_STATE_UPDATE, oldState, newState);\n    }\n  }\n}\n\nmodule.exports = VoiceStateUpdate;\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,6BAAD,CAA1B;;AACA,MAAM;EAAEE;AAAF,IAAaF,OAAO,CAAC,sBAAD,CAA1B;;AAEA,MAAMG,gBAAN,SAA+BJ,MAA/B,CAAsC;EACpCK,MAAM,CAACC,IAAD,EAAO;IACX,MAAMC,MAAM,GAAG,KAAKA,MAApB;IACA,MAAMC,KAAK,GAAGD,MAAM,CAACE,MAAP,CAAcC,KAAd,CAAoBC,GAApB,CAAwBL,IAAI,CAACM,QAA7B,CAAd;;IACA,IAAIJ,KAAJ,EAAW;MACT;MACA,MAAMK,QAAQ,GACZL,KAAK,CAACM,WAAN,CAAkBJ,KAAlB,CAAwBC,GAAxB,CAA4BL,IAAI,CAACS,OAAjC,GAA2CC,MAA3C,MAAuD,IAAId,UAAJ,CAAeM,KAAf,EAAsB;QAAEO,OAAO,EAAET,IAAI,CAACS;MAAhB,CAAtB,CADzD;;MAGA,MAAME,QAAQ,GAAGT,KAAK,CAACM,WAAN,CAAkBI,IAAlB,CAAuBZ,IAAvB,CAAjB,CALS,CAOT;;;MACA,IAAIa,MAAM,GAAGX,KAAK,CAACY,OAAN,CAAcV,KAAd,CAAoBC,GAApB,CAAwBL,IAAI,CAACS,OAA7B,CAAb;;MACA,IAAII,MAAM,IAAIb,IAAI,CAACa,MAAnB,EAA2B;QACzBA,MAAM,CAACE,MAAP,CAAcf,IAAI,CAACa,MAAnB;MACD,CAFD,MAEO,IAAIb,IAAI,CAACa,MAAL,EAAaG,IAAb,IAAqBhB,IAAI,CAACa,MAAL,CAAYI,SAArC,EAAgD;QACrDJ,MAAM,GAAGX,KAAK,CAACY,OAAN,CAAcF,IAAd,CAAmBZ,IAAI,CAACa,MAAxB,CAAT;MACD,CAbQ,CAeT;;;MACA,IAAIA,MAAM,EAAEG,IAAR,CAAaE,EAAb,KAAoBjB,MAAM,CAACe,IAAP,CAAYE,EAApC,EAAwC;QACtCjB,MAAM,CAACkB,IAAP,CAAY,OAAZ,EAAsB,wCAAuCC,IAAI,CAACC,SAAL,CAAerB,IAAf,CAAqB,EAAlF;QACAC,MAAM,CAACqB,KAAP,CAAaC,kBAAb,CAAgCvB,IAAhC;MACD;MAED;AACN;AACA;AACA;AACA;AACA;;;MACMC,MAAM,CAACkB,IAAP,CAAYtB,MAAM,CAAC2B,kBAAnB,EAAuCjB,QAAvC,EAAiDI,QAAjD;IACD;EACF;;AAjCmC;;AAoCtCc,MAAM,CAACC,OAAP,GAAiB5B,gBAAjB"},"metadata":{},"sourceType":"script"}