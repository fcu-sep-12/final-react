{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst ButtonInteraction = require('../../structures/ButtonInteraction');\n\nconst CommandInteraction = require('../../structures/CommandInteraction');\n\nconst ContextMenuInteraction = require('../../structures/ContextMenuInteraction');\n\nconst SelectMenuInteraction = require('../../structures/SelectMenuInteraction');\n\nconst {\n  Events,\n  InteractionTypes,\n  MessageComponentTypes,\n  ApplicationCommandTypes\n} = require('../../util/Constants');\n\nlet deprecationEmitted = false;\n\nclass InteractionCreateAction extends Action {\n  handle(data) {\n    const client = this.client; // Resolve and cache partial channels for Interaction#channel getter\n\n    this.getChannel(data);\n    let InteractionType;\n\n    switch (data.type) {\n      case InteractionTypes.APPLICATION_COMMAND:\n        switch (data.data.type) {\n          case ApplicationCommandTypes.CHAT_INPUT:\n            InteractionType = CommandInteraction;\n            break;\n\n          case ApplicationCommandTypes.USER:\n          case ApplicationCommandTypes.MESSAGE:\n            InteractionType = ContextMenuInteraction;\n            break;\n\n          default:\n            client.emit(Events.DEBUG, `[INTERACTION] Received application command interaction with unknown type: ${data.data.type}`);\n            return;\n        }\n\n        break;\n\n      case InteractionTypes.MESSAGE_COMPONENT:\n        switch (data.data.component_type) {\n          case MessageComponentTypes.BUTTON:\n            InteractionType = ButtonInteraction;\n            break;\n\n          case MessageComponentTypes.SELECT_MENU:\n            InteractionType = SelectMenuInteraction;\n            break;\n\n          default:\n            client.emit(Events.DEBUG, `[INTERACTION] Received component interaction with unknown type: ${data.data.component_type}`);\n            return;\n        }\n\n        break;\n\n      default:\n        client.emit(Events.DEBUG, `[INTERACTION] Received interaction with unknown type: ${data.type}`);\n        return;\n    }\n\n    const interaction = new InteractionType(client, data);\n    /**\n     * Emitted when an interaction is created.\n     * @event Client#interactionCreate\n     * @param {Interaction} interaction The interaction which was created\n     */\n\n    client.emit(Events.INTERACTION_CREATE, interaction);\n    /**\n     * Emitted when an interaction is created.\n     * @event Client#interaction\n     * @param {Interaction} interaction The interaction which was created\n     * @deprecated Use {@link Client#interactionCreate} instead\n     */\n\n    if (client.emit('interaction', interaction) && !deprecationEmitted) {\n      deprecationEmitted = true;\n      process.emitWarning('The interaction event is deprecated. Use interactionCreate instead', 'DeprecationWarning');\n    }\n  }\n\n}\n\nmodule.exports = InteractionCreateAction;","map":{"version":3,"names":["Action","require","ButtonInteraction","CommandInteraction","ContextMenuInteraction","SelectMenuInteraction","Events","InteractionTypes","MessageComponentTypes","ApplicationCommandTypes","deprecationEmitted","InteractionCreateAction","handle","data","client","getChannel","InteractionType","type","APPLICATION_COMMAND","CHAT_INPUT","USER","MESSAGE","emit","DEBUG","MESSAGE_COMPONENT","component_type","BUTTON","SELECT_MENU","interaction","INTERACTION_CREATE","process","emitWarning","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/actions/InteractionCreate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst ButtonInteraction = require('../../structures/ButtonInteraction');\nconst CommandInteraction = require('../../structures/CommandInteraction');\nconst ContextMenuInteraction = require('../../structures/ContextMenuInteraction');\nconst SelectMenuInteraction = require('../../structures/SelectMenuInteraction');\nconst { Events, InteractionTypes, MessageComponentTypes, ApplicationCommandTypes } = require('../../util/Constants');\n\nlet deprecationEmitted = false;\n\nclass InteractionCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n\n    // Resolve and cache partial channels for Interaction#channel getter\n    this.getChannel(data);\n\n    let InteractionType;\n    switch (data.type) {\n      case InteractionTypes.APPLICATION_COMMAND:\n        switch (data.data.type) {\n          case ApplicationCommandTypes.CHAT_INPUT:\n            InteractionType = CommandInteraction;\n            break;\n          case ApplicationCommandTypes.USER:\n          case ApplicationCommandTypes.MESSAGE:\n            InteractionType = ContextMenuInteraction;\n            break;\n          default:\n            client.emit(\n              Events.DEBUG,\n              `[INTERACTION] Received application command interaction with unknown type: ${data.data.type}`,\n            );\n            return;\n        }\n        break;\n      case InteractionTypes.MESSAGE_COMPONENT:\n        switch (data.data.component_type) {\n          case MessageComponentTypes.BUTTON:\n            InteractionType = ButtonInteraction;\n            break;\n          case MessageComponentTypes.SELECT_MENU:\n            InteractionType = SelectMenuInteraction;\n            break;\n          default:\n            client.emit(\n              Events.DEBUG,\n              `[INTERACTION] Received component interaction with unknown type: ${data.data.component_type}`,\n            );\n            return;\n        }\n        break;\n      default:\n        client.emit(Events.DEBUG, `[INTERACTION] Received interaction with unknown type: ${data.type}`);\n        return;\n    }\n\n    const interaction = new InteractionType(client, data);\n\n    /**\n     * Emitted when an interaction is created.\n     * @event Client#interactionCreate\n     * @param {Interaction} interaction The interaction which was created\n     */\n    client.emit(Events.INTERACTION_CREATE, interaction);\n\n    /**\n     * Emitted when an interaction is created.\n     * @event Client#interaction\n     * @param {Interaction} interaction The interaction which was created\n     * @deprecated Use {@link Client#interactionCreate} instead\n     */\n    if (client.emit('interaction', interaction) && !deprecationEmitted) {\n      deprecationEmitted = true;\n      process.emitWarning('The interaction event is deprecated. Use interactionCreate instead', 'DeprecationWarning');\n    }\n  }\n}\n\nmodule.exports = InteractionCreateAction;\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMC,iBAAiB,GAAGD,OAAO,CAAC,oCAAD,CAAjC;;AACA,MAAME,kBAAkB,GAAGF,OAAO,CAAC,qCAAD,CAAlC;;AACA,MAAMG,sBAAsB,GAAGH,OAAO,CAAC,yCAAD,CAAtC;;AACA,MAAMI,qBAAqB,GAAGJ,OAAO,CAAC,wCAAD,CAArC;;AACA,MAAM;EAAEK,MAAF;EAAUC,gBAAV;EAA4BC,qBAA5B;EAAmDC;AAAnD,IAA+ER,OAAO,CAAC,sBAAD,CAA5F;;AAEA,IAAIS,kBAAkB,GAAG,KAAzB;;AAEA,MAAMC,uBAAN,SAAsCX,MAAtC,CAA6C;EAC3CY,MAAM,CAACC,IAAD,EAAO;IACX,MAAMC,MAAM,GAAG,KAAKA,MAApB,CADW,CAGX;;IACA,KAAKC,UAAL,CAAgBF,IAAhB;IAEA,IAAIG,eAAJ;;IACA,QAAQH,IAAI,CAACI,IAAb;MACE,KAAKV,gBAAgB,CAACW,mBAAtB;QACE,QAAQL,IAAI,CAACA,IAAL,CAAUI,IAAlB;UACE,KAAKR,uBAAuB,CAACU,UAA7B;YACEH,eAAe,GAAGb,kBAAlB;YACA;;UACF,KAAKM,uBAAuB,CAACW,IAA7B;UACA,KAAKX,uBAAuB,CAACY,OAA7B;YACEL,eAAe,GAAGZ,sBAAlB;YACA;;UACF;YACEU,MAAM,CAACQ,IAAP,CACEhB,MAAM,CAACiB,KADT,EAEG,6EAA4EV,IAAI,CAACA,IAAL,CAAUI,IAAK,EAF9F;YAIA;QAbJ;;QAeA;;MACF,KAAKV,gBAAgB,CAACiB,iBAAtB;QACE,QAAQX,IAAI,CAACA,IAAL,CAAUY,cAAlB;UACE,KAAKjB,qBAAqB,CAACkB,MAA3B;YACEV,eAAe,GAAGd,iBAAlB;YACA;;UACF,KAAKM,qBAAqB,CAACmB,WAA3B;YACEX,eAAe,GAAGX,qBAAlB;YACA;;UACF;YACES,MAAM,CAACQ,IAAP,CACEhB,MAAM,CAACiB,KADT,EAEG,mEAAkEV,IAAI,CAACA,IAAL,CAAUY,cAAe,EAF9F;YAIA;QAZJ;;QAcA;;MACF;QACEX,MAAM,CAACQ,IAAP,CAAYhB,MAAM,CAACiB,KAAnB,EAA2B,yDAAwDV,IAAI,CAACI,IAAK,EAA7F;QACA;IApCJ;;IAuCA,MAAMW,WAAW,GAAG,IAAIZ,eAAJ,CAAoBF,MAApB,EAA4BD,IAA5B,CAApB;IAEA;AACJ;AACA;AACA;AACA;;IACIC,MAAM,CAACQ,IAAP,CAAYhB,MAAM,CAACuB,kBAAnB,EAAuCD,WAAvC;IAEA;AACJ;AACA;AACA;AACA;AACA;;IACI,IAAId,MAAM,CAACQ,IAAP,CAAY,aAAZ,EAA2BM,WAA3B,KAA2C,CAAClB,kBAAhD,EAAoE;MAClEA,kBAAkB,GAAG,IAArB;MACAoB,OAAO,CAACC,WAAR,CAAoB,oEAApB,EAA0F,oBAA1F;IACD;EACF;;AAlE0C;;AAqE7CC,MAAM,CAACC,OAAP,GAAiBtB,uBAAjB"},"metadata":{},"sourceType":"script"}