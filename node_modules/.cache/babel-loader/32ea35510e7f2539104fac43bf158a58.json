{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nclass GuildDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n    let guild = client.guilds.cache.get(data.id);\n\n    if (guild) {\n      if (data.unavailable) {\n        // Guild is unavailable\n        guild.available = false;\n        /**\n         * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n         * @event Client#guildUnavailable\n         * @param {Guild} guild The guild that has become unavailable\n         */\n\n        client.emit(Events.GUILD_UNAVAILABLE, guild); // Stops the GuildDelete packet thinking a guild was actually deleted,\n        // handles emitting of event itself\n\n        return {\n          guild: null\n        };\n      }\n\n      for (const channel of guild.channels.cache.values()) this.client.channels._remove(channel.id);\n\n      client.voice.adapters.get(data.id)?.destroy(); // Delete guild\n\n      client.guilds.cache.delete(guild.id);\n      guild.deleted = true;\n      /**\n       * Emitted whenever a guild kicks the client or the guild is deleted/left.\n       * @event Client#guildDelete\n       * @param {Guild} guild The guild that was deleted\n       */\n\n      client.emit(Events.GUILD_DELETE, guild);\n      this.deleted.set(guild.id, guild);\n      this.scheduleForDeletion(guild.id);\n    } else {\n      guild = this.deleted.get(data.id) ?? null;\n    }\n\n    return {\n      guild\n    };\n  }\n\n  scheduleForDeletion(id) {\n    setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout).unref();\n  }\n\n}\n\nmodule.exports = GuildDeleteAction;","map":{"version":3,"names":["Action","require","Events","GuildDeleteAction","constructor","client","deleted","Map","handle","data","guild","guilds","cache","get","id","unavailable","available","emit","GUILD_UNAVAILABLE","channel","channels","values","_remove","voice","adapters","destroy","delete","GUILD_DELETE","set","scheduleForDeletion","setTimeout","options","restWsBridgeTimeout","unref","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/actions/GuildDelete.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\n\nclass GuildDeleteAction extends Action {\n  constructor(client) {\n    super(client);\n    this.deleted = new Map();\n  }\n\n  handle(data) {\n    const client = this.client;\n\n    let guild = client.guilds.cache.get(data.id);\n    if (guild) {\n      if (data.unavailable) {\n        // Guild is unavailable\n        guild.available = false;\n\n        /**\n         * Emitted whenever a guild becomes unavailable, likely due to a server outage.\n         * @event Client#guildUnavailable\n         * @param {Guild} guild The guild that has become unavailable\n         */\n        client.emit(Events.GUILD_UNAVAILABLE, guild);\n\n        // Stops the GuildDelete packet thinking a guild was actually deleted,\n        // handles emitting of event itself\n        return {\n          guild: null,\n        };\n      }\n\n      for (const channel of guild.channels.cache.values()) this.client.channels._remove(channel.id);\n      client.voice.adapters.get(data.id)?.destroy();\n\n      // Delete guild\n      client.guilds.cache.delete(guild.id);\n      guild.deleted = true;\n\n      /**\n       * Emitted whenever a guild kicks the client or the guild is deleted/left.\n       * @event Client#guildDelete\n       * @param {Guild} guild The guild that was deleted\n       */\n      client.emit(Events.GUILD_DELETE, guild);\n\n      this.deleted.set(guild.id, guild);\n      this.scheduleForDeletion(guild.id);\n    } else {\n      guild = this.deleted.get(data.id) ?? null;\n    }\n\n    return { guild };\n  }\n\n  scheduleForDeletion(id) {\n    setTimeout(() => this.deleted.delete(id), this.client.options.restWsBridgeTimeout).unref();\n  }\n}\n\nmodule.exports = GuildDeleteAction;\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,sBAAD,CAA1B;;AAEA,MAAME,iBAAN,SAAgCH,MAAhC,CAAuC;EACrCI,WAAW,CAACC,MAAD,EAAS;IAClB,MAAMA,MAAN;IACA,KAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;EACD;;EAEDC,MAAM,CAACC,IAAD,EAAO;IACX,MAAMJ,MAAM,GAAG,KAAKA,MAApB;IAEA,IAAIK,KAAK,GAAGL,MAAM,CAACM,MAAP,CAAcC,KAAd,CAAoBC,GAApB,CAAwBJ,IAAI,CAACK,EAA7B,CAAZ;;IACA,IAAIJ,KAAJ,EAAW;MACT,IAAID,IAAI,CAACM,WAAT,EAAsB;QACpB;QACAL,KAAK,CAACM,SAAN,GAAkB,KAAlB;QAEA;AACR;AACA;AACA;AACA;;QACQX,MAAM,CAACY,IAAP,CAAYf,MAAM,CAACgB,iBAAnB,EAAsCR,KAAtC,EAToB,CAWpB;QACA;;QACA,OAAO;UACLA,KAAK,EAAE;QADF,CAAP;MAGD;;MAED,KAAK,MAAMS,OAAX,IAAsBT,KAAK,CAACU,QAAN,CAAeR,KAAf,CAAqBS,MAArB,EAAtB,EAAqD,KAAKhB,MAAL,CAAYe,QAAZ,CAAqBE,OAArB,CAA6BH,OAAO,CAACL,EAArC;;MACrDT,MAAM,CAACkB,KAAP,CAAaC,QAAb,CAAsBX,GAAtB,CAA0BJ,IAAI,CAACK,EAA/B,GAAoCW,OAApC,GApBS,CAsBT;;MACApB,MAAM,CAACM,MAAP,CAAcC,KAAd,CAAoBc,MAApB,CAA2BhB,KAAK,CAACI,EAAjC;MACAJ,KAAK,CAACJ,OAAN,GAAgB,IAAhB;MAEA;AACN;AACA;AACA;AACA;;MACMD,MAAM,CAACY,IAAP,CAAYf,MAAM,CAACyB,YAAnB,EAAiCjB,KAAjC;MAEA,KAAKJ,OAAL,CAAasB,GAAb,CAAiBlB,KAAK,CAACI,EAAvB,EAA2BJ,KAA3B;MACA,KAAKmB,mBAAL,CAAyBnB,KAAK,CAACI,EAA/B;IACD,CAnCD,MAmCO;MACLJ,KAAK,GAAG,KAAKJ,OAAL,CAAaO,GAAb,CAAiBJ,IAAI,CAACK,EAAtB,KAA6B,IAArC;IACD;;IAED,OAAO;MAAEJ;IAAF,CAAP;EACD;;EAEDmB,mBAAmB,CAACf,EAAD,EAAK;IACtBgB,UAAU,CAAC,MAAM,KAAKxB,OAAL,CAAaoB,MAAb,CAAoBZ,EAApB,CAAP,EAAgC,KAAKT,MAAL,CAAY0B,OAAZ,CAAoBC,mBAApD,CAAV,CAAmFC,KAAnF;EACD;;AAtDoC;;AAyDvCC,MAAM,CAACC,OAAP,GAAiBhC,iBAAjB"},"metadata":{},"sourceType":"script"}