{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DatePredicate = void 0;\n\nconst predicate_1 = require(\"./predicate\");\n\nclass DatePredicate extends predicate_1.Predicate {\n  /**\n  @hidden\n  */\n  constructor(options) {\n    super('date', options);\n  }\n  /**\n  Test a date to be before another date.\n   @param date - Maximum value.\n  */\n\n\n  before(date) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} ${value.toISOString()} to be before ${date.toISOString()}`,\n      validator: value => value.getTime() < date.getTime()\n    });\n  }\n  /**\n  Test a date to be before another date.\n   @param date - Minimum value.\n  */\n\n\n  after(date) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} ${value.toISOString()} to be after ${date.toISOString()}`,\n      validator: value => value.getTime() > date.getTime()\n    });\n  }\n\n}\n\nexports.DatePredicate = DatePredicate;","map":{"version":3,"names":["Object","defineProperty","exports","value","DatePredicate","predicate_1","require","Predicate","constructor","options","before","date","addValidator","message","label","toISOString","validator","getTime","after"],"sources":["C:/Users/ROUSER6/node_modules/ow/dist/predicates/date.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DatePredicate = void 0;\nconst predicate_1 = require(\"./predicate\");\nclass DatePredicate extends predicate_1.Predicate {\n    /**\n    @hidden\n    */\n    constructor(options) {\n        super('date', options);\n    }\n    /**\n    Test a date to be before another date.\n\n    @param date - Maximum value.\n    */\n    before(date) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} ${value.toISOString()} to be before ${date.toISOString()}`,\n            validator: value => value.getTime() < date.getTime()\n        });\n    }\n    /**\n    Test a date to be before another date.\n\n    @param date - Minimum value.\n    */\n    after(date) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} ${value.toISOString()} to be after ${date.toISOString()}`,\n            validator: value => value.getTime() > date.getTime()\n        });\n    }\n}\nexports.DatePredicate = DatePredicate;\n"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,aAAR,GAAwB,KAAK,CAA7B;;AACA,MAAMC,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMF,aAAN,SAA4BC,WAAW,CAACE,SAAxC,CAAkD;EAC9C;AACJ;AACA;EACIC,WAAW,CAACC,OAAD,EAAU;IACjB,MAAM,MAAN,EAAcA,OAAd;EACH;EACD;AACJ;AACA;AACA;;;EAEIC,MAAM,CAACC,IAAD,EAAO;IACT,OAAO,KAAKC,YAAL,CAAkB;MACrBC,OAAO,EAAE,CAACV,KAAD,EAAQW,KAAR,KAAmB,YAAWA,KAAM,IAAGX,KAAK,CAACY,WAAN,EAAoB,iBAAgBJ,IAAI,CAACI,WAAL,EAAmB,EADlF;MAErBC,SAAS,EAAEb,KAAK,IAAIA,KAAK,CAACc,OAAN,KAAkBN,IAAI,CAACM,OAAL;IAFjB,CAAlB,CAAP;EAIH;EACD;AACJ;AACA;AACA;;;EAEIC,KAAK,CAACP,IAAD,EAAO;IACR,OAAO,KAAKC,YAAL,CAAkB;MACrBC,OAAO,EAAE,CAACV,KAAD,EAAQW,KAAR,KAAmB,YAAWA,KAAM,IAAGX,KAAK,CAACY,WAAN,EAAoB,gBAAeJ,IAAI,CAACI,WAAL,EAAmB,EADjF;MAErBC,SAAS,EAAEb,KAAK,IAAIA,KAAK,CAACc,OAAN,KAAkBN,IAAI,CAACM,OAAL;IAFjB,CAAlB,CAAP;EAIH;;AA5B6C;;AA8BlDf,OAAO,CAACE,aAAR,GAAwBA,aAAxB"},"metadata":{},"sourceType":"script"}