{"ast":null,"code":"'use strict';\n\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\n/**\n * Represents a guild stage channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n */\n\n\nclass StageChannel extends BaseGuildVoiceChannel {\n  _patch(data) {\n    super._patch(data);\n\n    if ('topic' in data) {\n      /**\n       * The topic of the stage channel\n       * @type {?string}\n       */\n      this.topic = data.topic;\n    }\n  }\n  /**\n   * The stage instance of this stage channel, if it exists\n   * @type {?StageInstance}\n   * @readonly\n   */\n\n\n  get stageInstance() {\n    return this.guild.stageInstances.cache.find(stageInstance => stageInstance.channelId === this.id) ?? null;\n  }\n  /**\n   * Creates a stage instance associated to this stage channel.\n   * @param {StageInstanceCreateOptions} options The options to create the stage instance\n   * @returns {Promise<StageInstance>}\n   */\n\n\n  createStageInstance(options) {\n    return this.guild.stageInstances.create(this.id, options);\n  }\n  /**\n   * Sets a new topic for the guild channel.\n   * @param {?string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel topic\n   * channel.setTopic('needs more rate limiting')\n   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n   *   .catch(console.error);\n   */\n\n\n  setTopic(topic, reason) {\n    return this.edit({\n      topic\n    }, reason);\n  }\n  /**\n   * Sets the RTC region of the channel.\n   * @name StageChannel#setRTCRegion\n   * @param {?string} region The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @returns {Promise<StageChannel>}\n   * @example\n   * // Set the RTC region to europe\n   * stageChannel.setRTCRegion('europe');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * stageChannel.setRTCRegion(null);\n   */\n\n\n}\n\nmodule.exports = StageChannel;","map":{"version":3,"names":["BaseGuildVoiceChannel","require","StageChannel","_patch","data","topic","stageInstance","guild","stageInstances","cache","find","channelId","id","createStageInstance","options","create","setTopic","reason","edit","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/StageChannel.js"],"sourcesContent":["'use strict';\n\nconst BaseGuildVoiceChannel = require('./BaseGuildVoiceChannel');\n\n/**\n * Represents a guild stage channel on Discord.\n * @extends {BaseGuildVoiceChannel}\n */\nclass StageChannel extends BaseGuildVoiceChannel {\n  _patch(data) {\n    super._patch(data);\n\n    if ('topic' in data) {\n      /**\n       * The topic of the stage channel\n       * @type {?string}\n       */\n      this.topic = data.topic;\n    }\n  }\n\n  /**\n   * The stage instance of this stage channel, if it exists\n   * @type {?StageInstance}\n   * @readonly\n   */\n  get stageInstance() {\n    return this.guild.stageInstances.cache.find(stageInstance => stageInstance.channelId === this.id) ?? null;\n  }\n\n  /**\n   * Creates a stage instance associated to this stage channel.\n   * @param {StageInstanceCreateOptions} options The options to create the stage instance\n   * @returns {Promise<StageInstance>}\n   */\n  createStageInstance(options) {\n    return this.guild.stageInstances.create(this.id, options);\n  }\n\n  /**\n   * Sets a new topic for the guild channel.\n   * @param {?string} topic The new topic for the guild channel\n   * @param {string} [reason] Reason for changing the guild channel's topic\n   * @returns {Promise<GuildChannel>}\n   * @example\n   * // Set a new channel topic\n   * channel.setTopic('needs more rate limiting')\n   *   .then(newChannel => console.log(`Channel's new topic is ${newChannel.topic}`))\n   *   .catch(console.error);\n   */\n  setTopic(topic, reason) {\n    return this.edit({ topic }, reason);\n  }\n\n  /**\n   * Sets the RTC region of the channel.\n   * @name StageChannel#setRTCRegion\n   * @param {?string} region The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @returns {Promise<StageChannel>}\n   * @example\n   * // Set the RTC region to europe\n   * stageChannel.setRTCRegion('europe');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * stageChannel.setRTCRegion(null);\n   */\n}\n\nmodule.exports = StageChannel;\n"],"mappings":"AAAA;;AAEA,MAAMA,qBAAqB,GAAGC,OAAO,CAAC,yBAAD,CAArC;AAEA;AACA;AACA;AACA;;;AACA,MAAMC,YAAN,SAA2BF,qBAA3B,CAAiD;EAC/CG,MAAM,CAACC,IAAD,EAAO;IACX,MAAMD,MAAN,CAAaC,IAAb;;IAEA,IAAI,WAAWA,IAAf,EAAqB;MACnB;AACN;AACA;AACA;MACM,KAAKC,KAAL,GAAaD,IAAI,CAACC,KAAlB;IACD;EACF;EAED;AACF;AACA;AACA;AACA;;;EACmB,IAAbC,aAAa,GAAG;IAClB,OAAO,KAAKC,KAAL,CAAWC,cAAX,CAA0BC,KAA1B,CAAgCC,IAAhC,CAAqCJ,aAAa,IAAIA,aAAa,CAACK,SAAd,KAA4B,KAAKC,EAAvF,KAA8F,IAArG;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEC,mBAAmB,CAACC,OAAD,EAAU;IAC3B,OAAO,KAAKP,KAAL,CAAWC,cAAX,CAA0BO,MAA1B,CAAiC,KAAKH,EAAtC,EAA0CE,OAA1C,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEE,QAAQ,CAACX,KAAD,EAAQY,MAAR,EAAgB;IACtB,OAAO,KAAKC,IAAL,CAAU;MAAEb;IAAF,CAAV,EAAqBY,MAArB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAzDiD;;AA4DjDE,MAAM,CAACC,OAAP,GAAiBlB,YAAjB"},"metadata":{},"sourceType":"script"}