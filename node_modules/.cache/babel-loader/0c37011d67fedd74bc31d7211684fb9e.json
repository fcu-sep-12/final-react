{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst Role = require('./Role');\n\nconst {\n  TypeError\n} = require('../errors');\n\nconst {\n  OverwriteTypes\n} = require('../util/Constants');\n\nconst Permissions = require('../util/Permissions');\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n * @extends {Base}\n */\n\n\nclass PermissionOverwrites extends Base {\n  constructor(client, data, channel) {\n    super(client);\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'channel', {\n      value: channel\n    });\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The overwrite's id, either a {@link User} or a {@link Role} id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n    /**\n     * The type of this overwrite\n     * @type {OverwriteType}\n     */\n\n    this.type = typeof data.type === 'number' ? OverwriteTypes[data.type] : data.type;\n    /**\n     * The permissions that are denied for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n\n    this.deny = new Permissions(BigInt(data.deny)).freeze();\n    /**\n     * The permissions that are allowed for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n\n    this.allow = new Permissions(BigInt(data.allow)).freeze();\n  }\n  /**\n   * Edits this Permission Overwrite.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   * @example\n   * // Update permission overwrites\n   * permissionOverwrites.edit({\n   *   SEND_MESSAGES: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n\n\n  async edit(options, reason) {\n    await this.channel.permissionOverwrites.upsert(this.id, options, {\n      type: OverwriteTypes[this.type],\n      reason\n    }, this);\n    return this;\n  }\n  /**\n   * Deletes this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n\n\n  async delete(reason) {\n    await this.channel.permissionOverwrites.delete(this.id, reason);\n    return this;\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      type: OverwriteTypes[this.type],\n      allow: this.allow,\n      deny: this.deny\n    };\n  }\n  /**\n   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n   * ```js\n   * {\n   *  'SEND_MESSAGES': true,\n   *  'EMBED_LINKS': null,\n   *  'ATTACH_FILES': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * @typedef {Object} ResolvedOverwriteOptions\n   * @property {Permissions} allow The allowed permissions\n   * @property {Permissions} deny The denied permissions\n   */\n\n  /**\n   * Resolves bitfield permissions overwrites from an object.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {ResolvedOverwriteOptions} initialPermissions The initial permissions\n   * @returns {ResolvedOverwriteOptions}\n   */\n\n\n  static resolveOverwriteOptions(options) {\n    let {\n      allow,\n      deny\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    allow = new Permissions(allow);\n    deny = new Permissions(deny);\n\n    for (const [perm, value] of Object.entries(options)) {\n      if (value === true) {\n        allow.add(perm);\n        deny.remove(perm);\n      } else if (value === false) {\n        allow.remove(perm);\n        deny.add(perm);\n      } else if (value === null) {\n        allow.remove(perm);\n        deny.remove(perm);\n      }\n    }\n\n    return {\n      allow,\n      deny\n    };\n  }\n  /**\n   * The raw data for a permission overwrite\n   * @typedef {Object} RawOverwriteData\n   * @property {Snowflake} id The id of the {@link Role} or {@link User} this overwrite belongs to\n   * @property {string} allow The permissions to allow\n   * @property {string} deny The permissions to deny\n   * @property {number} type The type of this OverwriteData\n   */\n\n  /**\n   * Data that can be resolved into {@link RawOverwriteData}. This can be:\n   * * PermissionOverwrites\n   * * OverwriteData\n   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable\n   */\n\n  /**\n   * Data that can be used for a permission overwrite\n   * @typedef {Object} OverwriteData\n   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   * @property {OverwriteType} [type] The type of this OverwriteData\n   */\n\n  /**\n   * Resolves an overwrite into {@link RawOverwriteData}.\n   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve\n   * @param {Guild} [guild] The guild to resolve from\n   * @returns {RawOverwriteData}\n   */\n\n\n  static resolve(overwrite, guild) {\n    if (overwrite instanceof this) return overwrite.toJSON();\n\n    if (typeof overwrite.id === 'string' && overwrite.type in OverwriteTypes) {\n      return {\n        id: overwrite.id,\n        type: OverwriteTypes[overwrite.type],\n        allow: Permissions.resolve(overwrite.allow ?? Permissions.defaultBit).toString(),\n        deny: Permissions.resolve(overwrite.deny ?? Permissions.defaultBit).toString()\n      };\n    }\n\n    const userOrRole = guild.roles.resolve(overwrite.id) ?? guild.client.users.resolve(overwrite.id);\n    if (!userOrRole) throw new TypeError('INVALID_TYPE', 'parameter', 'User nor a Role');\n    const type = userOrRole instanceof Role ? OverwriteTypes.role : OverwriteTypes.member;\n    return {\n      id: userOrRole.id,\n      type,\n      allow: Permissions.resolve(overwrite.allow ?? Permissions.defaultBit).toString(),\n      deny: Permissions.resolve(overwrite.deny ?? Permissions.defaultBit).toString()\n    };\n  }\n\n}\n\nmodule.exports = PermissionOverwrites;","map":{"version":3,"names":["Base","require","Role","TypeError","OverwriteTypes","Permissions","PermissionOverwrites","constructor","client","data","channel","Object","defineProperty","value","_patch","id","type","deny","BigInt","freeze","allow","edit","options","reason","permissionOverwrites","upsert","delete","toJSON","resolveOverwriteOptions","perm","entries","add","remove","resolve","overwrite","guild","defaultBit","toString","userOrRole","roles","users","role","member","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/PermissionOverwrites.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst Role = require('./Role');\nconst { TypeError } = require('../errors');\nconst { OverwriteTypes } = require('../util/Constants');\nconst Permissions = require('../util/Permissions');\n\n/**\n * Represents a permission overwrite for a role or member in a guild channel.\n * @extends {Base}\n */\nclass PermissionOverwrites extends Base {\n  constructor(client, data, channel) {\n    super(client);\n\n    /**\n     * The GuildChannel this overwrite is for\n     * @name PermissionOverwrites#channel\n     * @type {GuildChannel}\n     * @readonly\n     */\n    Object.defineProperty(this, 'channel', { value: channel });\n\n    if (data) this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * The overwrite's id, either a {@link User} or a {@link Role} id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The type of this overwrite\n     * @type {OverwriteType}\n     */\n    this.type = typeof data.type === 'number' ? OverwriteTypes[data.type] : data.type;\n\n    /**\n     * The permissions that are denied for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n    this.deny = new Permissions(BigInt(data.deny)).freeze();\n\n    /**\n     * The permissions that are allowed for the user or role.\n     * @type {Readonly<Permissions>}\n     */\n    this.allow = new Permissions(BigInt(data.allow)).freeze();\n  }\n\n  /**\n   * Edits this Permission Overwrite.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {string} [reason] Reason for creating/editing this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   * @example\n   * // Update permission overwrites\n   * permissionOverwrites.edit({\n   *   SEND_MESSAGES: false\n   * })\n   *   .then(channel => console.log(channel.permissionOverwrites.get(message.author.id)))\n   *   .catch(console.error);\n   */\n  async edit(options, reason) {\n    await this.channel.permissionOverwrites.upsert(this.id, options, { type: OverwriteTypes[this.type], reason }, this);\n    return this;\n  }\n\n  /**\n   * Deletes this Permission Overwrite.\n   * @param {string} [reason] Reason for deleting this overwrite\n   * @returns {Promise<PermissionOverwrites>}\n   */\n  async delete(reason) {\n    await this.channel.permissionOverwrites.delete(this.id, reason);\n    return this;\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      type: OverwriteTypes[this.type],\n      allow: this.allow,\n      deny: this.deny,\n    };\n  }\n\n  /**\n   * An object mapping permission flags to `true` (enabled), `null` (unset) or `false` (disabled).\n   * ```js\n   * {\n   *  'SEND_MESSAGES': true,\n   *  'EMBED_LINKS': null,\n   *  'ATTACH_FILES': false,\n   * }\n   * ```\n   * @typedef {Object} PermissionOverwriteOptions\n   */\n\n  /**\n   * @typedef {Object} ResolvedOverwriteOptions\n   * @property {Permissions} allow The allowed permissions\n   * @property {Permissions} deny The denied permissions\n   */\n\n  /**\n   * Resolves bitfield permissions overwrites from an object.\n   * @param {PermissionOverwriteOptions} options The options for the update\n   * @param {ResolvedOverwriteOptions} initialPermissions The initial permissions\n   * @returns {ResolvedOverwriteOptions}\n   */\n  static resolveOverwriteOptions(options, { allow, deny } = {}) {\n    allow = new Permissions(allow);\n    deny = new Permissions(deny);\n\n    for (const [perm, value] of Object.entries(options)) {\n      if (value === true) {\n        allow.add(perm);\n        deny.remove(perm);\n      } else if (value === false) {\n        allow.remove(perm);\n        deny.add(perm);\n      } else if (value === null) {\n        allow.remove(perm);\n        deny.remove(perm);\n      }\n    }\n\n    return { allow, deny };\n  }\n\n  /**\n   * The raw data for a permission overwrite\n   * @typedef {Object} RawOverwriteData\n   * @property {Snowflake} id The id of the {@link Role} or {@link User} this overwrite belongs to\n   * @property {string} allow The permissions to allow\n   * @property {string} deny The permissions to deny\n   * @property {number} type The type of this OverwriteData\n   */\n\n  /**\n   * Data that can be resolved into {@link RawOverwriteData}. This can be:\n   * * PermissionOverwrites\n   * * OverwriteData\n   * @typedef {PermissionOverwrites|OverwriteData} OverwriteResolvable\n   */\n\n  /**\n   * Data that can be used for a permission overwrite\n   * @typedef {Object} OverwriteData\n   * @property {GuildMemberResolvable|RoleResolvable} id Member or role this overwrite is for\n   * @property {PermissionResolvable} [allow] The permissions to allow\n   * @property {PermissionResolvable} [deny] The permissions to deny\n   * @property {OverwriteType} [type] The type of this OverwriteData\n   */\n\n  /**\n   * Resolves an overwrite into {@link RawOverwriteData}.\n   * @param {OverwriteResolvable} overwrite The overwrite-like data to resolve\n   * @param {Guild} [guild] The guild to resolve from\n   * @returns {RawOverwriteData}\n   */\n  static resolve(overwrite, guild) {\n    if (overwrite instanceof this) return overwrite.toJSON();\n    if (typeof overwrite.id === 'string' && overwrite.type in OverwriteTypes) {\n      return {\n        id: overwrite.id,\n        type: OverwriteTypes[overwrite.type],\n        allow: Permissions.resolve(overwrite.allow ?? Permissions.defaultBit).toString(),\n        deny: Permissions.resolve(overwrite.deny ?? Permissions.defaultBit).toString(),\n      };\n    }\n\n    const userOrRole = guild.roles.resolve(overwrite.id) ?? guild.client.users.resolve(overwrite.id);\n    if (!userOrRole) throw new TypeError('INVALID_TYPE', 'parameter', 'User nor a Role');\n    const type = userOrRole instanceof Role ? OverwriteTypes.role : OverwriteTypes.member;\n\n    return {\n      id: userOrRole.id,\n      type,\n      allow: Permissions.resolve(overwrite.allow ?? Permissions.defaultBit).toString(),\n      deny: Permissions.resolve(overwrite.deny ?? Permissions.defaultBit).toString(),\n    };\n  }\n}\n\nmodule.exports = PermissionOverwrites;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}