{"ast":null,"code":"'use strict';\n\nconst BaseCommandInteraction = require('./BaseCommandInteraction');\n\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\n\nconst {\n  ApplicationCommandOptionTypes,\n  ApplicationCommandTypes\n} = require('../util/Constants');\n/**\n * Represents a context menu interaction.\n * @extends {BaseCommandInteraction}\n */\n\n\nclass ContextMenuInteraction extends BaseCommandInteraction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The target of the interaction, parsed into options\n     * @type {CommandInteractionOptionResolver}\n     */\n\n    this.options = new CommandInteractionOptionResolver(this.client, this.resolveContextMenuOptions(data.data), this.transformResolved(data.data.resolved));\n    /**\n     * The id of the target of the interaction\n     * @type {Snowflake}\n     */\n\n    this.targetId = data.data.target_id;\n    /**\n     * The type of the target of the interaction; either USER or MESSAGE\n     * @type {ApplicationCommandType}\n     */\n\n    this.targetType = ApplicationCommandTypes[data.data.type];\n  }\n  /**\n   * Resolves and transforms options received from the API for a context menu interaction.\n   * @param {APIApplicationCommandInteractionData} data The interaction data\n   * @returns {CommandInteractionOption[]}\n   * @private\n   */\n\n\n  resolveContextMenuOptions(_ref) {\n    let {\n      target_id,\n      resolved\n    } = _ref;\n    const result = [];\n\n    if (resolved.users?.[target_id]) {\n      result.push(this.transformOption({\n        name: 'user',\n        type: ApplicationCommandOptionTypes.USER,\n        value: target_id\n      }, resolved));\n    }\n\n    if (resolved.messages?.[target_id]) {\n      result.push({\n        name: 'message',\n        type: '_MESSAGE',\n        value: target_id,\n        message: this.channel?.messages._add(resolved.messages[target_id]) ?? resolved.messages[target_id]\n      });\n    }\n\n    return result;\n  }\n\n}\n\nmodule.exports = ContextMenuInteraction;","map":{"version":3,"names":["BaseCommandInteraction","require","CommandInteractionOptionResolver","ApplicationCommandOptionTypes","ApplicationCommandTypes","ContextMenuInteraction","constructor","client","data","options","resolveContextMenuOptions","transformResolved","resolved","targetId","target_id","targetType","type","result","users","push","transformOption","name","USER","value","messages","message","channel","_add","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/ContextMenuInteraction.js"],"sourcesContent":["'use strict';\n\nconst BaseCommandInteraction = require('./BaseCommandInteraction');\nconst CommandInteractionOptionResolver = require('./CommandInteractionOptionResolver');\nconst { ApplicationCommandOptionTypes, ApplicationCommandTypes } = require('../util/Constants');\n\n/**\n * Represents a context menu interaction.\n * @extends {BaseCommandInteraction}\n */\nclass ContextMenuInteraction extends BaseCommandInteraction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The target of the interaction, parsed into options\n     * @type {CommandInteractionOptionResolver}\n     */\n    this.options = new CommandInteractionOptionResolver(\n      this.client,\n      this.resolveContextMenuOptions(data.data),\n      this.transformResolved(data.data.resolved),\n    );\n\n    /**\n     * The id of the target of the interaction\n     * @type {Snowflake}\n     */\n    this.targetId = data.data.target_id;\n\n    /**\n     * The type of the target of the interaction; either USER or MESSAGE\n     * @type {ApplicationCommandType}\n     */\n    this.targetType = ApplicationCommandTypes[data.data.type];\n  }\n\n  /**\n   * Resolves and transforms options received from the API for a context menu interaction.\n   * @param {APIApplicationCommandInteractionData} data The interaction data\n   * @returns {CommandInteractionOption[]}\n   * @private\n   */\n  resolveContextMenuOptions({ target_id, resolved }) {\n    const result = [];\n\n    if (resolved.users?.[target_id]) {\n      result.push(\n        this.transformOption({ name: 'user', type: ApplicationCommandOptionTypes.USER, value: target_id }, resolved),\n      );\n    }\n\n    if (resolved.messages?.[target_id]) {\n      result.push({\n        name: 'message',\n        type: '_MESSAGE',\n        value: target_id,\n        message: this.channel?.messages._add(resolved.messages[target_id]) ?? resolved.messages[target_id],\n      });\n    }\n\n    return result;\n  }\n}\n\nmodule.exports = ContextMenuInteraction;\n"],"mappings":"AAAA;;AAEA,MAAMA,sBAAsB,GAAGC,OAAO,CAAC,0BAAD,CAAtC;;AACA,MAAMC,gCAAgC,GAAGD,OAAO,CAAC,oCAAD,CAAhD;;AACA,MAAM;EAAEE,6BAAF;EAAiCC;AAAjC,IAA6DH,OAAO,CAAC,mBAAD,CAA1E;AAEA;AACA;AACA;AACA;;;AACA,MAAMI,sBAAN,SAAqCL,sBAArC,CAA4D;EAC1DM,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACxB,MAAMD,MAAN,EAAcC,IAAd;IACA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,IAAIP,gCAAJ,CACb,KAAKK,MADQ,EAEb,KAAKG,yBAAL,CAA+BF,IAAI,CAACA,IAApC,CAFa,EAGb,KAAKG,iBAAL,CAAuBH,IAAI,CAACA,IAAL,CAAUI,QAAjC,CAHa,CAAf;IAMA;AACJ;AACA;AACA;;IACI,KAAKC,QAAL,GAAgBL,IAAI,CAACA,IAAL,CAAUM,SAA1B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,UAAL,GAAkBX,uBAAuB,CAACI,IAAI,CAACA,IAAL,CAAUQ,IAAX,CAAzC;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEN,yBAAyB,OAA0B;IAAA,IAAzB;MAAEI,SAAF;MAAaF;IAAb,CAAyB;IACjD,MAAMK,MAAM,GAAG,EAAf;;IAEA,IAAIL,QAAQ,CAACM,KAAT,GAAiBJ,SAAjB,CAAJ,EAAiC;MAC/BG,MAAM,CAACE,IAAP,CACE,KAAKC,eAAL,CAAqB;QAAEC,IAAI,EAAE,MAAR;QAAgBL,IAAI,EAAEb,6BAA6B,CAACmB,IAApD;QAA0DC,KAAK,EAAET;MAAjE,CAArB,EAAmGF,QAAnG,CADF;IAGD;;IAED,IAAIA,QAAQ,CAACY,QAAT,GAAoBV,SAApB,CAAJ,EAAoC;MAClCG,MAAM,CAACE,IAAP,CAAY;QACVE,IAAI,EAAE,SADI;QAEVL,IAAI,EAAE,UAFI;QAGVO,KAAK,EAAET,SAHG;QAIVW,OAAO,EAAE,KAAKC,OAAL,EAAcF,QAAd,CAAuBG,IAAvB,CAA4Bf,QAAQ,CAACY,QAAT,CAAkBV,SAAlB,CAA5B,KAA6DF,QAAQ,CAACY,QAAT,CAAkBV,SAAlB;MAJ5D,CAAZ;IAMD;;IAED,OAAOG,MAAP;EACD;;AAnDyD;;AAsD5DW,MAAM,CAACC,OAAP,GAAiBxB,sBAAjB"},"metadata":{},"sourceType":"script"}