{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst DataManager = require('./DataManager');\n\nconst {\n  TypeError\n} = require('../errors');\n\nconst Role = require('../structures/Role');\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n * @extends {DataManager}\n */\n\n\nclass GuildEmojiRoleManager extends DataManager {\n  constructor(emoji) {\n    super(emoji.client, Role);\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n\n    this.guild = emoji.guild;\n  }\n  /**\n   * The cache of roles belonging to this emoji\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n\n\n  get cache() {\n    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));\n  }\n  /**\n   * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @returns {Promise<GuildEmoji>}\n   */\n\n\n  add(roleOrRoles) {\n    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];\n    const resolvedRoles = [];\n\n    for (const role of roleOrRoles.values()) {\n      const resolvedRole = this.guild.roles.resolveId(role);\n\n      if (!resolvedRole) {\n        return Promise.reject(new TypeError('INVALID_ELEMENT', 'Array or Collection', 'roles', role));\n      }\n\n      resolvedRoles.push(resolvedRole);\n    }\n\n    const newRoles = [...new Set(resolvedRoles.concat(...this.cache.values()))];\n    return this.set(newRoles);\n  }\n  /**\n   * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @returns {Promise<GuildEmoji>}\n   */\n\n\n  remove(roleOrRoles) {\n    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];\n    const resolvedRoleIds = [];\n\n    for (const role of roleOrRoles.values()) {\n      const roleId = this.guild.roles.resolveId(role);\n\n      if (!roleId) {\n        return Promise.reject(new TypeError('INVALID_ELEMENT', 'Array or Collection', 'roles', role));\n      }\n\n      resolvedRoleIds.push(roleId);\n    }\n\n    const newRoles = [...this.cache.keys()].filter(id => !resolvedRoleIds.includes(id));\n    return this.set(newRoles);\n  }\n  /**\n   * Sets the role(s) that can use this emoji.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role ids to apply\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Set the emoji's roles to a single role\n   * guildEmoji.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all roles from an emoji\n   * guildEmoji.roles.set([])\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n\n\n  set(roles) {\n    return this.emoji.edit({\n      roles\n    });\n  }\n\n  clone() {\n    const clone = new this.constructor(this.emoji);\n\n    clone._patch([...this.cache.keys()]);\n\n    return clone;\n  }\n  /**\n   * Patches the roles for this manager's cache\n   * @param {Snowflake[]} roles The new roles\n   * @private\n   */\n\n\n  _patch(roles) {\n    this.emoji._roles = roles;\n  }\n\n  valueOf() {\n    return this.cache;\n  }\n\n}\n\nmodule.exports = GuildEmojiRoleManager;","map":{"version":3,"names":["Collection","require","DataManager","TypeError","Role","GuildEmojiRoleManager","constructor","emoji","client","guild","cache","roles","filter","role","_roles","includes","id","add","roleOrRoles","Array","isArray","resolvedRoles","values","resolvedRole","resolveId","Promise","reject","push","newRoles","Set","concat","set","remove","resolvedRoleIds","roleId","keys","edit","clone","_patch","valueOf","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/GuildEmojiRoleManager.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst DataManager = require('./DataManager');\nconst { TypeError } = require('../errors');\nconst Role = require('../structures/Role');\n\n/**\n * Manages API methods for roles belonging to emojis and stores their cache.\n * @extends {DataManager}\n */\nclass GuildEmojiRoleManager extends DataManager {\n  constructor(emoji) {\n    super(emoji.client, Role);\n\n    /**\n     * The emoji belonging to this manager\n     * @type {GuildEmoji}\n     */\n    this.emoji = emoji;\n    /**\n     * The guild belonging to this manager\n     * @type {Guild}\n     */\n    this.guild = emoji.guild;\n  }\n\n  /**\n   * The cache of roles belonging to this emoji\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get cache() {\n    return this.guild.roles.cache.filter(role => this.emoji._roles.includes(role.id));\n  }\n\n  /**\n   * Adds a role (or multiple roles) to the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to add\n   * @returns {Promise<GuildEmoji>}\n   */\n  add(roleOrRoles) {\n    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];\n\n    const resolvedRoles = [];\n    for (const role of roleOrRoles.values()) {\n      const resolvedRole = this.guild.roles.resolveId(role);\n      if (!resolvedRole) {\n        return Promise.reject(new TypeError('INVALID_ELEMENT', 'Array or Collection', 'roles', role));\n      }\n      resolvedRoles.push(resolvedRole);\n    }\n\n    const newRoles = [...new Set(resolvedRoles.concat(...this.cache.values()))];\n    return this.set(newRoles);\n  }\n\n  /**\n   * Removes a role (or multiple roles) from the list of roles that can use this emoji.\n   * @param {RoleResolvable|RoleResolvable[]|Collection<Snowflake, Role>} roleOrRoles The role or roles to remove\n   * @returns {Promise<GuildEmoji>}\n   */\n  remove(roleOrRoles) {\n    if (!Array.isArray(roleOrRoles) && !(roleOrRoles instanceof Collection)) roleOrRoles = [roleOrRoles];\n\n    const resolvedRoleIds = [];\n    for (const role of roleOrRoles.values()) {\n      const roleId = this.guild.roles.resolveId(role);\n      if (!roleId) {\n        return Promise.reject(new TypeError('INVALID_ELEMENT', 'Array or Collection', 'roles', role));\n      }\n      resolvedRoleIds.push(roleId);\n    }\n\n    const newRoles = [...this.cache.keys()].filter(id => !resolvedRoleIds.includes(id));\n    return this.set(newRoles);\n  }\n\n  /**\n   * Sets the role(s) that can use this emoji.\n   * @param {Collection<Snowflake, Role>|RoleResolvable[]} roles The roles or role ids to apply\n   * @returns {Promise<GuildEmoji>}\n   * @example\n   * // Set the emoji's roles to a single role\n   * guildEmoji.roles.set(['391156570408615936'])\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Remove all roles from an emoji\n   * guildEmoji.roles.set([])\n   *    .then(console.log)\n   *    .catch(console.error);\n   */\n  set(roles) {\n    return this.emoji.edit({ roles });\n  }\n\n  clone() {\n    const clone = new this.constructor(this.emoji);\n    clone._patch([...this.cache.keys()]);\n    return clone;\n  }\n\n  /**\n   * Patches the roles for this manager's cache\n   * @param {Snowflake[]} roles The new roles\n   * @private\n   */\n  _patch(roles) {\n    this.emoji._roles = roles;\n  }\n\n  valueOf() {\n    return this.cache;\n  }\n}\n\nmodule.exports = GuildEmojiRoleManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}