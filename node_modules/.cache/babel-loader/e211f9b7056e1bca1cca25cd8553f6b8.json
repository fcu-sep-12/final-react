{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst CachedManager = require('./CachedManager');\n\nconst {\n  Error\n} = require('../errors');\n\nconst User = require('../structures/User');\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {CachedManager}\n */\n\n\nclass ReactionUserManager extends CachedManager {\n  constructor(reaction, iterable) {\n    super(reaction.client, User, iterable);\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n\n    this.reaction = reaction;\n  }\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Options used to fetch users who gave a reaction.\n   * @typedef {Object} FetchReactionUsersOptions\n   * @property {number} [limit=100] The maximum amount of users to fetch, defaults to `100`\n   * @property {Snowflake} [after] Limit fetching users to those with an id greater than the supplied id\n   */\n\n  /**\n   * Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their ids.\n   * @param {FetchReactionUsersOptions} [options] Options for fetching the users\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n\n\n  async fetch() {\n    let {\n      limit = 100,\n      after\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const message = this.reaction.message;\n    const data = await this.client.api.channels[message.channelId].messages[message.id].reactions[this.reaction.emoji.identifier].get({\n      query: {\n        limit,\n        after\n      }\n    });\n    const users = new Collection();\n\n    for (const rawUser of data) {\n      const user = this.client.users._add(rawUser);\n\n      this.cache.set(user.id, user);\n      users.set(user.id, user);\n    }\n\n    return users;\n  }\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n\n\n  async remove() {\n    let user = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.client.user;\n    const userId = this.client.users.resolveId(user);\n    if (!userId) throw new Error('REACTION_RESOLVE_USER');\n    const message = this.reaction.message;\n    await this.client.api.channels[message.channelId].messages[message.id].reactions[this.reaction.emoji.identifier][userId === this.client.user.id ? '@me' : userId].delete();\n    return this.reaction;\n  }\n\n}\n\nmodule.exports = ReactionUserManager;","map":{"version":3,"names":["Collection","require","CachedManager","Error","User","ReactionUserManager","constructor","reaction","iterable","client","fetch","limit","after","message","data","api","channels","channelId","messages","id","reactions","emoji","identifier","get","query","users","rawUser","user","_add","cache","set","remove","userId","resolveId","delete","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/ReactionUserManager.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst CachedManager = require('./CachedManager');\nconst { Error } = require('../errors');\nconst User = require('../structures/User');\n\n/**\n * Manages API methods for users who reacted to a reaction and stores their cache.\n * @extends {CachedManager}\n */\nclass ReactionUserManager extends CachedManager {\n  constructor(reaction, iterable) {\n    super(reaction.client, User, iterable);\n\n    /**\n     * The reaction that this manager belongs to\n     * @type {MessageReaction}\n     */\n    this.reaction = reaction;\n  }\n\n  /**\n   * The cache of this manager\n   * @type {Collection<Snowflake, User>}\n   * @name ReactionUserManager#cache\n   */\n\n  /**\n   * Options used to fetch users who gave a reaction.\n   * @typedef {Object} FetchReactionUsersOptions\n   * @property {number} [limit=100] The maximum amount of users to fetch, defaults to `100`\n   * @property {Snowflake} [after] Limit fetching users to those with an id greater than the supplied id\n   */\n\n  /**\n   * Fetches all the users that gave this reaction. Resolves with a collection of users, mapped by their ids.\n   * @param {FetchReactionUsersOptions} [options] Options for fetching the users\n   * @returns {Promise<Collection<Snowflake, User>>}\n   */\n  async fetch({ limit = 100, after } = {}) {\n    const message = this.reaction.message;\n    const data = await this.client.api.channels[message.channelId].messages[message.id].reactions[\n      this.reaction.emoji.identifier\n    ].get({ query: { limit, after } });\n    const users = new Collection();\n    for (const rawUser of data) {\n      const user = this.client.users._add(rawUser);\n      this.cache.set(user.id, user);\n      users.set(user.id, user);\n    }\n    return users;\n  }\n\n  /**\n   * Removes a user from this reaction.\n   * @param {UserResolvable} [user=this.client.user] The user to remove the reaction of\n   * @returns {Promise<MessageReaction>}\n   */\n  async remove(user = this.client.user) {\n    const userId = this.client.users.resolveId(user);\n    if (!userId) throw new Error('REACTION_RESOLVE_USER');\n    const message = this.reaction.message;\n    await this.client.api.channels[message.channelId].messages[message.id].reactions[this.reaction.emoji.identifier][\n      userId === this.client.user.id ? '@me' : userId\n    ].delete();\n    return this.reaction;\n  }\n}\n\nmodule.exports = ReactionUserManager;\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAiBC,OAAO,CAAC,uBAAD,CAA9B;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAM;EAAEE;AAAF,IAAYF,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMG,IAAI,GAAGH,OAAO,CAAC,oBAAD,CAApB;AAEA;AACA;AACA;AACA;;;AACA,MAAMI,mBAAN,SAAkCH,aAAlC,CAAgD;EAC9CI,WAAW,CAACC,QAAD,EAAWC,QAAX,EAAqB;IAC9B,MAAMD,QAAQ,CAACE,MAAf,EAAuBL,IAAvB,EAA6BI,QAA7B;IAEA;AACJ;AACA;AACA;;IACI,KAAKD,QAAL,GAAgBA,QAAhB;EACD;EAED;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;;EACa,MAALG,KAAK,GAA8B;IAAA,IAA7B;MAAEC,KAAK,GAAG,GAAV;MAAeC;IAAf,CAA6B,uEAAJ,EAAI;IACvC,MAAMC,OAAO,GAAG,KAAKN,QAAL,CAAcM,OAA9B;IACA,MAAMC,IAAI,GAAG,MAAM,KAAKL,MAAL,CAAYM,GAAZ,CAAgBC,QAAhB,CAAyBH,OAAO,CAACI,SAAjC,EAA4CC,QAA5C,CAAqDL,OAAO,CAACM,EAA7D,EAAiEC,SAAjE,CACjB,KAAKb,QAAL,CAAcc,KAAd,CAAoBC,UADH,EAEjBC,GAFiB,CAEb;MAAEC,KAAK,EAAE;QAAEb,KAAF;QAASC;MAAT;IAAT,CAFa,CAAnB;IAGA,MAAMa,KAAK,GAAG,IAAIzB,UAAJ,EAAd;;IACA,KAAK,MAAM0B,OAAX,IAAsBZ,IAAtB,EAA4B;MAC1B,MAAMa,IAAI,GAAG,KAAKlB,MAAL,CAAYgB,KAAZ,CAAkBG,IAAlB,CAAuBF,OAAvB,CAAb;;MACA,KAAKG,KAAL,CAAWC,GAAX,CAAeH,IAAI,CAACR,EAApB,EAAwBQ,IAAxB;MACAF,KAAK,CAACK,GAAN,CAAUH,IAAI,CAACR,EAAf,EAAmBQ,IAAnB;IACD;;IACD,OAAOF,KAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,MAANM,MAAM,GAA0B;IAAA,IAAzBJ,IAAyB,uEAAlB,KAAKlB,MAAL,CAAYkB,IAAM;IACpC,MAAMK,MAAM,GAAG,KAAKvB,MAAL,CAAYgB,KAAZ,CAAkBQ,SAAlB,CAA4BN,IAA5B,CAAf;IACA,IAAI,CAACK,MAAL,EAAa,MAAM,IAAI7B,KAAJ,CAAU,uBAAV,CAAN;IACb,MAAMU,OAAO,GAAG,KAAKN,QAAL,CAAcM,OAA9B;IACA,MAAM,KAAKJ,MAAL,CAAYM,GAAZ,CAAgBC,QAAhB,CAAyBH,OAAO,CAACI,SAAjC,EAA4CC,QAA5C,CAAqDL,OAAO,CAACM,EAA7D,EAAiEC,SAAjE,CAA2E,KAAKb,QAAL,CAAcc,KAAd,CAAoBC,UAA/F,EACJU,MAAM,KAAK,KAAKvB,MAAL,CAAYkB,IAAZ,CAAiBR,EAA5B,GAAiC,KAAjC,GAAyCa,MADrC,EAEJE,MAFI,EAAN;IAGA,OAAO,KAAK3B,QAAZ;EACD;;AAxD6C;;AA2DhD4B,MAAM,CAACC,OAAP,GAAiB/B,mBAAjB"},"metadata":{},"sourceType":"script"}