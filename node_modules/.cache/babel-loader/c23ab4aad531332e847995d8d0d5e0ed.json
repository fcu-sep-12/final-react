{"ast":null,"code":"'use strict';\n\nconst User = require('./User');\n\nconst DataResolver = require('../util/DataResolver');\n/**\n * Represents the logged in client's Discord user.\n * @extends {User}\n */\n\n\nclass ClientUser extends User {\n  _patch(data) {\n    super._patch(data);\n\n    if ('verified' in data) {\n      /**\n       * Whether or not this account has been verified\n       * @type {boolean}\n       */\n      this.verified = data.verified;\n    }\n\n    if ('mfa_enabled' in data) {\n      /**\n       * If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account\n       * @type {?boolean}\n       */\n      this.mfaEnabled = typeof data.mfa_enabled === 'boolean' ? data.mfa_enabled : null;\n    } else if (typeof this.mfaEnabled === 'undefined') {\n      this.mfaEnabled = null;\n    }\n\n    if (data.token) this.client.token = data.token;\n  }\n  /**\n   * ClientUser's presence\n   * @type {Presence}\n   * @readonly\n   */\n\n\n  get presence() {\n    return this.client.presence;\n  }\n  /**\n   * Data used to edit the logged in client\n   * @typdef {Object} ClientUserEditData\n   * @property {string} [username] The new username\n   * @property {BufferResolvable|Base64Resolvable} [avatar] The new avatar\n   */\n\n  /**\n   * Edits the logged in client.\n   * @param {ClientUserEditData} data The new data\n   */\n\n\n  async edit(data) {\n    const newData = await this.client.api.users('@me').patch({\n      data\n    });\n    this.client.token = newData.token;\n    const {\n      updated\n    } = this.client.actions.UserUpdate.handle(newData);\n    return updated ?? this;\n  }\n  /**\n   * Sets the username of the logged in client.\n   * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests\n   * every hour. Use this sparingly!</info>\n   * @param {string} username The new username\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set username\n   * client.user.setUsername('discordjs')\n   *   .then(user => console.log(`My new username is ${user.username}`))\n   *   .catch(console.error);\n   */\n\n\n  setUsername(username) {\n    return this.edit({\n      username\n    });\n  }\n  /**\n   * Sets the avatar of the logged in client.\n   * @param {BufferResolvable|Base64Resolvable} avatar The new avatar\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set avatar\n   * client.user.setAvatar('./avatar.png')\n   *   .then(user => console.log(`New avatar set!`))\n   *   .catch(console.error);\n   */\n\n\n  async setAvatar(avatar) {\n    return this.edit({\n      avatar: await DataResolver.resolveImage(avatar)\n    });\n  }\n  /**\n   * Options for setting activities\n   * @typedef {Object} ActivitiesOptions\n   * @property {string} [name] Name of the activity\n   * @property {ActivityType|number} [type] Type of the activity\n   * @property {string} [url] Twitch / YouTube stream URL\n   */\n\n  /**\n   * Data resembling a raw Discord presence.\n   * @typedef {Object} PresenceData\n   * @property {PresenceStatusData} [status] Status of the user\n   * @property {boolean} [afk] Whether the user is AFK\n   * @property {ActivitiesOptions[]} [activities] Activity the user is playing\n   * @property {number|number[]} [shardId] Shard id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the full presence of the client user.\n   * @param {PresenceData} data Data for the presence\n   * @returns {Presence}\n   * @example\n   * // Set the client user's presence\n   * client.user.setPresence({ activities: [{ name: 'with discord.js' }], status: 'idle' });\n   */\n\n\n  setPresence(data) {\n    return this.client.presence.set(data);\n  }\n  /**\n   * A user's status. Must be one of:\n   * * `online`\n   * * `idle`\n   * * `invisible`\n   * * `dnd` (do not disturb)\n   * @typedef {string} PresenceStatusData\n   */\n\n  /**\n   * Sets the status of the client user.\n   * @param {PresenceStatusData} status Status to change to\n   * @param {number|number[]} [shardId] Shard id(s) to have the activity set on\n   * @returns {Presence}\n   * @example\n   * // Set the client user's status\n   * client.user.setStatus('idle');\n   */\n\n\n  setStatus(status, shardId) {\n    return this.setPresence({\n      status,\n      shardId\n    });\n  }\n  /**\n   * Options for setting an activity.\n   * @typedef {Object} ActivityOptions\n   * @property {string} [name] Name of the activity\n   * @property {string} [url] Twitch / YouTube stream URL\n   * @property {ActivityType|number} [type] Type of the activity\n   * @property {number|number[]} [shardId] Shard Id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the activity the client user is playing.\n   * @param {string|ActivityOptions} [name] Activity being played, or options for setting the activity\n   * @param {ActivityOptions} [options] Options for setting the activity\n   * @returns {Presence}\n   * @example\n   * // Set the client user's activity\n   * client.user.setActivity('discord.js', { type: 'WATCHING' });\n   */\n\n\n  setActivity(name) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!name) return this.setPresence({\n      activities: [],\n      shardId: options.shardId\n    });\n    const activity = Object.assign({}, options, typeof name === 'object' ? name : {\n      name\n    });\n    return this.setPresence({\n      activities: [activity],\n      shardId: activity.shardId\n    });\n  }\n  /**\n   * Sets/removes the AFK flag for the client user.\n   * @param {boolean} afk Whether or not the user is AFK\n   * @param {number|number[]} [shardId] Shard Id(s) to have the AFK flag set on\n   * @returns {Presence}\n   */\n\n\n  setAFK(afk, shardId) {\n    return this.setPresence({\n      afk,\n      shardId\n    });\n  }\n\n}\n\nmodule.exports = ClientUser;","map":{"version":3,"names":["User","require","DataResolver","ClientUser","_patch","data","verified","mfaEnabled","mfa_enabled","token","client","presence","edit","newData","api","users","patch","updated","actions","UserUpdate","handle","setUsername","username","setAvatar","avatar","resolveImage","setPresence","set","setStatus","status","shardId","setActivity","name","options","activities","activity","Object","assign","setAFK","afk","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/ClientUser.js"],"sourcesContent":["'use strict';\n\nconst User = require('./User');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Represents the logged in client's Discord user.\n * @extends {User}\n */\nclass ClientUser extends User {\n  _patch(data) {\n    super._patch(data);\n\n    if ('verified' in data) {\n      /**\n       * Whether or not this account has been verified\n       * @type {boolean}\n       */\n      this.verified = data.verified;\n    }\n\n    if ('mfa_enabled' in data) {\n      /**\n       * If the bot's {@link ClientApplication#owner Owner} has MFA enabled on their account\n       * @type {?boolean}\n       */\n      this.mfaEnabled = typeof data.mfa_enabled === 'boolean' ? data.mfa_enabled : null;\n    } else if (typeof this.mfaEnabled === 'undefined') {\n      this.mfaEnabled = null;\n    }\n\n    if (data.token) this.client.token = data.token;\n  }\n\n  /**\n   * ClientUser's presence\n   * @type {Presence}\n   * @readonly\n   */\n  get presence() {\n    return this.client.presence;\n  }\n\n  /**\n   * Data used to edit the logged in client\n   * @typdef {Object} ClientUserEditData\n   * @property {string} [username] The new username\n   * @property {BufferResolvable|Base64Resolvable} [avatar] The new avatar\n   */\n\n  /**\n   * Edits the logged in client.\n   * @param {ClientUserEditData} data The new data\n   */\n  async edit(data) {\n    const newData = await this.client.api.users('@me').patch({ data });\n    this.client.token = newData.token;\n    const { updated } = this.client.actions.UserUpdate.handle(newData);\n    return updated ?? this;\n  }\n\n  /**\n   * Sets the username of the logged in client.\n   * <info>Changing usernames in Discord is heavily rate limited, with only 2 requests\n   * every hour. Use this sparingly!</info>\n   * @param {string} username The new username\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set username\n   * client.user.setUsername('discordjs')\n   *   .then(user => console.log(`My new username is ${user.username}`))\n   *   .catch(console.error);\n   */\n  setUsername(username) {\n    return this.edit({ username });\n  }\n\n  /**\n   * Sets the avatar of the logged in client.\n   * @param {BufferResolvable|Base64Resolvable} avatar The new avatar\n   * @returns {Promise<ClientUser>}\n   * @example\n   * // Set avatar\n   * client.user.setAvatar('./avatar.png')\n   *   .then(user => console.log(`New avatar set!`))\n   *   .catch(console.error);\n   */\n  async setAvatar(avatar) {\n    return this.edit({ avatar: await DataResolver.resolveImage(avatar) });\n  }\n\n  /**\n   * Options for setting activities\n   * @typedef {Object} ActivitiesOptions\n   * @property {string} [name] Name of the activity\n   * @property {ActivityType|number} [type] Type of the activity\n   * @property {string} [url] Twitch / YouTube stream URL\n   */\n\n  /**\n   * Data resembling a raw Discord presence.\n   * @typedef {Object} PresenceData\n   * @property {PresenceStatusData} [status] Status of the user\n   * @property {boolean} [afk] Whether the user is AFK\n   * @property {ActivitiesOptions[]} [activities] Activity the user is playing\n   * @property {number|number[]} [shardId] Shard id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the full presence of the client user.\n   * @param {PresenceData} data Data for the presence\n   * @returns {Presence}\n   * @example\n   * // Set the client user's presence\n   * client.user.setPresence({ activities: [{ name: 'with discord.js' }], status: 'idle' });\n   */\n  setPresence(data) {\n    return this.client.presence.set(data);\n  }\n\n  /**\n   * A user's status. Must be one of:\n   * * `online`\n   * * `idle`\n   * * `invisible`\n   * * `dnd` (do not disturb)\n   * @typedef {string} PresenceStatusData\n   */\n\n  /**\n   * Sets the status of the client user.\n   * @param {PresenceStatusData} status Status to change to\n   * @param {number|number[]} [shardId] Shard id(s) to have the activity set on\n   * @returns {Presence}\n   * @example\n   * // Set the client user's status\n   * client.user.setStatus('idle');\n   */\n  setStatus(status, shardId) {\n    return this.setPresence({ status, shardId });\n  }\n\n  /**\n   * Options for setting an activity.\n   * @typedef {Object} ActivityOptions\n   * @property {string} [name] Name of the activity\n   * @property {string} [url] Twitch / YouTube stream URL\n   * @property {ActivityType|number} [type] Type of the activity\n   * @property {number|number[]} [shardId] Shard Id(s) to have the activity set on\n   */\n\n  /**\n   * Sets the activity the client user is playing.\n   * @param {string|ActivityOptions} [name] Activity being played, or options for setting the activity\n   * @param {ActivityOptions} [options] Options for setting the activity\n   * @returns {Presence}\n   * @example\n   * // Set the client user's activity\n   * client.user.setActivity('discord.js', { type: 'WATCHING' });\n   */\n  setActivity(name, options = {}) {\n    if (!name) return this.setPresence({ activities: [], shardId: options.shardId });\n\n    const activity = Object.assign({}, options, typeof name === 'object' ? name : { name });\n    return this.setPresence({ activities: [activity], shardId: activity.shardId });\n  }\n\n  /**\n   * Sets/removes the AFK flag for the client user.\n   * @param {boolean} afk Whether or not the user is AFK\n   * @param {number|number[]} [shardId] Shard Id(s) to have the AFK flag set on\n   * @returns {Presence}\n   */\n  setAFK(afk, shardId) {\n    return this.setPresence({ afk, shardId });\n  }\n}\n\nmodule.exports = ClientUser;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}