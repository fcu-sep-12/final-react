{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst Emoji = require('./Emoji');\n\nconst ActivityFlags = require('../util/ActivityFlags');\n\nconst {\n  ActivityTypes\n} = require('../util/Constants');\n\nconst Util = require('../util/Util');\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyId] Id of the party represented in activity\n * @property {number} [type] Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n * @extends {Base}\n */\n\n\nclass Presence extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APIPresence} [data={}] The data for the presence\n   */\n  constructor(client) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super(client);\n    /**\n     * The presence's user id\n     * @type {Snowflake}\n     */\n\n    this.userId = data.user.id;\n    /**\n     * The guild this presence is in\n     * @type {?Guild}\n     */\n\n    this.guild = data.guild ?? null;\n\n    this._patch(data);\n  }\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n\n\n  get user() {\n    return this.client.users.resolve(this.userId);\n  }\n  /**\n   * The member of this presence\n   * @type {?GuildMember}\n   * @readonly\n   */\n\n\n  get member() {\n    return this.guild.members.resolve(this.userId);\n  }\n\n  _patch(data) {\n    /**\n     * The status of this presence\n     * @type {PresenceStatus}\n     */\n    this.status = data.status ?? this.status ?? 'offline';\n    /**\n     * The activities of this presence\n     * @type {Activity[]}\n     */\n\n    this.activities = data.activities?.map(activity => new Activity(this, activity)) ?? [];\n    /**\n     * The devices this presence is on\n     * @type {?Object}\n     * @property {?ClientPresenceStatus} web The current presence in the web application\n     * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n     * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n     */\n\n    this.clientStatus = data.client_status ?? null;\n    return this;\n  }\n\n  _clone() {\n    const clone = Object.assign(Object.create(this), this);\n    clone.activities = this.activities.map(activity => activity._clone());\n    return clone;\n  }\n  /**\n   * Whether this presence is equal to another.\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(presence) {\n    return this === presence || presence && this.status === presence.status && this.activities.length === presence.activities.length && this.activities.every((activity, index) => activity.equals(presence.activities[index])) && this.clientStatus?.web === presence.clientStatus?.web && this.clientStatus?.mobile === presence.clientStatus?.mobile && this.clientStatus?.desktop === presence.clientStatus?.desktop;\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n\n}\n/**\n * The platform of this activity:\n * * **`desktop`**\n * * **`samsung`** - playing on Samsung Galaxy\n * * **`xbox`** - playing on Xbox Live\n * @typedef {string} ActivityPlatform\n */\n\n/**\n * Represents an activity that is part of a user's presence.\n */\n\n\nclass Activity {\n  constructor(presence, data) {\n    Object.defineProperty(this, 'presence', {\n      value: presence\n    });\n    /**\n     * The activity's id\n     * @type {string}\n     */\n\n    this.id = data.id;\n    /**\n     * The activity's name\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The activity status's type\n     * @type {ActivityType}\n     */\n\n    this.type = typeof data.type === 'number' ? ActivityTypes[data.type] : data.type;\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n\n    this.url = data.url ?? null;\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n\n    this.details = data.details ?? null;\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n\n    this.state = data.state ?? null;\n    /**\n     * The id of the application associated with this activity\n     * @type {?Snowflake}\n     */\n\n    this.applicationId = data.application_id ?? null;\n    /**\n     * Represents timestamps of an activity\n     * @typedef {Object} ActivityTimestamps\n     * @property {?Date} start When the activity started\n     * @property {?Date} end When the activity will end\n     */\n\n    /**\n     * Timestamps for the activity\n     * @type {?ActivityTimestamps}\n     */\n\n    this.timestamps = data.timestamps ? {\n      start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n      end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null\n    } : null;\n    /**\n     * The Spotify song's id\n     * @type {?string}\n     */\n\n    this.syncId = data.sync_id ?? null;\n    /**\n     * The platform the game is being played on\n     * @type {?ActivityPlatform}\n     */\n\n    this.platform = data.platform ?? null;\n    /**\n     * Represents a party of an activity\n     * @typedef {Object} ActivityParty\n     * @property {?string} id The party's id\n     * @property {number[]} size Size of the party as `[current, max]`\n     */\n\n    /**\n     * Party of the activity\n     * @type {?ActivityParty}\n     */\n\n    this.party = data.party ?? null;\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlags>}\n     */\n\n    this.flags = new ActivityFlags(data.flags).freeze();\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n    /**\n     * The game's or Spotify session's id\n     * @type {?string}\n     */\n\n    this.sessionId = data.session_id ?? null;\n    /**\n     * The labels of the buttons of this rich presence\n     * @type {string[]}\n     */\n\n    this.buttons = data.buttons ?? [];\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n\n    this.createdTimestamp = new Date(data.created_at).getTime();\n  }\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(activity) {\n    return this === activity || activity && this.name === activity.name && this.type === activity.type && this.url === activity.url && this.state === activity.state && this.details === activity.details;\n  }\n  /**\n   * The time the activity was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * When concatenated with a string, this automatically returns the activities' name instead of the Activity object.\n   * @returns {string}\n   */\n\n\n  toString() {\n    return this.name;\n  }\n\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n\n}\n/**\n * Assets for a rich presence\n */\n\n\nclass RichPresenceAssets {\n  constructor(activity, assets) {\n    Object.defineProperty(this, 'activity', {\n      value: activity\n    });\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n\n    this.largeText = assets.large_text ?? null;\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n\n    this.smallText = assets.small_text ?? null;\n    /**\n     * The large image asset's id\n     * @type {?Snowflake}\n     */\n\n    this.largeImage = assets.large_image ?? null;\n    /**\n     * The small image asset's id\n     * @type {?Snowflake}\n     */\n\n    this.smallImage = assets.small_image ?? null;\n  }\n  /**\n   * Gets the URL of the small image asset\n   * @param {StaticImageURLOptions} [options] Options for the image url\n   * @returns {?string}\n   */\n\n\n  smallImageURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.smallImage && this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationId, this.smallImage, {\n      format,\n      size\n    });\n  }\n  /**\n   * Gets the URL of the large image asset\n   * @param {StaticImageURLOptions} [options] Options for the image url\n   * @returns {?string}\n   */\n\n\n  largeImageURL() {\n    let {\n      format,\n      size\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.largeImage) return null;\n\n    if (/^spotify:/.test(this.largeImage)) {\n      return `https://i.scdn.co/image/${this.largeImage.slice(8)}`;\n    } else if (/^twitch:/.test(this.largeImage)) {\n      return `https://static-cdn.jtvnw.net/previews-ttv/live_user_${this.largeImage.slice(7)}.png`;\n    }\n\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationId, this.largeImage, {\n      format,\n      size\n    });\n  }\n\n}\n\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;\n/* eslint-disable max-len */\n\n/**\n * @external APIPresence\n * @see {@link https://discord.com/developers/docs/rich-presence/how-to#updating-presence-update-presence-payload-fields}\n */","map":{"version":3,"names":["Base","require","Emoji","ActivityFlags","ActivityTypes","Util","Presence","constructor","client","data","userId","user","id","guild","_patch","users","resolve","member","members","status","activities","map","activity","Activity","clientStatus","client_status","_clone","clone","Object","assign","create","equals","presence","length","every","index","web","mobile","desktop","toJSON","flatten","defineProperty","value","name","type","url","details","state","applicationId","application_id","timestamps","start","Date","Number","end","syncId","sync_id","platform","party","assets","RichPresenceAssets","flags","freeze","emoji","sessionId","session_id","buttons","createdTimestamp","created_at","getTime","createdAt","toString","largeText","large_text","smallText","small_text","largeImage","large_image","smallImage","small_image","smallImageURL","format","size","rest","cdn","AppAsset","largeImageURL","test","slice","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/Presence.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst Emoji = require('./Emoji');\nconst ActivityFlags = require('../util/ActivityFlags');\nconst { ActivityTypes } = require('../util/Constants');\nconst Util = require('../util/Util');\n\n/**\n * Activity sent in a message.\n * @typedef {Object} MessageActivity\n * @property {string} [partyId] Id of the party represented in activity\n * @property {number} [type] Type of activity sent\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`offline`** - user is offline or invisible\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} PresenceStatus\n */\n\n/**\n * The status of this presence:\n * * **`online`** - user is online\n * * **`idle`** - user is AFK\n * * **`dnd`** - user is in Do Not Disturb\n * @typedef {string} ClientPresenceStatus\n */\n\n/**\n * Represents a user's presence.\n * @extends {Base}\n */\nclass Presence extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APIPresence} [data={}] The data for the presence\n   */\n  constructor(client, data = {}) {\n    super(client);\n\n    /**\n     * The presence's user id\n     * @type {Snowflake}\n     */\n    this.userId = data.user.id;\n\n    /**\n     * The guild this presence is in\n     * @type {?Guild}\n     */\n    this.guild = data.guild ?? null;\n\n    this._patch(data);\n  }\n\n  /**\n   * The user of this presence\n   * @type {?User}\n   * @readonly\n   */\n  get user() {\n    return this.client.users.resolve(this.userId);\n  }\n\n  /**\n   * The member of this presence\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.resolve(this.userId);\n  }\n\n  _patch(data) {\n    /**\n     * The status of this presence\n     * @type {PresenceStatus}\n     */\n    this.status = data.status ?? this.status ?? 'offline';\n\n    /**\n     * The activities of this presence\n     * @type {Activity[]}\n     */\n    this.activities = data.activities?.map(activity => new Activity(this, activity)) ?? [];\n\n    /**\n     * The devices this presence is on\n     * @type {?Object}\n     * @property {?ClientPresenceStatus} web The current presence in the web application\n     * @property {?ClientPresenceStatus} mobile The current presence in the mobile application\n     * @property {?ClientPresenceStatus} desktop The current presence in the desktop application\n     */\n    this.clientStatus = data.client_status ?? null;\n\n    return this;\n  }\n\n  _clone() {\n    const clone = Object.assign(Object.create(this), this);\n    clone.activities = this.activities.map(activity => activity._clone());\n    return clone;\n  }\n\n  /**\n   * Whether this presence is equal to another.\n   * @param {Presence} presence The presence to compare with\n   * @returns {boolean}\n   */\n  equals(presence) {\n    return (\n      this === presence ||\n      (presence &&\n        this.status === presence.status &&\n        this.activities.length === presence.activities.length &&\n        this.activities.every((activity, index) => activity.equals(presence.activities[index])) &&\n        this.clientStatus?.web === presence.clientStatus?.web &&\n        this.clientStatus?.mobile === presence.clientStatus?.mobile &&\n        this.clientStatus?.desktop === presence.clientStatus?.desktop)\n    );\n  }\n\n  toJSON() {\n    return Util.flatten(this);\n  }\n}\n\n/**\n * The platform of this activity:\n * * **`desktop`**\n * * **`samsung`** - playing on Samsung Galaxy\n * * **`xbox`** - playing on Xbox Live\n * @typedef {string} ActivityPlatform\n */\n\n/**\n * Represents an activity that is part of a user's presence.\n */\nclass Activity {\n  constructor(presence, data) {\n    Object.defineProperty(this, 'presence', { value: presence });\n\n    /**\n     * The activity's id\n     * @type {string}\n     */\n    this.id = data.id;\n\n    /**\n     * The activity's name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The activity status's type\n     * @type {ActivityType}\n     */\n    this.type = typeof data.type === 'number' ? ActivityTypes[data.type] : data.type;\n\n    /**\n     * If the activity is being streamed, a link to the stream\n     * @type {?string}\n     */\n    this.url = data.url ?? null;\n\n    /**\n     * Details about the activity\n     * @type {?string}\n     */\n    this.details = data.details ?? null;\n\n    /**\n     * State of the activity\n     * @type {?string}\n     */\n    this.state = data.state ?? null;\n\n    /**\n     * The id of the application associated with this activity\n     * @type {?Snowflake}\n     */\n    this.applicationId = data.application_id ?? null;\n\n    /**\n     * Represents timestamps of an activity\n     * @typedef {Object} ActivityTimestamps\n     * @property {?Date} start When the activity started\n     * @property {?Date} end When the activity will end\n     */\n\n    /**\n     * Timestamps for the activity\n     * @type {?ActivityTimestamps}\n     */\n    this.timestamps = data.timestamps\n      ? {\n          start: data.timestamps.start ? new Date(Number(data.timestamps.start)) : null,\n          end: data.timestamps.end ? new Date(Number(data.timestamps.end)) : null,\n        }\n      : null;\n\n    /**\n     * The Spotify song's id\n     * @type {?string}\n     */\n    this.syncId = data.sync_id ?? null;\n\n    /**\n     * The platform the game is being played on\n     * @type {?ActivityPlatform}\n     */\n    this.platform = data.platform ?? null;\n\n    /**\n     * Represents a party of an activity\n     * @typedef {Object} ActivityParty\n     * @property {?string} id The party's id\n     * @property {number[]} size Size of the party as `[current, max]`\n     */\n\n    /**\n     * Party of the activity\n     * @type {?ActivityParty}\n     */\n    this.party = data.party ?? null;\n\n    /**\n     * Assets for rich presence\n     * @type {?RichPresenceAssets}\n     */\n    this.assets = data.assets ? new RichPresenceAssets(this, data.assets) : null;\n\n    /**\n     * Flags that describe the activity\n     * @type {Readonly<ActivityFlags>}\n     */\n    this.flags = new ActivityFlags(data.flags).freeze();\n\n    /**\n     * Emoji for a custom activity\n     * @type {?Emoji}\n     */\n    this.emoji = data.emoji ? new Emoji(presence.client, data.emoji) : null;\n\n    /**\n     * The game's or Spotify session's id\n     * @type {?string}\n     */\n    this.sessionId = data.session_id ?? null;\n\n    /**\n     * The labels of the buttons of this rich presence\n     * @type {string[]}\n     */\n    this.buttons = data.buttons ?? [];\n\n    /**\n     * Creation date of the activity\n     * @type {number}\n     */\n    this.createdTimestamp = new Date(data.created_at).getTime();\n  }\n\n  /**\n   * Whether this activity is equal to another activity.\n   * @param {Activity} activity The activity to compare with\n   * @returns {boolean}\n   */\n  equals(activity) {\n    return (\n      this === activity ||\n      (activity &&\n        this.name === activity.name &&\n        this.type === activity.type &&\n        this.url === activity.url &&\n        this.state === activity.state &&\n        this.details === activity.details)\n    );\n  }\n\n  /**\n   * The time the activity was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the activities' name instead of the Activity object.\n   * @returns {string}\n   */\n  toString() {\n    return this.name;\n  }\n\n  _clone() {\n    return Object.assign(Object.create(this), this);\n  }\n}\n\n/**\n * Assets for a rich presence\n */\nclass RichPresenceAssets {\n  constructor(activity, assets) {\n    Object.defineProperty(this, 'activity', { value: activity });\n\n    /**\n     * Hover text for the large image\n     * @type {?string}\n     */\n    this.largeText = assets.large_text ?? null;\n\n    /**\n     * Hover text for the small image\n     * @type {?string}\n     */\n    this.smallText = assets.small_text ?? null;\n\n    /**\n     * The large image asset's id\n     * @type {?Snowflake}\n     */\n    this.largeImage = assets.large_image ?? null;\n\n    /**\n     * The small image asset's id\n     * @type {?Snowflake}\n     */\n    this.smallImage = assets.small_image ?? null;\n  }\n\n  /**\n   * Gets the URL of the small image asset\n   * @param {StaticImageURLOptions} [options] Options for the image url\n   * @returns {?string}\n   */\n  smallImageURL({ format, size } = {}) {\n    return (\n      this.smallImage &&\n      this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationId, this.smallImage, {\n        format,\n        size,\n      })\n    );\n  }\n\n  /**\n   * Gets the URL of the large image asset\n   * @param {StaticImageURLOptions} [options] Options for the image url\n   * @returns {?string}\n   */\n  largeImageURL({ format, size } = {}) {\n    if (!this.largeImage) return null;\n    if (/^spotify:/.test(this.largeImage)) {\n      return `https://i.scdn.co/image/${this.largeImage.slice(8)}`;\n    } else if (/^twitch:/.test(this.largeImage)) {\n      return `https://static-cdn.jtvnw.net/previews-ttv/live_user_${this.largeImage.slice(7)}.png`;\n    }\n    return this.activity.presence.client.rest.cdn.AppAsset(this.activity.applicationId, this.largeImage, {\n      format,\n      size,\n    });\n  }\n}\n\nexports.Presence = Presence;\nexports.Activity = Activity;\nexports.RichPresenceAssets = RichPresenceAssets;\n\n/* eslint-disable max-len */\n/**\n * @external APIPresence\n * @see {@link https://discord.com/developers/docs/rich-presence/how-to#updating-presence-update-presence-payload-fields}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}