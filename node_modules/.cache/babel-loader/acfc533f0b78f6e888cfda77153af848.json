{"ast":null,"code":"'use strict';\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst stream = require('stream');\n\nconst fetch = require('node-fetch');\n\nconst {\n  Error: DiscordError,\n  TypeError\n} = require('../errors');\n\nconst Invite = require('../structures/Invite');\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them.\n * @private\n */\n\n\nclass DataResolver extends null {\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Data that can be resolved to give a template code. This can be:\n   * * A template code\n   * * A template URL\n   * @typedef {string} GuildTemplateResolvable\n   */\n\n  /**\n   * Resolves the string to a code based on the passed regex.\n   * @param {string} data The string to resolve\n   * @param {RegExp} regex The RegExp used to extract the code\n   * @returns {string}\n   */\n  static resolveCode(data, regex) {\n    return data.matchAll(regex).next().value?.[1] ?? data;\n  }\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n\n\n  static resolveInviteCode(data) {\n    return this.resolveCode(data, Invite.INVITES_PATTERN);\n  }\n  /**\n   * Resolves GuildTemplateResolvable to a template code.\n   * @param {GuildTemplateResolvable} data The template resolvable to resolve\n   * @returns {string}\n   */\n\n\n  static resolveGuildTemplateCode(data) {\n    const GuildTemplate = require('../structures/GuildTemplate');\n\n    return this.resolveCode(data, GuildTemplate.GUILD_TEMPLATES_PATTERN);\n  }\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n\n\n  static async resolveImage(image) {\n    if (!image) return null;\n\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return image;\n    }\n\n    const file = await this.resolveFileAsBuffer(image);\n    return DataResolver.resolveBase64(file);\n  }\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n\n\n  static resolveBase64(data) {\n    if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n  /**\n   * Data that can be resolved to give a Buffer. This can be:\n   * * A Buffer\n   * * The path to a local file\n   * * A URL\n   * @typedef {string|Buffer} BufferResolvable\n   */\n\n  /**\n   * @external Stream\n   * @see {@link https://nodejs.org/api/stream.html}\n   */\n\n  /**\n   * Resolves a BufferResolvable to a Buffer or a Stream.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer|Stream>}\n   */\n\n\n  static async resolveFile(resource) {\n    if (Buffer.isBuffer(resource) || resource instanceof stream.Readable) return resource;\n\n    if (typeof resource === 'string') {\n      if (/^https?:\\/\\//.test(resource)) {\n        const res = await fetch(resource);\n        return res.body;\n      }\n\n      return new Promise((resolve, reject) => {\n        const file = path.resolve(resource);\n        fs.stat(file, (err, stats) => {\n          if (err) return reject(err);\n          if (!stats.isFile()) return reject(new DiscordError('FILE_NOT_FOUND', file));\n          return resolve(fs.createReadStream(file));\n        });\n      });\n    }\n\n    throw new TypeError('REQ_RESOURCE_TYPE');\n  }\n  /**\n   * Resolves a BufferResolvable to a Buffer.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer>}\n   */\n\n\n  static async resolveFileAsBuffer(resource) {\n    const file = await this.resolveFile(resource);\n    if (Buffer.isBuffer(file)) return file;\n    const buffers = [];\n\n    for await (const data of file) buffers.push(data);\n\n    return Buffer.concat(buffers);\n  }\n\n}\n\nmodule.exports = DataResolver;","map":{"version":3,"names":["fs","require","path","stream","fetch","Error","DiscordError","TypeError","Invite","DataResolver","resolveCode","data","regex","matchAll","next","value","resolveInviteCode","INVITES_PATTERN","resolveGuildTemplateCode","GuildTemplate","GUILD_TEMPLATES_PATTERN","resolveImage","image","startsWith","file","resolveFileAsBuffer","resolveBase64","Buffer","isBuffer","toString","resolveFile","resource","Readable","test","res","body","Promise","resolve","reject","stat","err","stats","isFile","createReadStream","buffers","push","concat","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/util/DataResolver.js"],"sourcesContent":["'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst stream = require('stream');\nconst fetch = require('node-fetch');\nconst { Error: DiscordError, TypeError } = require('../errors');\nconst Invite = require('../structures/Invite');\n\n/**\n * The DataResolver identifies different objects and tries to resolve a specific piece of information from them.\n * @private\n */\nclass DataResolver extends null {\n  /**\n   * Data that can be resolved to give an invite code. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Data that can be resolved to give a template code. This can be:\n   * * A template code\n   * * A template URL\n   * @typedef {string} GuildTemplateResolvable\n   */\n\n  /**\n   * Resolves the string to a code based on the passed regex.\n   * @param {string} data The string to resolve\n   * @param {RegExp} regex The RegExp used to extract the code\n   * @returns {string}\n   */\n  static resolveCode(data, regex) {\n    return data.matchAll(regex).next().value?.[1] ?? data;\n  }\n\n  /**\n   * Resolves InviteResolvable to an invite code.\n   * @param {InviteResolvable} data The invite resolvable to resolve\n   * @returns {string}\n   */\n  static resolveInviteCode(data) {\n    return this.resolveCode(data, Invite.INVITES_PATTERN);\n  }\n\n  /**\n   * Resolves GuildTemplateResolvable to a template code.\n   * @param {GuildTemplateResolvable} data The template resolvable to resolve\n   * @returns {string}\n   */\n  static resolveGuildTemplateCode(data) {\n    const GuildTemplate = require('../structures/GuildTemplate');\n    return this.resolveCode(data, GuildTemplate.GUILD_TEMPLATES_PATTERN);\n  }\n\n  /**\n   * Resolves a Base64Resolvable, a string, or a BufferResolvable to a Base 64 image.\n   * @param {BufferResolvable|Base64Resolvable} image The image to be resolved\n   * @returns {Promise<?string>}\n   */\n  static async resolveImage(image) {\n    if (!image) return null;\n    if (typeof image === 'string' && image.startsWith('data:')) {\n      return image;\n    }\n    const file = await this.resolveFileAsBuffer(image);\n    return DataResolver.resolveBase64(file);\n  }\n\n  /**\n   * Data that resolves to give a Base64 string, typically for image uploading. This can be:\n   * * A Buffer\n   * * A base64 string\n   * @typedef {Buffer|string} Base64Resolvable\n   */\n\n  /**\n   * Resolves a Base64Resolvable to a Base 64 image.\n   * @param {Base64Resolvable} data The base 64 resolvable you want to resolve\n   * @returns {?string}\n   */\n  static resolveBase64(data) {\n    if (Buffer.isBuffer(data)) return `data:image/jpg;base64,${data.toString('base64')}`;\n    return data;\n  }\n\n  /**\n   * Data that can be resolved to give a Buffer. This can be:\n   * * A Buffer\n   * * The path to a local file\n   * * A URL\n   * @typedef {string|Buffer} BufferResolvable\n   */\n\n  /**\n   * @external Stream\n   * @see {@link https://nodejs.org/api/stream.html}\n   */\n\n  /**\n   * Resolves a BufferResolvable to a Buffer or a Stream.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer|Stream>}\n   */\n  static async resolveFile(resource) {\n    if (Buffer.isBuffer(resource) || resource instanceof stream.Readable) return resource;\n    if (typeof resource === 'string') {\n      if (/^https?:\\/\\//.test(resource)) {\n        const res = await fetch(resource);\n        return res.body;\n      }\n\n      return new Promise((resolve, reject) => {\n        const file = path.resolve(resource);\n        fs.stat(file, (err, stats) => {\n          if (err) return reject(err);\n          if (!stats.isFile()) return reject(new DiscordError('FILE_NOT_FOUND', file));\n          return resolve(fs.createReadStream(file));\n        });\n      });\n    }\n\n    throw new TypeError('REQ_RESOURCE_TYPE');\n  }\n\n  /**\n   * Resolves a BufferResolvable to a Buffer.\n   * @param {BufferResolvable|Stream} resource The buffer or stream resolvable to resolve\n   * @returns {Promise<Buffer>}\n   */\n  static async resolveFileAsBuffer(resource) {\n    const file = await this.resolveFile(resource);\n    if (Buffer.isBuffer(file)) return file;\n\n    const buffers = [];\n    for await (const data of file) buffers.push(data);\n    return Buffer.concat(buffers);\n  }\n}\n\nmodule.exports = DataResolver;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}