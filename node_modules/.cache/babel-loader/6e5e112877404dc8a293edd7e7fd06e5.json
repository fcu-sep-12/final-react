{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SetPredicate = void 0;\n\nconst isEqual = require(\"lodash.isequal\");\n\nconst has_items_1 = require(\"../utils/has-items\");\n\nconst of_type_1 = require(\"../utils/of-type\");\n\nconst predicate_1 = require(\"./predicate\");\n\nclass SetPredicate extends predicate_1.Predicate {\n  /**\n  @hidden\n  */\n  constructor(options) {\n    super('Set', options);\n  }\n  /**\n  Test a Set to have a specific size.\n   @param size - The size of the Set.\n  */\n\n\n  size(size) {\n    return this.addValidator({\n      message: (set, label) => `Expected ${label} to have size \\`${size}\\`, got \\`${set.size}\\``,\n      validator: set => set.size === size\n    });\n  }\n  /**\n  Test a Set to have a minimum size.\n   @param size - The minimum size of the Set.\n  */\n\n\n  minSize(size) {\n    return this.addValidator({\n      message: (set, label) => `Expected ${label} to have a minimum size of \\`${size}\\`, got \\`${set.size}\\``,\n      validator: set => set.size >= size,\n      negatedMessage: (set, label) => `Expected ${label} to have a maximum size of \\`${size - 1}\\`, got \\`${set.size}\\``\n    });\n  }\n  /**\n  Test a Set to have a maximum size.\n   @param size - The maximum size of the Set.\n  */\n\n\n  maxSize(size) {\n    return this.addValidator({\n      message: (set, label) => `Expected ${label} to have a maximum size of \\`${size}\\`, got \\`${set.size}\\``,\n      validator: set => set.size <= size,\n      negatedMessage: (set, label) => `Expected ${label} to have a minimum size of \\`${size + 1}\\`, got \\`${set.size}\\``\n    });\n  }\n  /**\n  Test a Set to include all the provided items. The items are tested by identity, not structure.\n   @param items - The items that should be a item in the Set.\n  */\n\n\n  has() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    return this.addValidator({\n      message: (_, label, missingItems) => `Expected ${label} to have items \\`${JSON.stringify(missingItems)}\\``,\n      validator: set => has_items_1.default(set, items)\n    });\n  }\n  /**\n  Test a Set to include any of the provided items. The items are tested by identity, not structure.\n   @param items - The items that could be a item in the Set.\n  */\n\n\n  hasAny() {\n    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      items[_key2] = arguments[_key2];\n    }\n\n    return this.addValidator({\n      message: (_, label) => `Expected ${label} to have any item of \\`${JSON.stringify(items)}\\``,\n      validator: set => items.some(item => set.has(item))\n    });\n  }\n  /**\n  Test all the items in the Set to match the provided predicate.\n   @param predicate - The predicate that should be applied against every item in the Set.\n  */\n\n\n  ofType(predicate) {\n    return this.addValidator({\n      message: (_, label, error) => `(${label}) ${error}`,\n      validator: set => of_type_1.default(set, 'values', predicate)\n    });\n  }\n  /**\n  Test a Set to be empty.\n  */\n\n\n  get empty() {\n    return this.addValidator({\n      message: (set, label) => `Expected ${label} to be empty, got \\`${JSON.stringify([...set])}\\``,\n      validator: set => set.size === 0\n    });\n  }\n  /**\n  Test a Set to be not empty.\n  */\n\n\n  get nonEmpty() {\n    return this.addValidator({\n      message: (_, label) => `Expected ${label} to not be empty`,\n      validator: set => set.size > 0\n    });\n  }\n  /**\n  Test a Set to be deeply equal to the provided Set.\n   @param expected - Expected Set to match.\n  */\n\n\n  deepEqual(expected) {\n    return this.addValidator({\n      message: (set, label) => `Expected ${label} to be deeply equal to \\`${JSON.stringify([...expected])}\\`, got \\`${JSON.stringify([...set])}\\``,\n      validator: set => isEqual(set, expected)\n    });\n  }\n\n}\n\nexports.SetPredicate = SetPredicate;","map":{"version":3,"names":["Object","defineProperty","exports","value","SetPredicate","isEqual","require","has_items_1","of_type_1","predicate_1","Predicate","constructor","options","size","addValidator","message","set","label","validator","minSize","negatedMessage","maxSize","has","items","_","missingItems","JSON","stringify","default","hasAny","some","item","ofType","predicate","error","empty","nonEmpty","deepEqual","expected"],"sources":["C:/Users/ROUSER6/node_modules/ow/dist/predicates/set.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SetPredicate = void 0;\nconst isEqual = require(\"lodash.isequal\");\nconst has_items_1 = require(\"../utils/has-items\");\nconst of_type_1 = require(\"../utils/of-type\");\nconst predicate_1 = require(\"./predicate\");\nclass SetPredicate extends predicate_1.Predicate {\n    /**\n    @hidden\n    */\n    constructor(options) {\n        super('Set', options);\n    }\n    /**\n    Test a Set to have a specific size.\n\n    @param size - The size of the Set.\n    */\n    size(size) {\n        return this.addValidator({\n            message: (set, label) => `Expected ${label} to have size \\`${size}\\`, got \\`${set.size}\\``,\n            validator: set => set.size === size\n        });\n    }\n    /**\n    Test a Set to have a minimum size.\n\n    @param size - The minimum size of the Set.\n    */\n    minSize(size) {\n        return this.addValidator({\n            message: (set, label) => `Expected ${label} to have a minimum size of \\`${size}\\`, got \\`${set.size}\\``,\n            validator: set => set.size >= size,\n            negatedMessage: (set, label) => `Expected ${label} to have a maximum size of \\`${size - 1}\\`, got \\`${set.size}\\``\n        });\n    }\n    /**\n    Test a Set to have a maximum size.\n\n    @param size - The maximum size of the Set.\n    */\n    maxSize(size) {\n        return this.addValidator({\n            message: (set, label) => `Expected ${label} to have a maximum size of \\`${size}\\`, got \\`${set.size}\\``,\n            validator: set => set.size <= size,\n            negatedMessage: (set, label) => `Expected ${label} to have a minimum size of \\`${size + 1}\\`, got \\`${set.size}\\``\n        });\n    }\n    /**\n    Test a Set to include all the provided items. The items are tested by identity, not structure.\n\n    @param items - The items that should be a item in the Set.\n    */\n    has(...items) {\n        return this.addValidator({\n            message: (_, label, missingItems) => `Expected ${label} to have items \\`${JSON.stringify(missingItems)}\\``,\n            validator: set => has_items_1.default(set, items)\n        });\n    }\n    /**\n    Test a Set to include any of the provided items. The items are tested by identity, not structure.\n\n    @param items - The items that could be a item in the Set.\n    */\n    hasAny(...items) {\n        return this.addValidator({\n            message: (_, label) => `Expected ${label} to have any item of \\`${JSON.stringify(items)}\\``,\n            validator: set => items.some(item => set.has(item))\n        });\n    }\n    /**\n    Test all the items in the Set to match the provided predicate.\n\n    @param predicate - The predicate that should be applied against every item in the Set.\n    */\n    ofType(predicate) {\n        return this.addValidator({\n            message: (_, label, error) => `(${label}) ${error}`,\n            validator: set => of_type_1.default(set, 'values', predicate)\n        });\n    }\n    /**\n    Test a Set to be empty.\n    */\n    get empty() {\n        return this.addValidator({\n            message: (set, label) => `Expected ${label} to be empty, got \\`${JSON.stringify([...set])}\\``,\n            validator: set => set.size === 0\n        });\n    }\n    /**\n    Test a Set to be not empty.\n    */\n    get nonEmpty() {\n        return this.addValidator({\n            message: (_, label) => `Expected ${label} to not be empty`,\n            validator: set => set.size > 0\n        });\n    }\n    /**\n    Test a Set to be deeply equal to the provided Set.\n\n    @param expected - Expected Set to match.\n    */\n    deepEqual(expected) {\n        return this.addValidator({\n            message: (set, label) => `Expected ${label} to be deeply equal to \\`${JSON.stringify([...expected])}\\`, got \\`${JSON.stringify([...set])}\\``,\n            validator: set => isEqual(set, expected)\n        });\n    }\n}\nexports.SetPredicate = SetPredicate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}