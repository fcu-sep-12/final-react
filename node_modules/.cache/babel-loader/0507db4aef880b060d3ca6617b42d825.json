{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n/**\n * Represents raw emoji data from the API\n * @typedef {APIEmoji} RawEmoji\n * @property {?Snowflake} id The emoji's id\n * @property {?string} name The emoji's name\n * @property {?boolean} animated Whether the emoji is animated\n */\n\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\n\n\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether or not the emoji is animated\n     * @type {?boolean}\n     */\n\n    this.animated = emoji.animated ?? null;\n    /**\n     * The emoji's name\n     * @type {?string}\n     */\n\n    this.name = emoji.name ?? null;\n    /**\n     * The emoji's id\n     * @type {?Snowflake}\n     */\n\n    this.id = emoji.id;\n    /**\n     * Whether this emoji has been deleted\n     * @type {boolean}\n     */\n\n    this.deleted = false;\n  }\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n\n\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n  /**\n   * The URL to the emoji file if its a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get url() {\n    return this.id && this.client.rest.cdn.Emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return this.id && SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return this.id && new Date(this.createdTimestamp);\n  }\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.channel.send(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n\n\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildId',\n      createdTimestamp: true,\n      url: true,\n      identifier: true\n    });\n  }\n\n}\n\nmodule.exports = Emoji;\n/**\n * @external APIEmoji\n * @see {@link https://discord.com/developers/docs/resources/emoji#emoji-object}\n */","map":{"version":3,"names":["Base","require","SnowflakeUtil","Emoji","constructor","client","emoji","animated","name","id","deleted","identifier","encodeURIComponent","url","rest","cdn","createdTimestamp","deconstruct","timestamp","createdAt","Date","toString","toJSON","guild","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/Emoji.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\n/**\n * Represents raw emoji data from the API\n * @typedef {APIEmoji} RawEmoji\n * @property {?Snowflake} id The emoji's id\n * @property {?string} name The emoji's name\n * @property {?boolean} animated Whether the emoji is animated\n */\n\n/**\n * Represents an emoji, see {@link GuildEmoji} and {@link ReactionEmoji}.\n * @extends {Base}\n */\nclass Emoji extends Base {\n  constructor(client, emoji) {\n    super(client);\n    /**\n     * Whether or not the emoji is animated\n     * @type {?boolean}\n     */\n    this.animated = emoji.animated ?? null;\n\n    /**\n     * The emoji's name\n     * @type {?string}\n     */\n    this.name = emoji.name ?? null;\n\n    /**\n     * The emoji's id\n     * @type {?Snowflake}\n     */\n    this.id = emoji.id;\n\n    /**\n     * Whether this emoji has been deleted\n     * @type {boolean}\n     */\n    this.deleted = false;\n  }\n\n  /**\n   * The identifier of this emoji, used for message reactions\n   * @type {string}\n   * @readonly\n   */\n  get identifier() {\n    if (this.id) return `${this.animated ? 'a:' : ''}${this.name}:${this.id}`;\n    return encodeURIComponent(this.name);\n  }\n\n  /**\n   * The URL to the emoji file if its a custom emoji\n   * @type {?string}\n   * @readonly\n   */\n  get url() {\n    return this.id && this.client.rest.cdn.Emoji(this.id, this.animated ? 'gif' : 'png');\n  }\n\n  /**\n   * The timestamp the emoji was created at, or null if unicode\n   * @type {?number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return this.id && SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the emoji was created at, or null if unicode\n   * @type {?Date}\n   * @readonly\n   */\n  get createdAt() {\n    return this.id && new Date(this.createdTimestamp);\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the text required to form a graphical emoji on Discord\n   * instead of the Emoji object.\n   * @returns {string}\n   * @example\n   * // Send a custom emoji from a guild:\n   * const emoji = guild.emojis.cache.first();\n   * msg.channel.send(`Hello! ${emoji}`);\n   * @example\n   * // Send the emoji used in a reaction to the channel the reaction is part of\n   * reaction.message.channel.send(`The emoji used was: ${reaction.emoji}`);\n   */\n  toString() {\n    return this.id ? `<${this.animated ? 'a' : ''}:${this.name}:${this.id}>` : this.name;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      guild: 'guildId',\n      createdTimestamp: true,\n      url: true,\n      identifier: true,\n    });\n  }\n}\n\nmodule.exports = Emoji;\n\n/**\n * @external APIEmoji\n * @see {@link https://discord.com/developers/docs/resources/emoji#emoji-object}\n */\n"],"mappings":"AAAA;;AAEA,MAAMA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,MAAMC,aAAa,GAAGD,OAAO,CAAC,uBAAD,CAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AACA,MAAME,KAAN,SAAoBH,IAApB,CAAyB;EACvBI,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgB;IACzB,MAAMD,MAAN;IACA;AACJ;AACA;AACA;;IACI,KAAKE,QAAL,GAAgBD,KAAK,CAACC,QAAN,IAAkB,IAAlC;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,IAAL,GAAYF,KAAK,CAACE,IAAN,IAAc,IAA1B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,EAAL,GAAUH,KAAK,CAACG,EAAhB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,KAAf;EACD;EAED;AACF;AACA;AACA;AACA;;;EACgB,IAAVC,UAAU,GAAG;IACf,IAAI,KAAKF,EAAT,EAAa,OAAQ,GAAE,KAAKF,QAAL,GAAgB,IAAhB,GAAuB,EAAG,GAAE,KAAKC,IAAK,IAAG,KAAKC,EAAG,EAA3D;IACb,OAAOG,kBAAkB,CAAC,KAAKJ,IAAN,CAAzB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACS,IAAHK,GAAG,GAAG;IACR,OAAO,KAAKJ,EAAL,IAAW,KAAKJ,MAAL,CAAYS,IAAZ,CAAiBC,GAAjB,CAAqBZ,KAArB,CAA2B,KAAKM,EAAhC,EAAoC,KAAKF,QAAL,GAAgB,KAAhB,GAAwB,KAA5D,CAAlB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACsB,IAAhBS,gBAAgB,GAAG;IACrB,OAAO,KAAKP,EAAL,IAAWP,aAAa,CAACe,WAAd,CAA0B,KAAKR,EAA/B,EAAmCS,SAArD;EACD;EAED;AACF;AACA;AACA;AACA;;;EACe,IAATC,SAAS,GAAG;IACd,OAAO,KAAKV,EAAL,IAAW,IAAIW,IAAJ,CAAS,KAAKJ,gBAAd,CAAlB;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEK,QAAQ,GAAG;IACT,OAAO,KAAKZ,EAAL,GAAW,IAAG,KAAKF,QAAL,GAAgB,GAAhB,GAAsB,EAAG,IAAG,KAAKC,IAAK,IAAG,KAAKC,EAAG,GAA/D,GAAoE,KAAKD,IAAhF;EACD;;EAEDc,MAAM,GAAG;IACP,OAAO,MAAMA,MAAN,CAAa;MAClBC,KAAK,EAAE,SADW;MAElBP,gBAAgB,EAAE,IAFA;MAGlBH,GAAG,EAAE,IAHa;MAIlBF,UAAU,EAAE;IAJM,CAAb,CAAP;EAMD;;AAxFsB;;AA2FzBa,MAAM,CAACC,OAAP,GAAiBtB,KAAjB;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}