{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ArrayPredicate = void 0;\n\nconst isEqual = require(\"lodash.isequal\");\n\nconst predicate_1 = require(\"./predicate\");\n\nconst match_shape_1 = require(\"../utils/match-shape\");\n\nconst of_type_1 = require(\"../utils/of-type\");\n\nclass ArrayPredicate extends predicate_1.Predicate {\n  /**\n  @hidden\n  */\n  constructor(options) {\n    super('array', options);\n  }\n  /**\n  Test an array to have a specific length.\n   @param length - The length of the array.\n  */\n\n\n  length(length) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to have length \\`${length}\\`, got \\`${value.length}\\``,\n      validator: value => value.length === length\n    });\n  }\n  /**\n  Test an array to have a minimum length.\n   @param length - The minimum length of the array.\n  */\n\n\n  minLength(length) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to have a minimum length of \\`${length}\\`, got \\`${value.length}\\``,\n      validator: value => value.length >= length,\n      negatedMessage: (value, label) => `Expected ${label} to have a maximum length of \\`${length - 1}\\`, got \\`${value.length}\\``\n    });\n  }\n  /**\n  Test an array to have a maximum length.\n   @param length - The maximum length of the array.\n  */\n\n\n  maxLength(length) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to have a maximum length of \\`${length}\\`, got \\`${value.length}\\``,\n      validator: value => value.length <= length,\n      negatedMessage: (value, label) => `Expected ${label} to have a minimum length of \\`${length + 1}\\`, got \\`${value.length}\\``\n    });\n  }\n  /**\n  Test an array to start with a specific value. The value is tested by identity, not structure.\n   @param searchElement - The value that should be the start of the array.\n  */\n\n\n  startsWith(searchElement) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to start with \\`${searchElement}\\`, got \\`${value[0]}\\``,\n      validator: value => value[0] === searchElement\n    });\n  }\n  /**\n  Test an array to end with a specific value. The value is tested by identity, not structure.\n   @param searchElement - The value that should be the end of the array.\n  */\n\n\n  endsWith(searchElement) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to end with \\`${searchElement}\\`, got \\`${value[value.length - 1]}\\``,\n      validator: value => value[value.length - 1] === searchElement\n    });\n  }\n  /**\n  Test an array to include all the provided elements. The values are tested by identity, not structure.\n   @param searchElements - The values that should be included in the array.\n  */\n\n\n  includes() {\n    for (var _len = arguments.length, searchElements = new Array(_len), _key = 0; _key < _len; _key++) {\n      searchElements[_key] = arguments[_key];\n    }\n\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to include all elements of \\`${JSON.stringify(searchElements)}\\`, got \\`${JSON.stringify(value)}\\``,\n      validator: value => searchElements.every(element => value.includes(element))\n    });\n  }\n  /**\n  Test an array to include any of the provided elements. The values are tested by identity, not structure.\n   @param searchElements - The values that should be included in the array.\n  */\n\n\n  includesAny() {\n    for (var _len2 = arguments.length, searchElements = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      searchElements[_key2] = arguments[_key2];\n    }\n\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to include any element of \\`${JSON.stringify(searchElements)}\\`, got \\`${JSON.stringify(value)}\\``,\n      validator: value => searchElements.some(element => value.includes(element))\n    });\n  }\n  /**\n  Test an array to be empty.\n  */\n\n\n  get empty() {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be empty, got \\`${JSON.stringify(value)}\\``,\n      validator: value => value.length === 0\n    });\n  }\n  /**\n  Test an array to be not empty.\n  */\n\n\n  get nonEmpty() {\n    return this.addValidator({\n      message: (_, label) => `Expected ${label} to not be empty`,\n      validator: value => value.length > 0\n    });\n  }\n  /**\n  Test an array to be deeply equal to the provided array.\n   @param expected - Expected value to match.\n  */\n\n\n  deepEqual(expected) {\n    return this.addValidator({\n      message: (value, label) => `Expected ${label} to be deeply equal to \\`${JSON.stringify(expected)}\\`, got \\`${JSON.stringify(value)}\\``,\n      validator: value => isEqual(value, expected)\n    });\n  }\n  /**\n  Test all elements in the array to match to provided predicate.\n   @param predicate - The predicate that should be applied against every individual item.\n   @example\n  ```\n  ow(['a', 1], ow.array.ofType(ow.any(ow.string, ow.number)));\n  ```\n  */\n\n\n  ofType(predicate) {\n    // TODO [typescript@>=5] If higher-kinded types are supported natively by typescript, refactor `addValidator` to use them to avoid the usage of `any`. Otherwise, bump or remove this TODO.\n    return this.addValidator({\n      message: (_, label, error) => `(${label}) ${error}`,\n      validator: value => of_type_1.default(value, 'values', predicate)\n    });\n  }\n  /**\n  Test if the elements in the array exactly matches the elements placed at the same indices in the predicates array.\n   @param predicates - Predicates to test the array against. Describes what the tested array should look like.\n   @example\n  ```\n  ow(['1', 2], ow.array.exactShape([ow.string, ow.number]));\n  ```\n  */\n\n\n  exactShape(predicates) {\n    const shape = predicates;\n    return this.addValidator({\n      message: (_, label, message) => `${message.replace('Expected', 'Expected element')} in ${label}`,\n      validator: object => match_shape_1.exact(object, shape, undefined, true)\n    });\n  }\n\n}\n\nexports.ArrayPredicate = ArrayPredicate;","map":{"version":3,"names":["Object","defineProperty","exports","value","ArrayPredicate","isEqual","require","predicate_1","match_shape_1","of_type_1","Predicate","constructor","options","length","addValidator","message","label","validator","minLength","negatedMessage","maxLength","startsWith","searchElement","endsWith","includes","searchElements","JSON","stringify","every","element","includesAny","some","empty","nonEmpty","_","deepEqual","expected","ofType","predicate","error","default","exactShape","predicates","shape","replace","object","exact","undefined"],"sources":["C:/Users/ROUSER6/node_modules/ow/dist/predicates/array.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ArrayPredicate = void 0;\nconst isEqual = require(\"lodash.isequal\");\nconst predicate_1 = require(\"./predicate\");\nconst match_shape_1 = require(\"../utils/match-shape\");\nconst of_type_1 = require(\"../utils/of-type\");\nclass ArrayPredicate extends predicate_1.Predicate {\n    /**\n    @hidden\n    */\n    constructor(options) {\n        super('array', options);\n    }\n    /**\n    Test an array to have a specific length.\n\n    @param length - The length of the array.\n    */\n    length(length) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have length \\`${length}\\`, got \\`${value.length}\\``,\n            validator: value => value.length === length\n        });\n    }\n    /**\n    Test an array to have a minimum length.\n\n    @param length - The minimum length of the array.\n    */\n    minLength(length) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have a minimum length of \\`${length}\\`, got \\`${value.length}\\``,\n            validator: value => value.length >= length,\n            negatedMessage: (value, label) => `Expected ${label} to have a maximum length of \\`${length - 1}\\`, got \\`${value.length}\\``\n        });\n    }\n    /**\n    Test an array to have a maximum length.\n\n    @param length - The maximum length of the array.\n    */\n    maxLength(length) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to have a maximum length of \\`${length}\\`, got \\`${value.length}\\``,\n            validator: value => value.length <= length,\n            negatedMessage: (value, label) => `Expected ${label} to have a minimum length of \\`${length + 1}\\`, got \\`${value.length}\\``\n        });\n    }\n    /**\n    Test an array to start with a specific value. The value is tested by identity, not structure.\n\n    @param searchElement - The value that should be the start of the array.\n    */\n    startsWith(searchElement) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to start with \\`${searchElement}\\`, got \\`${value[0]}\\``,\n            validator: value => value[0] === searchElement\n        });\n    }\n    /**\n    Test an array to end with a specific value. The value is tested by identity, not structure.\n\n    @param searchElement - The value that should be the end of the array.\n    */\n    endsWith(searchElement) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to end with \\`${searchElement}\\`, got \\`${value[value.length - 1]}\\``,\n            validator: value => value[value.length - 1] === searchElement\n        });\n    }\n    /**\n    Test an array to include all the provided elements. The values are tested by identity, not structure.\n\n    @param searchElements - The values that should be included in the array.\n    */\n    includes(...searchElements) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to include all elements of \\`${JSON.stringify(searchElements)}\\`, got \\`${JSON.stringify(value)}\\``,\n            validator: value => searchElements.every(element => value.includes(element))\n        });\n    }\n    /**\n    Test an array to include any of the provided elements. The values are tested by identity, not structure.\n\n    @param searchElements - The values that should be included in the array.\n    */\n    includesAny(...searchElements) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to include any element of \\`${JSON.stringify(searchElements)}\\`, got \\`${JSON.stringify(value)}\\``,\n            validator: value => searchElements.some(element => value.includes(element))\n        });\n    }\n    /**\n    Test an array to be empty.\n    */\n    get empty() {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be empty, got \\`${JSON.stringify(value)}\\``,\n            validator: value => value.length === 0\n        });\n    }\n    /**\n    Test an array to be not empty.\n    */\n    get nonEmpty() {\n        return this.addValidator({\n            message: (_, label) => `Expected ${label} to not be empty`,\n            validator: value => value.length > 0\n        });\n    }\n    /**\n    Test an array to be deeply equal to the provided array.\n\n    @param expected - Expected value to match.\n    */\n    deepEqual(expected) {\n        return this.addValidator({\n            message: (value, label) => `Expected ${label} to be deeply equal to \\`${JSON.stringify(expected)}\\`, got \\`${JSON.stringify(value)}\\``,\n            validator: value => isEqual(value, expected)\n        });\n    }\n    /**\n    Test all elements in the array to match to provided predicate.\n\n    @param predicate - The predicate that should be applied against every individual item.\n\n    @example\n    ```\n    ow(['a', 1], ow.array.ofType(ow.any(ow.string, ow.number)));\n    ```\n    */\n    ofType(predicate) {\n        // TODO [typescript@>=5] If higher-kinded types are supported natively by typescript, refactor `addValidator` to use them to avoid the usage of `any`. Otherwise, bump or remove this TODO.\n        return this.addValidator({\n            message: (_, label, error) => `(${label}) ${error}`,\n            validator: value => of_type_1.default(value, 'values', predicate)\n        });\n    }\n    /**\n    Test if the elements in the array exactly matches the elements placed at the same indices in the predicates array.\n\n    @param predicates - Predicates to test the array against. Describes what the tested array should look like.\n\n    @example\n    ```\n    ow(['1', 2], ow.array.exactShape([ow.string, ow.number]));\n    ```\n    */\n    exactShape(predicates) {\n        const shape = predicates;\n        return this.addValidator({\n            message: (_, label, message) => `${message.replace('Expected', 'Expected element')} in ${label}`,\n            validator: object => match_shape_1.exact(object, shape, undefined, true)\n        });\n    }\n}\nexports.ArrayPredicate = ArrayPredicate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}