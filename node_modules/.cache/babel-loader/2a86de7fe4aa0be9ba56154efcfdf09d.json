{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ErrorPredicate = void 0;\n\nconst predicate_1 = require(\"./predicate\");\n\nclass ErrorPredicate extends predicate_1.Predicate {\n  /**\n  @hidden\n  */\n  constructor(options) {\n    super('error', options);\n  }\n  /**\n  Test an error to have a specific name.\n   @param expected - Expected name of the Error.\n  */\n\n\n  name(expected) {\n    return this.addValidator({\n      message: (error, label) => `Expected ${label} to have name \\`${expected}\\`, got \\`${error.name}\\``,\n      validator: error => error.name === expected\n    });\n  }\n  /**\n  Test an error to have a specific message.\n   @param expected - Expected message of the Error.\n  */\n\n\n  message(expected) {\n    return this.addValidator({\n      message: (error, label) => `Expected ${label} message to be \\`${expected}\\`, got \\`${error.message}\\``,\n      validator: error => error.message === expected\n    });\n  }\n  /**\n  Test the error message to include a specific message.\n   @param message - Message that should be included in the error.\n  */\n\n\n  messageIncludes(message) {\n    return this.addValidator({\n      message: (error, label) => `Expected ${label} message to include \\`${message}\\`, got \\`${error.message}\\``,\n      validator: error => error.message.includes(message)\n    });\n  }\n  /**\n  Test the error object to have specific keys.\n   @param keys - One or more keys which should be part of the error object.\n  */\n\n\n  hasKeys() {\n    for (var _len = arguments.length, keys = new Array(_len), _key = 0; _key < _len; _key++) {\n      keys[_key] = arguments[_key];\n    }\n\n    return this.addValidator({\n      message: (_, label) => `Expected ${label} message to have keys \\`${keys.join('`, `')}\\``,\n      validator: error => keys.every(key => Object.prototype.hasOwnProperty.call(error, key))\n    });\n  }\n  /**\n  Test an error to be of a specific instance type.\n   @param instance - The expected instance type of the error.\n  */\n\n\n  instanceOf(instance) {\n    return this.addValidator({\n      message: (error, label) => `Expected ${label} \\`${error.name}\\` to be of type \\`${instance.name}\\``,\n      validator: error => error instanceof instance\n    });\n  }\n  /**\n  Test an Error to be a TypeError.\n  */\n\n\n  get typeError() {\n    return this.instanceOf(TypeError);\n  }\n  /**\n  Test an Error to be an EvalError.\n  */\n\n\n  get evalError() {\n    return this.instanceOf(EvalError);\n  }\n  /**\n  Test an Error to be a RangeError.\n  */\n\n\n  get rangeError() {\n    return this.instanceOf(RangeError);\n  }\n  /**\n  Test an Error to be a ReferenceError.\n  */\n\n\n  get referenceError() {\n    return this.instanceOf(ReferenceError);\n  }\n  /**\n  Test an Error to be a SyntaxError.\n  */\n\n\n  get syntaxError() {\n    return this.instanceOf(SyntaxError);\n  }\n  /**\n  Test an Error to be a URIError.\n  */\n\n\n  get uriError() {\n    return this.instanceOf(URIError);\n  }\n\n}\n\nexports.ErrorPredicate = ErrorPredicate;","map":{"version":3,"names":["Object","defineProperty","exports","value","ErrorPredicate","predicate_1","require","Predicate","constructor","options","name","expected","addValidator","message","error","label","validator","messageIncludes","includes","hasKeys","keys","_","join","every","key","prototype","hasOwnProperty","call","instanceOf","instance","typeError","TypeError","evalError","EvalError","rangeError","RangeError","referenceError","ReferenceError","syntaxError","SyntaxError","uriError","URIError"],"sources":["C:/Users/ROUSER6/node_modules/ow/dist/predicates/error.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ErrorPredicate = void 0;\nconst predicate_1 = require(\"./predicate\");\nclass ErrorPredicate extends predicate_1.Predicate {\n    /**\n    @hidden\n    */\n    constructor(options) {\n        super('error', options);\n    }\n    /**\n    Test an error to have a specific name.\n\n    @param expected - Expected name of the Error.\n    */\n    name(expected) {\n        return this.addValidator({\n            message: (error, label) => `Expected ${label} to have name \\`${expected}\\`, got \\`${error.name}\\``,\n            validator: error => error.name === expected\n        });\n    }\n    /**\n    Test an error to have a specific message.\n\n    @param expected - Expected message of the Error.\n    */\n    message(expected) {\n        return this.addValidator({\n            message: (error, label) => `Expected ${label} message to be \\`${expected}\\`, got \\`${error.message}\\``,\n            validator: error => error.message === expected\n        });\n    }\n    /**\n    Test the error message to include a specific message.\n\n    @param message - Message that should be included in the error.\n    */\n    messageIncludes(message) {\n        return this.addValidator({\n            message: (error, label) => `Expected ${label} message to include \\`${message}\\`, got \\`${error.message}\\``,\n            validator: error => error.message.includes(message)\n        });\n    }\n    /**\n    Test the error object to have specific keys.\n\n    @param keys - One or more keys which should be part of the error object.\n    */\n    hasKeys(...keys) {\n        return this.addValidator({\n            message: (_, label) => `Expected ${label} message to have keys \\`${keys.join('`, `')}\\``,\n            validator: error => keys.every(key => Object.prototype.hasOwnProperty.call(error, key))\n        });\n    }\n    /**\n    Test an error to be of a specific instance type.\n\n    @param instance - The expected instance type of the error.\n    */\n    instanceOf(instance) {\n        return this.addValidator({\n            message: (error, label) => `Expected ${label} \\`${error.name}\\` to be of type \\`${instance.name}\\``,\n            validator: error => error instanceof instance\n        });\n    }\n    /**\n    Test an Error to be a TypeError.\n    */\n    get typeError() {\n        return this.instanceOf(TypeError);\n    }\n    /**\n    Test an Error to be an EvalError.\n    */\n    get evalError() {\n        return this.instanceOf(EvalError);\n    }\n    /**\n    Test an Error to be a RangeError.\n    */\n    get rangeError() {\n        return this.instanceOf(RangeError);\n    }\n    /**\n    Test an Error to be a ReferenceError.\n    */\n    get referenceError() {\n        return this.instanceOf(ReferenceError);\n    }\n    /**\n    Test an Error to be a SyntaxError.\n    */\n    get syntaxError() {\n        return this.instanceOf(SyntaxError);\n    }\n    /**\n    Test an Error to be a URIError.\n    */\n    get uriError() {\n        return this.instanceOf(URIError);\n    }\n}\nexports.ErrorPredicate = ErrorPredicate;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}