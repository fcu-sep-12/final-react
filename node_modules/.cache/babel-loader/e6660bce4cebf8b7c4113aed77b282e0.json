{"ast":null,"code":"'use strict';\n\nconst Interaction = require('./Interaction');\n\nconst InteractionWebhook = require('./InteractionWebhook');\n\nconst InteractionResponses = require('./interfaces/InteractionResponses');\n\nconst {\n  MessageComponentTypes\n} = require('../util/Constants');\n/**\n * Represents a message component interaction.\n * @extends {Interaction}\n * @implements {InteractionResponses}\n */\n\n\nclass MessageComponentInteraction extends Interaction {\n  constructor(client, data) {\n    super(client, data);\n    /**\n     * The message to which the component was attached\n     * @type {Message|APIMessage}\n     */\n\n    this.message = this.channel?.messages._add(data.message) ?? data.message;\n    /**\n     * The custom id of the component which was interacted with\n     * @type {string}\n     */\n\n    this.customId = data.data.custom_id;\n    /**\n     * The type of component which was interacted with\n     * @type {string}\n     */\n\n    this.componentType = MessageComponentInteraction.resolveType(data.data.component_type);\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n\n    this.deferred = false;\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n\n    this.ephemeral = null;\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n\n    this.replied = false;\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n  /**\n   * Raw message components from the API\n   * * APIMessageButton\n   * * APIMessageSelectMenu\n   * @typedef {APIMessageButton|APIMessageSelectMenu} APIMessageActionRowComponent\n   */\n\n  /**\n   * The component which was interacted with\n   * @type {?(MessageActionRowComponent|APIMessageActionRowComponent)}\n   * @readonly\n   */\n\n\n  get component() {\n    return this.message.components.flatMap(row => row.components).find(component => (component.customId ?? component.custom_id) === this.customId) ?? null;\n  }\n  /**\n   * Resolves the type of a MessageComponent\n   * @param {MessageComponentTypeResolvable} type The type to resolve\n   * @returns {MessageComponentType}\n   * @private\n   */\n\n\n  static resolveType(type) {\n    return typeof type === 'string' ? type : MessageComponentTypes[type];\n  } // These are here only for documentation purposes - they are implemented by InteractionResponses\n\n  /* eslint-disable no-empty-function */\n\n\n  deferReply() {}\n\n  reply() {}\n\n  fetchReply() {}\n\n  editReply() {}\n\n  deleteReply() {}\n\n  followUp() {}\n\n  deferUpdate() {}\n\n  update() {}\n\n}\n\nInteractionResponses.applyToClass(MessageComponentInteraction);\nmodule.exports = MessageComponentInteraction;\n/**\n * @external APIMessageSelectMenu\n * @see {@link https://discord.com/developers/docs/interactions/message-components#select-menu-object}\n */\n\n/**\n * @external APIMessageButton\n * @see {@link https://discord.com/developers/docs/interactions/message-components#button-object}\n */","map":{"version":3,"names":["Interaction","require","InteractionWebhook","InteractionResponses","MessageComponentTypes","MessageComponentInteraction","constructor","client","data","message","channel","messages","_add","customId","custom_id","componentType","resolveType","component_type","deferred","ephemeral","replied","webhook","applicationId","token","component","components","flatMap","row","find","type","deferReply","reply","fetchReply","editReply","deleteReply","followUp","deferUpdate","update","applyToClass","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/MessageComponentInteraction.js"],"sourcesContent":["'use strict';\n\nconst Interaction = require('./Interaction');\nconst InteractionWebhook = require('./InteractionWebhook');\nconst InteractionResponses = require('./interfaces/InteractionResponses');\nconst { MessageComponentTypes } = require('../util/Constants');\n\n/**\n * Represents a message component interaction.\n * @extends {Interaction}\n * @implements {InteractionResponses}\n */\nclass MessageComponentInteraction extends Interaction {\n  constructor(client, data) {\n    super(client, data);\n\n    /**\n     * The message to which the component was attached\n     * @type {Message|APIMessage}\n     */\n    this.message = this.channel?.messages._add(data.message) ?? data.message;\n\n    /**\n     * The custom id of the component which was interacted with\n     * @type {string}\n     */\n    this.customId = data.data.custom_id;\n\n    /**\n     * The type of component which was interacted with\n     * @type {string}\n     */\n    this.componentType = MessageComponentInteraction.resolveType(data.data.component_type);\n\n    /**\n     * Whether the reply to this interaction has been deferred\n     * @type {boolean}\n     */\n    this.deferred = false;\n\n    /**\n     * Whether the reply to this interaction is ephemeral\n     * @type {?boolean}\n     */\n    this.ephemeral = null;\n\n    /**\n     * Whether this interaction has already been replied to\n     * @type {boolean}\n     */\n    this.replied = false;\n\n    /**\n     * An associated interaction webhook, can be used to further interact with this interaction\n     * @type {InteractionWebhook}\n     */\n    this.webhook = new InteractionWebhook(this.client, this.applicationId, this.token);\n  }\n\n  /**\n   * Raw message components from the API\n   * * APIMessageButton\n   * * APIMessageSelectMenu\n   * @typedef {APIMessageButton|APIMessageSelectMenu} APIMessageActionRowComponent\n   */\n\n  /**\n   * The component which was interacted with\n   * @type {?(MessageActionRowComponent|APIMessageActionRowComponent)}\n   * @readonly\n   */\n  get component() {\n    return (\n      this.message.components\n        .flatMap(row => row.components)\n        .find(component => (component.customId ?? component.custom_id) === this.customId) ?? null\n    );\n  }\n\n  /**\n   * Resolves the type of a MessageComponent\n   * @param {MessageComponentTypeResolvable} type The type to resolve\n   * @returns {MessageComponentType}\n   * @private\n   */\n  static resolveType(type) {\n    return typeof type === 'string' ? type : MessageComponentTypes[type];\n  }\n\n  // These are here only for documentation purposes - they are implemented by InteractionResponses\n  /* eslint-disable no-empty-function */\n  deferReply() {}\n  reply() {}\n  fetchReply() {}\n  editReply() {}\n  deleteReply() {}\n  followUp() {}\n  deferUpdate() {}\n  update() {}\n}\n\nInteractionResponses.applyToClass(MessageComponentInteraction);\n\nmodule.exports = MessageComponentInteraction;\n\n/**\n * @external APIMessageSelectMenu\n * @see {@link https://discord.com/developers/docs/interactions/message-components#select-menu-object}\n */\n\n/**\n * @external APIMessageButton\n * @see {@link https://discord.com/developers/docs/interactions/message-components#button-object}\n */\n"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAA3B;;AACA,MAAMC,kBAAkB,GAAGD,OAAO,CAAC,sBAAD,CAAlC;;AACA,MAAME,oBAAoB,GAAGF,OAAO,CAAC,mCAAD,CAApC;;AACA,MAAM;EAAEG;AAAF,IAA4BH,OAAO,CAAC,mBAAD,CAAzC;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,2BAAN,SAA0CL,WAA1C,CAAsD;EACpDM,WAAW,CAACC,MAAD,EAASC,IAAT,EAAe;IACxB,MAAMD,MAAN,EAAcC,IAAd;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,KAAKC,OAAL,EAAcC,QAAd,CAAuBC,IAAvB,CAA4BJ,IAAI,CAACC,OAAjC,KAA6CD,IAAI,CAACC,OAAjE;IAEA;AACJ;AACA;AACA;;IACI,KAAKI,QAAL,GAAgBL,IAAI,CAACA,IAAL,CAAUM,SAA1B;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,aAAL,GAAqBV,2BAA2B,CAACW,WAA5B,CAAwCR,IAAI,CAACA,IAAL,CAAUS,cAAlD,CAArB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,QAAL,GAAgB,KAAhB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiB,IAAjB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,KAAf;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAe,IAAInB,kBAAJ,CAAuB,KAAKK,MAA5B,EAAoC,KAAKe,aAAzC,EAAwD,KAAKC,KAA7D,CAAf;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;;EACe,IAATC,SAAS,GAAG;IACd,OACE,KAAKf,OAAL,CAAagB,UAAb,CACGC,OADH,CACWC,GAAG,IAAIA,GAAG,CAACF,UADtB,EAEGG,IAFH,CAEQJ,SAAS,IAAI,CAACA,SAAS,CAACX,QAAV,IAAsBW,SAAS,CAACV,SAAjC,MAAgD,KAAKD,QAF1E,KAEuF,IAHzF;EAKD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACoB,OAAXG,WAAW,CAACa,IAAD,EAAO;IACvB,OAAO,OAAOA,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCzB,qBAAqB,CAACyB,IAAD,CAA9D;EACD,CA3EmD,CA6EpD;;EACA;;;EACAC,UAAU,GAAG,CAAE;;EACfC,KAAK,GAAG,CAAE;;EACVC,UAAU,GAAG,CAAE;;EACfC,SAAS,GAAG,CAAE;;EACdC,WAAW,GAAG,CAAE;;EAChBC,QAAQ,GAAG,CAAE;;EACbC,WAAW,GAAG,CAAE;;EAChBC,MAAM,GAAG,CAAE;;AAtFyC;;AAyFtDlC,oBAAoB,CAACmC,YAArB,CAAkCjC,2BAAlC;AAEAkC,MAAM,CAACC,OAAP,GAAiBnC,2BAAjB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script"}