{"ast":null,"code":"'use strict';\n\nconst Action = require('./Action');\n\nconst {\n  Events\n} = require('../../util/Constants');\n\nlet deprecationEmitted = false;\n\nclass MessageCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel(data);\n\n    if (channel) {\n      const existing = channel.messages.cache.get(data.id);\n      if (existing) return {\n        message: existing\n      };\n\n      const message = channel.messages._add(data);\n\n      channel.lastMessageId = data.id;\n      /**\n       * Emitted whenever a message is created.\n       * @event Client#messageCreate\n       * @param {Message} message The created message\n       */\n\n      client.emit(Events.MESSAGE_CREATE, message);\n      /**\n       * Emitted whenever a message is created.\n       * @event Client#message\n       * @param {Message} message The created message\n       * @deprecated Use {@link Client#messageCreate} instead\n       */\n\n      if (client.emit('message', message) && !deprecationEmitted) {\n        deprecationEmitted = true;\n        process.emitWarning('The message event is deprecated. Use messageCreate instead', 'DeprecationWarning');\n      }\n\n      return {\n        message\n      };\n    }\n\n    return {};\n  }\n\n}\n\nmodule.exports = MessageCreateAction;","map":{"version":3,"names":["Action","require","Events","deprecationEmitted","MessageCreateAction","handle","data","client","channel","getChannel","existing","messages","cache","get","id","message","_add","lastMessageId","emit","MESSAGE_CREATE","process","emitWarning","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/actions/MessageCreate.js"],"sourcesContent":["'use strict';\n\nconst Action = require('./Action');\nconst { Events } = require('../../util/Constants');\n\nlet deprecationEmitted = false;\n\nclass MessageCreateAction extends Action {\n  handle(data) {\n    const client = this.client;\n    const channel = this.getChannel(data);\n    if (channel) {\n      const existing = channel.messages.cache.get(data.id);\n      if (existing) return { message: existing };\n      const message = channel.messages._add(data);\n      channel.lastMessageId = data.id;\n\n      /**\n       * Emitted whenever a message is created.\n       * @event Client#messageCreate\n       * @param {Message} message The created message\n       */\n      client.emit(Events.MESSAGE_CREATE, message);\n\n      /**\n       * Emitted whenever a message is created.\n       * @event Client#message\n       * @param {Message} message The created message\n       * @deprecated Use {@link Client#messageCreate} instead\n       */\n      if (client.emit('message', message) && !deprecationEmitted) {\n        deprecationEmitted = true;\n        process.emitWarning('The message event is deprecated. Use messageCreate instead', 'DeprecationWarning');\n      }\n\n      return { message };\n    }\n\n    return {};\n  }\n}\n\nmodule.exports = MessageCreateAction;\n"],"mappings":"AAAA;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAM;EAAEC;AAAF,IAAaD,OAAO,CAAC,sBAAD,CAA1B;;AAEA,IAAIE,kBAAkB,GAAG,KAAzB;;AAEA,MAAMC,mBAAN,SAAkCJ,MAAlC,CAAyC;EACvCK,MAAM,CAACC,IAAD,EAAO;IACX,MAAMC,MAAM,GAAG,KAAKA,MAApB;IACA,MAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBH,IAAhB,CAAhB;;IACA,IAAIE,OAAJ,EAAa;MACX,MAAME,QAAQ,GAAGF,OAAO,CAACG,QAAR,CAAiBC,KAAjB,CAAuBC,GAAvB,CAA2BP,IAAI,CAACQ,EAAhC,CAAjB;MACA,IAAIJ,QAAJ,EAAc,OAAO;QAAEK,OAAO,EAAEL;MAAX,CAAP;;MACd,MAAMK,OAAO,GAAGP,OAAO,CAACG,QAAR,CAAiBK,IAAjB,CAAsBV,IAAtB,CAAhB;;MACAE,OAAO,CAACS,aAAR,GAAwBX,IAAI,CAACQ,EAA7B;MAEA;AACN;AACA;AACA;AACA;;MACMP,MAAM,CAACW,IAAP,CAAYhB,MAAM,CAACiB,cAAnB,EAAmCJ,OAAnC;MAEA;AACN;AACA;AACA;AACA;AACA;;MACM,IAAIR,MAAM,CAACW,IAAP,CAAY,SAAZ,EAAuBH,OAAvB,KAAmC,CAACZ,kBAAxC,EAA4D;QAC1DA,kBAAkB,GAAG,IAArB;QACAiB,OAAO,CAACC,WAAR,CAAoB,4DAApB,EAAkF,oBAAlF;MACD;;MAED,OAAO;QAAEN;MAAF,CAAP;IACD;;IAED,OAAO,EAAP;EACD;;AAhCsC;;AAmCzCO,MAAM,CAACC,OAAP,GAAiBnB,mBAAjB"},"metadata":{},"sourceType":"script"}