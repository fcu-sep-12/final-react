{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst {\n  Error,\n  TypeError\n} = require('../errors');\n/**\n * Represents the voice state for a Guild Member.\n */\n\n\nclass VoiceState extends Base {\n  /**\n   * @param {Guild} guild The guild the voice state is part of\n   * @param {APIVoiceState} data The data for the voice state\n   */\n  constructor(guild, data) {\n    super(guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n    /**\n     * The id of the member of this voice state\n     * @type {Snowflake}\n     */\n\n    this.id = data.user_id;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * Whether this member is deafened server-wide\n     * @type {?boolean}\n     */\n    this.serverDeaf = data.deaf ?? null;\n    /**\n     * Whether this member is muted server-wide\n     * @type {?boolean}\n     */\n\n    this.serverMute = data.mute ?? null;\n    /**\n     * Whether this member is self-deafened\n     * @type {?boolean}\n     */\n\n    this.selfDeaf = data.self_deaf ?? null;\n    /**\n     * Whether this member is self-muted\n     * @type {?boolean}\n     */\n\n    this.selfMute = data.self_mute ?? null;\n    /**\n     * Whether this member's camera is enabled\n     * @type {?boolean}\n     */\n\n    this.selfVideo = data.self_video ?? null;\n    /**\n     * The session id for this member's connection\n     * @type {?string}\n     */\n\n    this.sessionId = data.session_id ?? null;\n    /**\n     * Whether this member is streaming using \"Screen Share\"\n     * @type {boolean}\n     */\n\n    this.streaming = data.self_stream ?? false;\n    /**\n     * The {@link VoiceChannel} or {@link StageChannel} id the member is in\n     * @type {?Snowflake}\n     */\n\n    this.channelId = data.channel_id ?? null;\n    /**\n     * Whether this member is suppressed from speaking. This property is specific to stage channels only.\n     * @type {boolean}\n     */\n\n    this.suppress = data.suppress;\n    /**\n     * The time at which the member requested to speak. This property is specific to stage channels only.\n     * @type {?number}\n     */\n\n    this.requestToSpeakTimestamp = data.request_to_speak_timestamp ? new Date(data.request_to_speak_timestamp).getTime() : null;\n    return this;\n  }\n  /**\n   * The member that this voice state belongs to\n   * @type {?GuildMember}\n   * @readonly\n   */\n\n\n  get member() {\n    return this.guild.members.cache.get(this.id) ?? null;\n  }\n  /**\n   * The channel that the member is connected to\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n\n\n  get channel() {\n    return this.guild.channels.cache.get(this.channelId) ?? null;\n  }\n  /**\n   * Whether this member is either self-deafened or server-deafened\n   * @type {?boolean}\n   * @readonly\n   */\n\n\n  get deaf() {\n    return this.serverDeaf || this.selfDeaf;\n  }\n  /**\n   * Whether this member is either self-muted or server-muted\n   * @type {?boolean}\n   * @readonly\n   */\n\n\n  get mute() {\n    return this.serverMute || this.selfMute;\n  }\n  /**\n   * Mutes/unmutes the member of this voice state.\n   * @param {boolean} mute Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  setMute(mute, reason) {\n    return this.member?.edit({\n      mute\n    }, reason) ?? Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n  /**\n   * Deafens/undeafens the member of this voice state.\n   * @param {boolean} deaf Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  setDeaf(deaf, reason) {\n    return this.member?.edit({\n      deaf\n    }, reason) ?? Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n  /**\n   * Disconnects the member from the channel.\n   * @param {string} [reason] Reason for disconnecting the member from the channel\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  disconnect(reason) {\n    return this.setChannel(null, reason);\n  }\n  /**\n   * Moves the member to a different channel, or disconnects them from the one they're in.\n   * @param {VoiceChannelResolvable|null} channel Channel to move the member to, or `null` if you want to disconnect\n   * them from voice.\n   * @param {string} [reason] Reason for moving member to another channel or disconnecting\n   * @returns {Promise<GuildMember>}\n   */\n\n\n  setChannel(channel, reason) {\n    return this.member?.edit({\n      channel\n    }, reason) ?? Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n  /**\n   * Toggles the request to speak in the channel.\n   * Only applicable for stage channels and for the client's own voice state.\n   * @param {boolean} request Whether or not the client is requesting to become a speaker.\n   * @example\n   * // Making the client request to speak in a stage channel (raise its hand)\n   * guild.me.voice.setRequestToSpeak(true);\n   * @example\n   * // Making the client cancel a request to speak\n   * guild.me.voice.setRequestToSpeak(false);\n   * @returns {Promise<void>}\n   */\n\n\n  async setRequestToSpeak(request) {\n    if (this.channel?.type !== 'GUILD_STAGE_VOICE') throw new Error('VOICE_NOT_STAGE_CHANNEL');\n    if (this.client.user.id !== this.id) throw new Error('VOICE_STATE_NOT_OWN');\n    await this.client.api.guilds(this.guild.id, 'voice-states', '@me').patch({\n      data: {\n        channel_id: this.channelId,\n        request_to_speak_timestamp: request ? new Date().toISOString() : null\n      }\n    });\n  }\n  /**\n   * Suppress/unsuppress the user. Only applicable for stage channels.\n   * @param {boolean} suppressed - Whether or not the user should be suppressed.\n   * @example\n   * // Making the client a speaker\n   * guild.me.voice.setSuppressed(false);\n   * @example\n   * // Making the client an audience member\n   * guild.me.voice.setSuppressed(true);\n   * @example\n   * // Inviting another user to speak\n   * voiceState.setSuppressed(false);\n   * @example\n   * // Moving another user to the audience, or cancelling their invite to speak\n   * voiceState.setSuppressed(true);\n   * @returns {Promise<void>}\n   */\n\n\n  async setSuppressed(suppressed) {\n    if (typeof suppressed !== 'boolean') throw new TypeError('VOICE_STATE_INVALID_TYPE', 'suppressed');\n    if (this.channel?.type !== 'GUILD_STAGE_VOICE') throw new Error('VOICE_NOT_STAGE_CHANNEL');\n    const target = this.client.user.id === this.id ? '@me' : this.id;\n    await this.client.api.guilds(this.guild.id, 'voice-states', target).patch({\n      data: {\n        channel_id: this.channelId,\n        suppress: suppressed\n      }\n    });\n  }\n\n  toJSON() {\n    return super.toJSON({\n      id: true,\n      serverDeaf: true,\n      serverMute: true,\n      selfDeaf: true,\n      selfMute: true,\n      sessionId: true,\n      channelId: 'channel'\n    });\n  }\n\n}\n\nmodule.exports = VoiceState;\n/**\n * @external APIVoiceState\n * @see {@link https://discord.com/developers/docs/resources/voice#voice-state-object}\n */","map":{"version":3,"names":["Base","require","Error","TypeError","VoiceState","constructor","guild","data","client","id","user_id","_patch","serverDeaf","deaf","serverMute","mute","selfDeaf","self_deaf","selfMute","self_mute","selfVideo","self_video","sessionId","session_id","streaming","self_stream","channelId","channel_id","suppress","requestToSpeakTimestamp","request_to_speak_timestamp","Date","getTime","member","members","cache","get","channel","channels","setMute","reason","edit","Promise","reject","setDeaf","disconnect","setChannel","setRequestToSpeak","request","type","user","api","guilds","patch","toISOString","setSuppressed","suppressed","target","toJSON","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/VoiceState.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst { Error, TypeError } = require('../errors');\n\n/**\n * Represents the voice state for a Guild Member.\n */\nclass VoiceState extends Base {\n  /**\n   * @param {Guild} guild The guild the voice state is part of\n   * @param {APIVoiceState} data The data for the voice state\n   */\n  constructor(guild, data) {\n    super(guild.client);\n    /**\n     * The guild of this voice state\n     * @type {Guild}\n     */\n    this.guild = guild;\n    /**\n     * The id of the member of this voice state\n     * @type {Snowflake}\n     */\n    this.id = data.user_id;\n    this._patch(data);\n  }\n\n  _patch(data) {\n    /**\n     * Whether this member is deafened server-wide\n     * @type {?boolean}\n     */\n    this.serverDeaf = data.deaf ?? null;\n    /**\n     * Whether this member is muted server-wide\n     * @type {?boolean}\n     */\n    this.serverMute = data.mute ?? null;\n    /**\n     * Whether this member is self-deafened\n     * @type {?boolean}\n     */\n    this.selfDeaf = data.self_deaf ?? null;\n    /**\n     * Whether this member is self-muted\n     * @type {?boolean}\n     */\n    this.selfMute = data.self_mute ?? null;\n    /**\n     * Whether this member's camera is enabled\n     * @type {?boolean}\n     */\n    this.selfVideo = data.self_video ?? null;\n    /**\n     * The session id for this member's connection\n     * @type {?string}\n     */\n    this.sessionId = data.session_id ?? null;\n    /**\n     * Whether this member is streaming using \"Screen Share\"\n     * @type {boolean}\n     */\n    this.streaming = data.self_stream ?? false;\n    /**\n     * The {@link VoiceChannel} or {@link StageChannel} id the member is in\n     * @type {?Snowflake}\n     */\n    this.channelId = data.channel_id ?? null;\n    /**\n     * Whether this member is suppressed from speaking. This property is specific to stage channels only.\n     * @type {boolean}\n     */\n    this.suppress = data.suppress;\n    /**\n     * The time at which the member requested to speak. This property is specific to stage channels only.\n     * @type {?number}\n     */\n    this.requestToSpeakTimestamp = data.request_to_speak_timestamp\n      ? new Date(data.request_to_speak_timestamp).getTime()\n      : null;\n    return this;\n  }\n\n  /**\n   * The member that this voice state belongs to\n   * @type {?GuildMember}\n   * @readonly\n   */\n  get member() {\n    return this.guild.members.cache.get(this.id) ?? null;\n  }\n\n  /**\n   * The channel that the member is connected to\n   * @type {?(VoiceChannel|StageChannel)}\n   * @readonly\n   */\n  get channel() {\n    return this.guild.channels.cache.get(this.channelId) ?? null;\n  }\n\n  /**\n   * Whether this member is either self-deafened or server-deafened\n   * @type {?boolean}\n   * @readonly\n   */\n  get deaf() {\n    return this.serverDeaf || this.selfDeaf;\n  }\n\n  /**\n   * Whether this member is either self-muted or server-muted\n   * @type {?boolean}\n   * @readonly\n   */\n  get mute() {\n    return this.serverMute || this.selfMute;\n  }\n\n  /**\n   * Mutes/unmutes the member of this voice state.\n   * @param {boolean} mute Whether or not the member should be muted\n   * @param {string} [reason] Reason for muting or unmuting\n   * @returns {Promise<GuildMember>}\n   */\n  setMute(mute, reason) {\n    return this.member?.edit({ mute }, reason) ?? Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Deafens/undeafens the member of this voice state.\n   * @param {boolean} deaf Whether or not the member should be deafened\n   * @param {string} [reason] Reason for deafening or undeafening\n   * @returns {Promise<GuildMember>}\n   */\n  setDeaf(deaf, reason) {\n    return this.member?.edit({ deaf }, reason) ?? Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Disconnects the member from the channel.\n   * @param {string} [reason] Reason for disconnecting the member from the channel\n   * @returns {Promise<GuildMember>}\n   */\n  disconnect(reason) {\n    return this.setChannel(null, reason);\n  }\n\n  /**\n   * Moves the member to a different channel, or disconnects them from the one they're in.\n   * @param {VoiceChannelResolvable|null} channel Channel to move the member to, or `null` if you want to disconnect\n   * them from voice.\n   * @param {string} [reason] Reason for moving member to another channel or disconnecting\n   * @returns {Promise<GuildMember>}\n   */\n  setChannel(channel, reason) {\n    return this.member?.edit({ channel }, reason) ?? Promise.reject(new Error('VOICE_STATE_UNCACHED_MEMBER'));\n  }\n\n  /**\n   * Toggles the request to speak in the channel.\n   * Only applicable for stage channels and for the client's own voice state.\n   * @param {boolean} request Whether or not the client is requesting to become a speaker.\n   * @example\n   * // Making the client request to speak in a stage channel (raise its hand)\n   * guild.me.voice.setRequestToSpeak(true);\n   * @example\n   * // Making the client cancel a request to speak\n   * guild.me.voice.setRequestToSpeak(false);\n   * @returns {Promise<void>}\n   */\n  async setRequestToSpeak(request) {\n    if (this.channel?.type !== 'GUILD_STAGE_VOICE') throw new Error('VOICE_NOT_STAGE_CHANNEL');\n\n    if (this.client.user.id !== this.id) throw new Error('VOICE_STATE_NOT_OWN');\n\n    await this.client.api.guilds(this.guild.id, 'voice-states', '@me').patch({\n      data: {\n        channel_id: this.channelId,\n        request_to_speak_timestamp: request ? new Date().toISOString() : null,\n      },\n    });\n  }\n\n  /**\n   * Suppress/unsuppress the user. Only applicable for stage channels.\n   * @param {boolean} suppressed - Whether or not the user should be suppressed.\n   * @example\n   * // Making the client a speaker\n   * guild.me.voice.setSuppressed(false);\n   * @example\n   * // Making the client an audience member\n   * guild.me.voice.setSuppressed(true);\n   * @example\n   * // Inviting another user to speak\n   * voiceState.setSuppressed(false);\n   * @example\n   * // Moving another user to the audience, or cancelling their invite to speak\n   * voiceState.setSuppressed(true);\n   * @returns {Promise<void>}\n   */\n  async setSuppressed(suppressed) {\n    if (typeof suppressed !== 'boolean') throw new TypeError('VOICE_STATE_INVALID_TYPE', 'suppressed');\n\n    if (this.channel?.type !== 'GUILD_STAGE_VOICE') throw new Error('VOICE_NOT_STAGE_CHANNEL');\n\n    const target = this.client.user.id === this.id ? '@me' : this.id;\n\n    await this.client.api.guilds(this.guild.id, 'voice-states', target).patch({\n      data: {\n        channel_id: this.channelId,\n        suppress: suppressed,\n      },\n    });\n  }\n\n  toJSON() {\n    return super.toJSON({\n      id: true,\n      serverDeaf: true,\n      serverMute: true,\n      selfDeaf: true,\n      selfMute: true,\n      sessionId: true,\n      channelId: 'channel',\n    });\n  }\n}\n\nmodule.exports = VoiceState;\n\n/**\n * @external APIVoiceState\n * @see {@link https://discord.com/developers/docs/resources/voice#voice-state-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}