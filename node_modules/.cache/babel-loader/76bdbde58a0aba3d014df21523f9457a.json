{"ast":null,"code":"'use strict';\n\nconst CachedManager = require('./CachedManager');\n\nconst {\n  TypeError,\n  Error\n} = require('../errors');\n\nconst StageInstance = require('../structures/StageInstance');\n\nconst {\n  PrivacyLevels\n} = require('../util/Constants');\n/**\n * Manages API methods for {@link StageInstance} objects and holds their cache.\n * @extends {CachedManager}\n */\n\n\nclass StageInstanceManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, StageInstance, iterable);\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n  }\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, StageInstance>}\n   * @name StageInstanceManager#cache\n   */\n\n  /**\n   * Options used to create a stage instance.\n   * @typedef {Object} StageInstanceCreateOptions\n   * @property {string} topic The topic of the stage instance\n   * @property {PrivacyLevel|number} [privacyLevel] The privacy level of the stage instance\n   */\n\n  /**\n   * Creates a new stage instance.\n   * @param {StageChannel|Snowflake} channel The stage channel to associate the created stage instance to\n   * @param {StageInstanceCreateOptions} options The options to create the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Create a stage instance\n   * guild.stageInstances.create('1234567890123456789', {\n   *  topic: 'A very creative topic',\n   *  privacyLevel: 'GUILD_ONLY'\n   * })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n\n\n  async create(channel, options) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new Error('STAGE_CHANNEL_RESOLVE');\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    let {\n      topic,\n      privacyLevel\n    } = options;\n    if (privacyLevel) privacyLevel = typeof privacyLevel === 'number' ? privacyLevel : PrivacyLevels[privacyLevel];\n    const data = await this.client.api['stage-instances'].post({\n      data: {\n        channel_id: channelId,\n        topic,\n        privacy_level: privacyLevel\n      }\n    });\n    return this._add(data);\n  }\n  /**\n   * Fetches the stage instance associated with a stage channel, if it exists.\n   * @param {StageChannel|Snowflake} channel The stage channel whose associated stage instance is to be fetched\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Fetch a stage instance\n   * guild.stageInstances.fetch('1234567890123456789')\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n\n\n  async fetch(channel) {\n    let {\n      cache = true,\n      force = false\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new Error('STAGE_CHANNEL_RESOLVE');\n\n    if (!force) {\n      const existing = this.cache.find(stageInstance => stageInstance.channelId === channelId);\n      if (existing) return existing;\n    }\n\n    const data = await this.client.api('stage-instances', channelId).get();\n    return this._add(data, cache);\n  }\n  /**\n   * Options used to edit an existing stage instance.\n   * @typedef {Object} StageInstanceEditOptions\n   * @property {string} [topic] The new topic of the stage instance\n   * @property {PrivacyLevel|number} [privacyLevel] The new privacy level of the stage instance\n   */\n\n  /**\n   * Edits an existing stage instance.\n   * @param {StageChannel|Snowflake} channel The stage channel whose associated stage instance is to be edited\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * guild.stageInstances.edit('1234567890123456789', { topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n\n\n  async edit(channel, options) {\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new Error('STAGE_CHANNEL_RESOLVE');\n    let {\n      topic,\n      privacyLevel\n    } = options;\n    if (privacyLevel) privacyLevel = typeof privacyLevel === 'number' ? privacyLevel : PrivacyLevels[privacyLevel];\n    const data = await this.client.api('stage-instances', channelId).patch({\n      data: {\n        topic,\n        privacy_level: privacyLevel\n      }\n    });\n\n    if (this.cache.has(data.id)) {\n      const clone = this.cache.get(data.id)._clone();\n\n      clone._patch(data);\n\n      return clone;\n    }\n\n    return this._add(data);\n  }\n  /**\n   * Deletes an existing stage instance.\n   * @param {StageChannel|Snowflake} channel The stage channel whose associated stage instance is to be deleted\n   * @returns {Promise<void>}\n   */\n\n\n  async delete(channel) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new Error('STAGE_CHANNEL_RESOLVE');\n    await this.client.api('stage-instances', channelId).delete();\n  }\n\n}\n\nmodule.exports = StageInstanceManager;","map":{"version":3,"names":["CachedManager","require","TypeError","Error","StageInstance","PrivacyLevels","StageInstanceManager","constructor","guild","iterable","client","create","channel","options","channelId","channels","resolveId","topic","privacyLevel","data","api","post","channel_id","privacy_level","_add","fetch","cache","force","existing","find","stageInstance","get","edit","patch","has","id","clone","_clone","_patch","delete","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/StageInstanceManager.js"],"sourcesContent":["'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst { TypeError, Error } = require('../errors');\nconst StageInstance = require('../structures/StageInstance');\nconst { PrivacyLevels } = require('../util/Constants');\n\n/**\n * Manages API methods for {@link StageInstance} objects and holds their cache.\n * @extends {CachedManager}\n */\nclass StageInstanceManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, StageInstance, iterable);\n\n    /**\n     * The guild this manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<Snowflake, StageInstance>}\n   * @name StageInstanceManager#cache\n   */\n\n  /**\n   * Options used to create a stage instance.\n   * @typedef {Object} StageInstanceCreateOptions\n   * @property {string} topic The topic of the stage instance\n   * @property {PrivacyLevel|number} [privacyLevel] The privacy level of the stage instance\n   */\n\n  /**\n   * Creates a new stage instance.\n   * @param {StageChannel|Snowflake} channel The stage channel to associate the created stage instance to\n   * @param {StageInstanceCreateOptions} options The options to create the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Create a stage instance\n   * guild.stageInstances.create('1234567890123456789', {\n   *  topic: 'A very creative topic',\n   *  privacyLevel: 'GUILD_ONLY'\n   * })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async create(channel, options) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new Error('STAGE_CHANNEL_RESOLVE');\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    let { topic, privacyLevel } = options;\n\n    if (privacyLevel) privacyLevel = typeof privacyLevel === 'number' ? privacyLevel : PrivacyLevels[privacyLevel];\n\n    const data = await this.client.api['stage-instances'].post({\n      data: {\n        channel_id: channelId,\n        topic,\n        privacy_level: privacyLevel,\n      },\n    });\n\n    return this._add(data);\n  }\n\n  /**\n   * Fetches the stage instance associated with a stage channel, if it exists.\n   * @param {StageChannel|Snowflake} channel The stage channel whose associated stage instance is to be fetched\n   * @param {BaseFetchOptions} [options] Additional options for this fetch\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Fetch a stage instance\n   * guild.stageInstances.fetch('1234567890123456789')\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async fetch(channel, { cache = true, force = false } = {}) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new Error('STAGE_CHANNEL_RESOLVE');\n\n    if (!force) {\n      const existing = this.cache.find(stageInstance => stageInstance.channelId === channelId);\n      if (existing) return existing;\n    }\n\n    const data = await this.client.api('stage-instances', channelId).get();\n    return this._add(data, cache);\n  }\n\n  /**\n   * Options used to edit an existing stage instance.\n   * @typedef {Object} StageInstanceEditOptions\n   * @property {string} [topic] The new topic of the stage instance\n   * @property {PrivacyLevel|number} [privacyLevel] The new privacy level of the stage instance\n   */\n\n  /**\n   * Edits an existing stage instance.\n   * @param {StageChannel|Snowflake} channel The stage channel whose associated stage instance is to be edited\n   * @param {StageInstanceEditOptions} options The options to edit the stage instance\n   * @returns {Promise<StageInstance>}\n   * @example\n   * // Edit a stage instance\n   * guild.stageInstances.edit('1234567890123456789', { topic: 'new topic' })\n   *  .then(stageInstance => console.log(stageInstance))\n   *  .catch(console.error);\n   */\n  async edit(channel, options) {\n    if (typeof options !== 'object') throw new TypeError('INVALID_TYPE', 'options', 'object', true);\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new Error('STAGE_CHANNEL_RESOLVE');\n\n    let { topic, privacyLevel } = options;\n\n    if (privacyLevel) privacyLevel = typeof privacyLevel === 'number' ? privacyLevel : PrivacyLevels[privacyLevel];\n\n    const data = await this.client.api('stage-instances', channelId).patch({\n      data: {\n        topic,\n        privacy_level: privacyLevel,\n      },\n    });\n\n    if (this.cache.has(data.id)) {\n      const clone = this.cache.get(data.id)._clone();\n      clone._patch(data);\n      return clone;\n    }\n\n    return this._add(data);\n  }\n\n  /**\n   * Deletes an existing stage instance.\n   * @param {StageChannel|Snowflake} channel The stage channel whose associated stage instance is to be deleted\n   * @returns {Promise<void>}\n   */\n  async delete(channel) {\n    const channelId = this.guild.channels.resolveId(channel);\n    if (!channelId) throw new Error('STAGE_CHANNEL_RESOLVE');\n\n    await this.client.api('stage-instances', channelId).delete();\n  }\n}\n\nmodule.exports = StageInstanceManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}