{"ast":null,"code":"'use strict';\n\nconst BaseMessageComponent = require('./BaseMessageComponent');\n\nconst {\n  RangeError\n} = require('../errors');\n\nconst {\n  MessageButtonStyles,\n  MessageComponentTypes\n} = require('../util/Constants');\n\nconst Util = require('../util/Util');\n/**\n * Represents a button message component.\n * @extends {BaseMessageComponent}\n */\n\n\nclass MessageButton extends BaseMessageComponent {\n  /**\n   * @typedef {BaseMessageComponentOptions} MessageButtonOptions\n   * @property {string} [label] The text to be displayed on this button\n   * @property {string} [customId] A unique string to be sent in the interaction when clicked\n   * @property {MessageButtonStyleResolvable} [style] The style of this button\n   * @property {EmojiIdentifierResolvable} [emoji] The emoji to be displayed to the left of the text\n   * @property {string} [url] Optional URL for link-style buttons\n   * @property {boolean} [disabled=false] Disables the button to prevent interactions\n   */\n\n  /**\n   * @param {MessageButton|MessageButtonOptions} [data={}] MessageButton to clone or raw data\n   */\n  constructor() {\n    let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super({\n      type: 'BUTTON'\n    });\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The text to be displayed on this button\n     * @type {?string}\n     */\n    this.label = data.label ?? null;\n    /**\n     * A unique string to be sent in the interaction when clicked\n     * @type {?string}\n     */\n\n    this.customId = data.custom_id ?? data.customId ?? null;\n    /**\n     * The style of this button\n     * @type {?MessageButtonStyle}\n     */\n\n    this.style = data.style ? MessageButton.resolveStyle(data.style) : null;\n    /**\n     * Emoji for this button\n     * @type {?RawEmoji}\n     */\n\n    this.emoji = data.emoji ? Util.resolvePartialEmoji(data.emoji) : null;\n    /**\n     * The URL this button links to, if it is a Link style button\n     * @type {?string}\n     */\n\n    this.url = data.url ?? null;\n    /**\n     * Whether this button is currently disabled\n     * @type {boolean}\n     */\n\n    this.disabled = data.disabled ?? false;\n  }\n  /**\n   * Sets the custom id for this button\n   * @param {string} customId A unique string to be sent in the interaction when clicked\n   * @returns {MessageButton}\n   */\n\n\n  setCustomId(customId) {\n    this.customId = Util.verifyString(customId, RangeError, 'BUTTON_CUSTOM_ID');\n    return this;\n  }\n  /**\n   * Sets the interactive status of the button\n   * @param {boolean} [disabled=true] Whether this button should be disabled\n   * @returns {MessageButton}\n   */\n\n\n  setDisabled() {\n    let disabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    this.disabled = disabled;\n    return this;\n  }\n  /**\n   * Set the emoji of this button\n   * @param {EmojiIdentifierResolvable} emoji The emoji to be displayed on this button\n   * @returns {MessageButton}\n   */\n\n\n  setEmoji(emoji) {\n    this.emoji = Util.resolvePartialEmoji(emoji);\n    return this;\n  }\n  /**\n   * Sets the label of this button\n   * @param {string} label The text to be displayed on this button\n   * @returns {MessageButton}\n   */\n\n\n  setLabel(label) {\n    this.label = Util.verifyString(label, RangeError, 'BUTTON_LABEL');\n    return this;\n  }\n  /**\n   * Sets the style of this button\n   * @param {MessageButtonStyleResolvable} style The style of this button\n   * @returns {MessageButton}\n   */\n\n\n  setStyle(style) {\n    this.style = MessageButton.resolveStyle(style);\n    return this;\n  }\n  /**\n   * Sets the URL of this button.\n   * <note>MessageButton#style must be LINK when setting a URL</note>\n   * @param {string} url The URL of this button\n   * @returns {MessageButton}\n   */\n\n\n  setURL(url) {\n    this.url = Util.verifyString(url, RangeError, 'BUTTON_URL');\n    return this;\n  }\n  /**\n   * Transforms the button to a plain object.\n   * @returns {APIMessageComponent} The raw data of this button\n   */\n\n\n  toJSON() {\n    return {\n      custom_id: this.customId,\n      disabled: this.disabled,\n      emoji: this.emoji,\n      label: this.label,\n      style: MessageButtonStyles[this.style],\n      type: MessageComponentTypes[this.type],\n      url: this.url\n    };\n  }\n  /**\n   * Data that can be resolved to a MessageButtonStyle. This can be\n   * * MessageButtonStyle\n   * * number\n   * @typedef {number|MessageButtonStyle} MessageButtonStyleResolvable\n   */\n\n  /**\n   * Resolves the style of a button\n   * @param {MessageButtonStyleResolvable} style The style to resolve\n   * @returns {MessageButtonStyle}\n   * @private\n   */\n\n\n  static resolveStyle(style) {\n    return typeof style === 'string' ? style : MessageButtonStyles[style];\n  }\n\n}\n\nmodule.exports = MessageButton;","map":{"version":3,"names":["BaseMessageComponent","require","RangeError","MessageButtonStyles","MessageComponentTypes","Util","MessageButton","constructor","data","type","setup","label","customId","custom_id","style","resolveStyle","emoji","resolvePartialEmoji","url","disabled","setCustomId","verifyString","setDisabled","setEmoji","setLabel","setStyle","setURL","toJSON","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/MessageButton.js"],"sourcesContent":["'use strict';\n\nconst BaseMessageComponent = require('./BaseMessageComponent');\nconst { RangeError } = require('../errors');\nconst { MessageButtonStyles, MessageComponentTypes } = require('../util/Constants');\nconst Util = require('../util/Util');\n\n/**\n * Represents a button message component.\n * @extends {BaseMessageComponent}\n */\nclass MessageButton extends BaseMessageComponent {\n  /**\n   * @typedef {BaseMessageComponentOptions} MessageButtonOptions\n   * @property {string} [label] The text to be displayed on this button\n   * @property {string} [customId] A unique string to be sent in the interaction when clicked\n   * @property {MessageButtonStyleResolvable} [style] The style of this button\n   * @property {EmojiIdentifierResolvable} [emoji] The emoji to be displayed to the left of the text\n   * @property {string} [url] Optional URL for link-style buttons\n   * @property {boolean} [disabled=false] Disables the button to prevent interactions\n   */\n\n  /**\n   * @param {MessageButton|MessageButtonOptions} [data={}] MessageButton to clone or raw data\n   */\n  constructor(data = {}) {\n    super({ type: 'BUTTON' });\n\n    this.setup(data);\n  }\n\n  setup(data) {\n    /**\n     * The text to be displayed on this button\n     * @type {?string}\n     */\n    this.label = data.label ?? null;\n\n    /**\n     * A unique string to be sent in the interaction when clicked\n     * @type {?string}\n     */\n    this.customId = data.custom_id ?? data.customId ?? null;\n\n    /**\n     * The style of this button\n     * @type {?MessageButtonStyle}\n     */\n    this.style = data.style ? MessageButton.resolveStyle(data.style) : null;\n\n    /**\n     * Emoji for this button\n     * @type {?RawEmoji}\n     */\n    this.emoji = data.emoji ? Util.resolvePartialEmoji(data.emoji) : null;\n\n    /**\n     * The URL this button links to, if it is a Link style button\n     * @type {?string}\n     */\n    this.url = data.url ?? null;\n\n    /**\n     * Whether this button is currently disabled\n     * @type {boolean}\n     */\n    this.disabled = data.disabled ?? false;\n  }\n\n  /**\n   * Sets the custom id for this button\n   * @param {string} customId A unique string to be sent in the interaction when clicked\n   * @returns {MessageButton}\n   */\n  setCustomId(customId) {\n    this.customId = Util.verifyString(customId, RangeError, 'BUTTON_CUSTOM_ID');\n    return this;\n  }\n\n  /**\n   * Sets the interactive status of the button\n   * @param {boolean} [disabled=true] Whether this button should be disabled\n   * @returns {MessageButton}\n   */\n  setDisabled(disabled = true) {\n    this.disabled = disabled;\n    return this;\n  }\n\n  /**\n   * Set the emoji of this button\n   * @param {EmojiIdentifierResolvable} emoji The emoji to be displayed on this button\n   * @returns {MessageButton}\n   */\n  setEmoji(emoji) {\n    this.emoji = Util.resolvePartialEmoji(emoji);\n    return this;\n  }\n\n  /**\n   * Sets the label of this button\n   * @param {string} label The text to be displayed on this button\n   * @returns {MessageButton}\n   */\n  setLabel(label) {\n    this.label = Util.verifyString(label, RangeError, 'BUTTON_LABEL');\n    return this;\n  }\n\n  /**\n   * Sets the style of this button\n   * @param {MessageButtonStyleResolvable} style The style of this button\n   * @returns {MessageButton}\n   */\n  setStyle(style) {\n    this.style = MessageButton.resolveStyle(style);\n    return this;\n  }\n\n  /**\n   * Sets the URL of this button.\n   * <note>MessageButton#style must be LINK when setting a URL</note>\n   * @param {string} url The URL of this button\n   * @returns {MessageButton}\n   */\n  setURL(url) {\n    this.url = Util.verifyString(url, RangeError, 'BUTTON_URL');\n    return this;\n  }\n\n  /**\n   * Transforms the button to a plain object.\n   * @returns {APIMessageComponent} The raw data of this button\n   */\n  toJSON() {\n    return {\n      custom_id: this.customId,\n      disabled: this.disabled,\n      emoji: this.emoji,\n      label: this.label,\n      style: MessageButtonStyles[this.style],\n      type: MessageComponentTypes[this.type],\n      url: this.url,\n    };\n  }\n\n  /**\n   * Data that can be resolved to a MessageButtonStyle. This can be\n   * * MessageButtonStyle\n   * * number\n   * @typedef {number|MessageButtonStyle} MessageButtonStyleResolvable\n   */\n\n  /**\n   * Resolves the style of a button\n   * @param {MessageButtonStyleResolvable} style The style to resolve\n   * @returns {MessageButtonStyle}\n   * @private\n   */\n  static resolveStyle(style) {\n    return typeof style === 'string' ? style : MessageButtonStyles[style];\n  }\n}\n\nmodule.exports = MessageButton;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}