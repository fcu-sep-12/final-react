{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\n\nconst {\n  Error\n} = require('../errors');\n\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\n\nconst UserFlags = require('../util/UserFlags');\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\n\n\nclass User extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APIUser} data The data for the user\n   */\n  constructor(client, data) {\n    super(client);\n    /**\n     * The user's id\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    this.bot = null;\n    this.system = null;\n    this.flags = null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('username' in data) {\n      /**\n       * The username of the user\n       * @type {?string}\n       */\n      this.username = data.username;\n    } else if (typeof this.username !== 'string') {\n      this.username = null;\n    }\n\n    if ('bot' in data) {\n      /**\n       * Whether or not the user is a bot\n       * @type {?boolean}\n       */\n      this.bot = Boolean(data.bot);\n    } else if (!this.partial && typeof this.bot !== 'boolean') {\n      this.bot = false;\n    }\n\n    if ('discriminator' in data) {\n      /**\n       * A discriminator based on username for the user\n       * @type {?string}\n       */\n      this.discriminator = data.discriminator;\n    } else if (typeof this.discriminator !== 'string') {\n      this.discriminator = null;\n    }\n\n    if ('avatar' in data) {\n      /**\n       * The user avatar's hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else if (typeof this.avatar !== 'string') {\n      this.avatar = null;\n    }\n\n    if ('system' in data) {\n      /**\n       * Whether the user is an Official Discord System user (part of the urgent message system)\n       * @type {?boolean}\n       */\n      this.system = Boolean(data.system);\n    } else if (!this.partial && typeof this.system !== 'boolean') {\n      this.system = false;\n    }\n\n    if ('public_flags' in data) {\n      /**\n       * The flags for this user\n       * @type {?UserFlags}\n       */\n      this.flags = new UserFlags(data.public_flags);\n    }\n  }\n  /**\n   * Whether this User is a partial\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get partial() {\n    return typeof this.username !== 'string';\n  }\n  /**\n   * The timestamp the user was created at\n   * @type {number}\n   * @readonly\n   */\n\n\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n  /**\n   * The time the user was created at\n   * @type {Date}\n   * @readonly\n   */\n\n\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n  /**\n   * A link to the user's avatar.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n\n\n  avatarURL() {\n    let {\n      format,\n      size,\n      dynamic\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!this.avatar) return null;\n    return this.client.rest.cdn.Avatar(this.id, this.avatar, format, size, dynamic);\n  }\n  /**\n   * A link to the user's default avatar\n   * @type {string}\n   * @readonly\n   */\n\n\n  get defaultAvatarURL() {\n    return this.client.rest.cdn.DefaultAvatar(this.discriminator % 5);\n  }\n  /**\n   * A link to the user's avatar if they have one.\n   * Otherwise a link to their default avatar will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n\n\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.defaultAvatarURL;\n  }\n  /**\n   * The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user\n   * @type {?string}\n   * @readonly\n   */\n\n\n  get tag() {\n    return typeof this.username === 'string' ? `${this.username}#${this.discriminator}` : null;\n  }\n  /**\n   * The DM between the client's user and this user\n   * @type {?DMChannel}\n   * @readonly\n   */\n\n\n  get dmChannel() {\n    return this.client.channels.cache.find(c => c.type === 'DM' && c.recipient.id === this.id) ?? null;\n  }\n  /**\n   * Creates a DM channel between the client and the user.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n\n\n  async createDM() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n\n    if (!force) {\n      const {\n        dmChannel\n      } = this;\n      if (dmChannel && !dmChannel.partial) return dmChannel;\n    }\n\n    const data = await this.client.api.users(this.client.user.id).channels.post({\n      data: {\n        recipient_id: this.id\n      }\n    });\n    return this.client.channels._add(data);\n  }\n  /**\n   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n   * @returns {Promise<DMChannel>}\n   */\n\n\n  async deleteDM() {\n    const {\n      dmChannel\n    } = this;\n    if (!dmChannel) throw new Error('USER_NO_DMCHANNEL');\n    await this.client.api.channels(dmChannel.id).delete();\n\n    this.client.channels._remove(dmChannel.id);\n\n    return dmChannel;\n  }\n  /**\n   * Checks if the user is equal to another. It compares id, username, discriminator, avatar, and bot flags.\n   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n   * @param {User} user User to compare with\n   * @returns {boolean}\n   */\n\n\n  equals(user) {\n    let equal = user && this.id === user.id && this.username === user.username && this.discriminator === user.discriminator && this.avatar === user.avatar;\n    return equal;\n  }\n  /**\n   * Fetches this user's flags.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<UserFlags>}\n   */\n\n\n  async fetchFlags() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.flags && !force) return this.flags;\n    const data = await this.client.api.users(this.id).get();\n\n    this._patch(data);\n\n    return this.flags;\n  }\n  /**\n   * Fetches this user.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<User>}\n   */\n\n\n  fetch() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.client.users.fetch(this.id, {\n      force\n    });\n  }\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the User object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${user}!`);\n   */\n\n\n  toString() {\n    return `<@${this.id}>`;\n  }\n\n  toJSON() {\n    for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {\n      props[_key] = arguments[_key];\n    }\n\n    const json = super.toJSON({\n      createdTimestamp: true,\n      defaultAvatarURL: true,\n      tag: true\n    }, ...props);\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    return json;\n  } // These are here only for documentation purposes - they are implemented by TextBasedChannel\n\n  /* eslint-disable no-empty-function */\n\n\n  send() {}\n\n}\n\nTextBasedChannel.applyToClass(User);\nmodule.exports = User;\n/**\n * @external APIUser\n * @see {@link https://discord.com/developers/docs/resources/user#user-object}\n */","map":{"version":3,"names":["Base","require","TextBasedChannel","Error","SnowflakeUtil","UserFlags","User","constructor","client","data","id","bot","system","flags","_patch","username","Boolean","partial","discriminator","avatar","public_flags","createdTimestamp","deconstruct","timestamp","createdAt","Date","avatarURL","format","size","dynamic","rest","cdn","Avatar","defaultAvatarURL","DefaultAvatar","displayAvatarURL","options","tag","dmChannel","channels","cache","find","c","type","recipient","createDM","force","api","users","user","post","recipient_id","_add","deleteDM","delete","_remove","equals","equal","fetchFlags","get","fetch","toString","toJSON","props","json","send","applyToClass","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/User.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst TextBasedChannel = require('./interfaces/TextBasedChannel');\nconst { Error } = require('../errors');\nconst SnowflakeUtil = require('../util/SnowflakeUtil');\nconst UserFlags = require('../util/UserFlags');\n\n/**\n * Represents a user on Discord.\n * @implements {TextBasedChannel}\n * @extends {Base}\n */\nclass User extends Base {\n  /**\n   * @param {Client} client The instantiating client\n   * @param {APIUser} data The data for the user\n   */\n  constructor(client, data) {\n    super(client);\n\n    /**\n     * The user's id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    this.bot = null;\n\n    this.system = null;\n\n    this.flags = null;\n\n    this._patch(data);\n  }\n\n  _patch(data) {\n    if ('username' in data) {\n      /**\n       * The username of the user\n       * @type {?string}\n       */\n      this.username = data.username;\n    } else if (typeof this.username !== 'string') {\n      this.username = null;\n    }\n\n    if ('bot' in data) {\n      /**\n       * Whether or not the user is a bot\n       * @type {?boolean}\n       */\n      this.bot = Boolean(data.bot);\n    } else if (!this.partial && typeof this.bot !== 'boolean') {\n      this.bot = false;\n    }\n\n    if ('discriminator' in data) {\n      /**\n       * A discriminator based on username for the user\n       * @type {?string}\n       */\n      this.discriminator = data.discriminator;\n    } else if (typeof this.discriminator !== 'string') {\n      this.discriminator = null;\n    }\n\n    if ('avatar' in data) {\n      /**\n       * The user avatar's hash\n       * @type {?string}\n       */\n      this.avatar = data.avatar;\n    } else if (typeof this.avatar !== 'string') {\n      this.avatar = null;\n    }\n\n    if ('system' in data) {\n      /**\n       * Whether the user is an Official Discord System user (part of the urgent message system)\n       * @type {?boolean}\n       */\n      this.system = Boolean(data.system);\n    } else if (!this.partial && typeof this.system !== 'boolean') {\n      this.system = false;\n    }\n\n    if ('public_flags' in data) {\n      /**\n       * The flags for this user\n       * @type {?UserFlags}\n       */\n      this.flags = new UserFlags(data.public_flags);\n    }\n  }\n\n  /**\n   * Whether this User is a partial\n   * @type {boolean}\n   * @readonly\n   */\n  get partial() {\n    return typeof this.username !== 'string';\n  }\n\n  /**\n   * The timestamp the user was created at\n   * @type {number}\n   * @readonly\n   */\n  get createdTimestamp() {\n    return SnowflakeUtil.deconstruct(this.id).timestamp;\n  }\n\n  /**\n   * The time the user was created at\n   * @type {Date}\n   * @readonly\n   */\n  get createdAt() {\n    return new Date(this.createdTimestamp);\n  }\n\n  /**\n   * A link to the user's avatar.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {?string}\n   */\n  avatarURL({ format, size, dynamic } = {}) {\n    if (!this.avatar) return null;\n    return this.client.rest.cdn.Avatar(this.id, this.avatar, format, size, dynamic);\n  }\n\n  /**\n   * A link to the user's default avatar\n   * @type {string}\n   * @readonly\n   */\n  get defaultAvatarURL() {\n    return this.client.rest.cdn.DefaultAvatar(this.discriminator % 5);\n  }\n\n  /**\n   * A link to the user's avatar if they have one.\n   * Otherwise a link to their default avatar will be returned.\n   * @param {ImageURLOptions} [options={}] Options for the Image URL\n   * @returns {string}\n   */\n  displayAvatarURL(options) {\n    return this.avatarURL(options) ?? this.defaultAvatarURL;\n  }\n\n  /**\n   * The Discord \"tag\" (e.g. `hydrabolt#0001`) for this user\n   * @type {?string}\n   * @readonly\n   */\n  get tag() {\n    return typeof this.username === 'string' ? `${this.username}#${this.discriminator}` : null;\n  }\n\n  /**\n   * The DM between the client's user and this user\n   * @type {?DMChannel}\n   * @readonly\n   */\n  get dmChannel() {\n    return this.client.channels.cache.find(c => c.type === 'DM' && c.recipient.id === this.id) ?? null;\n  }\n\n  /**\n   * Creates a DM channel between the client and the user.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<DMChannel>}\n   */\n  async createDM(force = false) {\n    if (!force) {\n      const { dmChannel } = this;\n      if (dmChannel && !dmChannel.partial) return dmChannel;\n    }\n\n    const data = await this.client.api.users(this.client.user.id).channels.post({\n      data: {\n        recipient_id: this.id,\n      },\n    });\n    return this.client.channels._add(data);\n  }\n\n  /**\n   * Deletes a DM channel (if one exists) between the client and the user. Resolves with the channel if successful.\n   * @returns {Promise<DMChannel>}\n   */\n  async deleteDM() {\n    const { dmChannel } = this;\n    if (!dmChannel) throw new Error('USER_NO_DMCHANNEL');\n    await this.client.api.channels(dmChannel.id).delete();\n    this.client.channels._remove(dmChannel.id);\n    return dmChannel;\n  }\n\n  /**\n   * Checks if the user is equal to another. It compares id, username, discriminator, avatar, and bot flags.\n   * It is recommended to compare equality by using `user.id === user2.id` unless you want to compare all properties.\n   * @param {User} user User to compare with\n   * @returns {boolean}\n   */\n  equals(user) {\n    let equal =\n      user &&\n      this.id === user.id &&\n      this.username === user.username &&\n      this.discriminator === user.discriminator &&\n      this.avatar === user.avatar;\n\n    return equal;\n  }\n\n  /**\n   * Fetches this user's flags.\n   * @param {boolean} [force=false] Whether to skip the cache check and request the API\n   * @returns {Promise<UserFlags>}\n   */\n  async fetchFlags(force = false) {\n    if (this.flags && !force) return this.flags;\n    const data = await this.client.api.users(this.id).get();\n    this._patch(data);\n    return this.flags;\n  }\n\n  /**\n   * Fetches this user.\n   * @param {boolean} [force=true] Whether to skip the cache check and request the API\n   * @returns {Promise<User>}\n   */\n  fetch(force = true) {\n    return this.client.users.fetch(this.id, { force });\n  }\n\n  /**\n   * When concatenated with a string, this automatically returns the user's mention instead of the User object.\n   * @returns {string}\n   * @example\n   * // Logs: Hello from <@123456789012345678>!\n   * console.log(`Hello from ${user}!`);\n   */\n  toString() {\n    return `<@${this.id}>`;\n  }\n\n  toJSON(...props) {\n    const json = super.toJSON(\n      {\n        createdTimestamp: true,\n        defaultAvatarURL: true,\n        tag: true,\n      },\n      ...props,\n    );\n    json.avatarURL = this.avatarURL();\n    json.displayAvatarURL = this.displayAvatarURL();\n    return json;\n  }\n\n  // These are here only for documentation purposes - they are implemented by TextBasedChannel\n  /* eslint-disable no-empty-function */\n  send() {}\n}\n\nTextBasedChannel.applyToClass(User);\n\nmodule.exports = User;\n\n/**\n * @external APIUser\n * @see {@link https://discord.com/developers/docs/resources/user#user-object}\n */\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}