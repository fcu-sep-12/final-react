{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ApplicationCommandOptionWithChoicesBase = void 0;\n\nconst tslib_1 = require(\"tslib\");\n\nrequire(\"discord-api-types/v9\");\n\nconst ow_1 = tslib_1.__importDefault(require(\"ow\"));\n\nconst Assertions_1 = require(\"../Assertions\");\n\nconst CommandOptionBase_1 = require(\"./CommandOptionBase\");\n\nconst stringPredicate = ow_1.default.string.minLength(1).maxLength(100);\nconst integerPredicate = ow_1.default.number.finite; // TODO: See resolution for sindresorhus/ow#217 in relation to this cast\n\nconst choicesPredicate = ow_1.default.array.ofType(ow_1.default.array.exactShape([stringPredicate, ow_1.default.any(ow_1.default.string, integerPredicate)]));\n\nclass ApplicationCommandOptionWithChoicesBase extends CommandOptionBase_1.SlashCommandOptionBase {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"choices\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  /**\n   * Adds a choice for this option\n   * @param name The name of the choice\n   * @param value The value of the choice\n   */\n\n\n  addChoice(name, value) {\n    this.choices ?? (this.choices = []);\n    Assertions_1.validateMaxChoicesLength(this.choices); // Validate name\n\n    ow_1.default(name, `${this.type === 3\n    /* String */\n    ? 'string' : 'integer'} choice name`, stringPredicate); // Validate the value\n\n    if (this.type === 3\n    /* String */\n    ) ow_1.default(value, 'string choice value', stringPredicate);else ow_1.default(value, 'integer choice value', integerPredicate);\n    this.choices.push({\n      name,\n      value\n    });\n    return this;\n  }\n  /**\n   * Adds multiple choices for this option\n   * @param choices The choices to add\n   */\n\n\n  addChoices(choices) {\n    ow_1.default(choices, `${this.type === 3\n    /* String */\n    ? 'string' : 'integer'} choices`, choicesPredicate);\n\n    for (const [label, value] of choices) this.addChoice(label, value);\n\n    return this;\n  }\n\n  toJSON() {\n    return { ...super.toJSON(),\n      choices: this.choices\n    };\n  }\n\n}\n\nexports.ApplicationCommandOptionWithChoicesBase = ApplicationCommandOptionWithChoicesBase;","map":{"version":3,"mappings":";;;;;;;;;AAAAA;;AACA;;AACA;;AAEA;;AAEA,MAAMC,eAAe,GAAGC,aAAGC,MAAH,CAAUC,SAAV,CAAoB,CAApB,EAAuBC,SAAvB,CAAiC,GAAjC,CAAxB;AACA,MAAMC,gBAAgB,GAAGJ,aAAGK,MAAH,CAAUC,MAAnC,C,CAEA;;AACA,MAAMC,gBAAgB,GAAGP,aAAGQ,KAAH,CAASC,MAAT,CACxBT,aAAGQ,KAAH,CAASE,UAAT,CAAoB,CAACX,eAAD,EAAkBC,aAAGW,GAAH,CAAOX,aAAGC,MAAV,EAAkBG,gBAAlB,CAAlB,CAApB,CADwB,CAAzB;;AAIA,MAAsBQ,uCAAtB,SACSC,0CADT,CAC+B;EAD/BC;;IAICC;sBAAA;wBAAA;oBAAA;;IAAA;EAiDA;EA/CA;;;;;;;EAKOC,SAAS,CAACC,IAAD,EAAeC,KAAf,EAAuB;IACtC,KAAKC,OAAL,UAAKA,OAAL,GAAiB,EAAjB;IAEAC,sCAAyB,KAAKD,OAA9B,EAHsC,CAKtC;;IACAnB,aACCiB,IADD,EAEC,GAAG,KAAKI,IAAL,KAAS;IAAA;IAAT,EAAoD,QAApD,GAA+D,SAAS,cAF5E,EAGCtB,eAHD,EANsC,CAYtC;;IACA,IAAI,KAAKsB,IAAL,KAAS;IAAA;IAAb,EAAuDrB,aAAGkB,KAAH,EAAU,qBAAV,EAAiCnB,eAAjC,EAAvD,KACKC,aAAGkB,KAAH,EAAU,sBAAV,EAAkCd,gBAAlC;IAEL,KAAKe,OAAL,CAAaG,IAAb,CAAkB;MAAEL,IAAF;MAAQC;IAAR,CAAlB;IAEA,OAAO,IAAP;EACA;EAED;;;;;;EAIOK,UAAU,CAACJ,OAAD,EAAoC;IACpDnB,aACCmB,OADD,EAEC,GAAG,KAAKE,IAAL,KAAS;IAAA;IAAT,EAAoD,QAApD,GAA+D,SAAS,UAF5E,EAGCd,gBAHD;;IAMA,KAAK,MAAM,CAACiB,KAAD,EAAQN,KAAR,CAAX,IAA6BC,OAA7B,EAAsC,KAAKH,SAAL,CAAeQ,KAAf,EAAsBN,KAAtB;;IACtC,OAAO,IAAP;EACA;;EAEeO,MAAM;IACrB,OAAO,EACN,GAAG,MAAMA,MAAN,EADG;MAENN,OAAO,EAAE,KAAKA;IAFR,CAAP;EAIA;;AAnD6B;;AAD/BO","names":["require","stringPredicate","ow_1","string","minLength","maxLength","integerPredicate","number","finite","choicesPredicate","array","ofType","exactShape","any","ApplicationCommandOptionWithChoicesBase","CommandOptionBase_1","constructor","Object","addChoice","name","value","choices","Assertions_1","type","push","addChoices","label","toJSON","exports"],"sources":["\\interactions\\slashCommands\\mixins\\CommandOptionWithChoices.ts"],"sourcesContent":["import { APIApplicationCommandOptionChoice, ApplicationCommandOptionType } from 'discord-api-types/v9';\nimport ow, { Predicate } from 'ow';\nimport { validateMaxChoicesLength } from '../Assertions';\nimport type { ToAPIApplicationCommandOptions } from '../SlashCommandBuilder';\nimport { SlashCommandOptionBase } from './CommandOptionBase';\n\nconst stringPredicate = ow.string.minLength(1).maxLength(100);\nconst integerPredicate = ow.number.finite;\n\n// TODO: See resolution for sindresorhus/ow#217 in relation to this cast\nconst choicesPredicate = ow.array.ofType<[string, string | number]>(\n\tow.array.exactShape([stringPredicate, ow.any(ow.string, integerPredicate) as unknown as Predicate<string | number>]),\n);\n\nexport abstract class ApplicationCommandOptionWithChoicesBase<T extends string | number>\n\textends SlashCommandOptionBase\n\timplements ToAPIApplicationCommandOptions\n{\n\tpublic choices?: APIApplicationCommandOptionChoice[];\n\n\t/**\n\t * Adds a choice for this option\n\t * @param name The name of the choice\n\t * @param value The value of the choice\n\t */\n\tpublic addChoice(name: string, value: T) {\n\t\tthis.choices ??= [];\n\n\t\tvalidateMaxChoicesLength(this.choices);\n\n\t\t// Validate name\n\t\tow(\n\t\t\tname,\n\t\t\t`${this.type === ApplicationCommandOptionType.String ? 'string' : 'integer'} choice name`,\n\t\t\tstringPredicate,\n\t\t);\n\n\t\t// Validate the value\n\t\tif (this.type === ApplicationCommandOptionType.String) ow(value, 'string choice value', stringPredicate);\n\t\telse ow(value, 'integer choice value', integerPredicate);\n\n\t\tthis.choices.push({ name, value });\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds multiple choices for this option\n\t * @param choices The choices to add\n\t */\n\tpublic addChoices(choices: [name: string, value: T][]) {\n\t\tow(\n\t\t\tchoices,\n\t\t\t`${this.type === ApplicationCommandOptionType.String ? 'string' : 'integer'} choices`,\n\t\t\tchoicesPredicate,\n\t\t);\n\n\t\tfor (const [label, value] of choices) this.addChoice(label, value);\n\t\treturn this;\n\t}\n\n\tpublic override toJSON() {\n\t\treturn {\n\t\t\t...super.toJSON(),\n\t\t\tchoices: this.choices,\n\t\t};\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}