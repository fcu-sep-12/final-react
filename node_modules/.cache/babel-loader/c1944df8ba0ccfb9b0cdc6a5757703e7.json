{"ast":null,"code":"'use strict';\n\nconst CachedManager = require('./CachedManager');\n\nconst {\n  Presence\n} = require('../structures/Presence');\n/**\n * Manages API methods for Presences and holds their cache.\n * @extends {CachedManager}\n */\n\n\nclass PresenceManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, Presence, iterable);\n  }\n  /**\n   * The cache of Presences\n   * @type {Collection<Snowflake, Presence>}\n   * @name PresenceManager#cache\n   */\n\n\n  _add(data, cache) {\n    return super._add(data, cache, {\n      id: data.user.id\n    });\n  }\n  /**\n   * Data that can be resolved to a Presence object. This can be:\n   * * A Presence\n   * * A UserResolvable\n   * * A Snowflake\n   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable\n   */\n\n  /**\n   * Resolves a {@link PresenceResolvable} to a {@link Presence} object.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Presence}\n   */\n\n\n  resolve(presence) {\n    const presenceResolvable = super.resolve(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const UserResolvable = this.client.users.resolveId(presence);\n    return super.resolve(UserResolvable);\n  }\n  /**\n   * Resolves a {@link PresenceResolvable} to a {@link Presence} id.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Snowflake}\n   */\n\n\n  resolveId(presence) {\n    const presenceResolvable = super.resolveId(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userResolvable = this.client.users.resolveId(presence);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n\n}\n\nmodule.exports = PresenceManager;","map":{"version":3,"names":["CachedManager","require","Presence","PresenceManager","constructor","client","iterable","_add","data","cache","id","user","resolve","presence","presenceResolvable","UserResolvable","users","resolveId","userResolvable","has","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/PresenceManager.js"],"sourcesContent":["'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst { Presence } = require('../structures/Presence');\n\n/**\n * Manages API methods for Presences and holds their cache.\n * @extends {CachedManager}\n */\nclass PresenceManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, Presence, iterable);\n  }\n\n  /**\n   * The cache of Presences\n   * @type {Collection<Snowflake, Presence>}\n   * @name PresenceManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.user.id });\n  }\n\n  /**\n   * Data that can be resolved to a Presence object. This can be:\n   * * A Presence\n   * * A UserResolvable\n   * * A Snowflake\n   * @typedef {Presence|UserResolvable|Snowflake} PresenceResolvable\n   */\n\n  /**\n   * Resolves a {@link PresenceResolvable} to a {@link Presence} object.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Presence}\n   */\n  resolve(presence) {\n    const presenceResolvable = super.resolve(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const UserResolvable = this.client.users.resolveId(presence);\n    return super.resolve(UserResolvable);\n  }\n\n  /**\n   * Resolves a {@link PresenceResolvable} to a {@link Presence} id.\n   * @param {PresenceResolvable} presence The presence resolvable to resolve\n   * @returns {?Snowflake}\n   */\n  resolveId(presence) {\n    const presenceResolvable = super.resolveId(presence);\n    if (presenceResolvable) return presenceResolvable;\n    const userResolvable = this.client.users.resolveId(presence);\n    return this.cache.has(userResolvable) ? userResolvable : null;\n  }\n}\n\nmodule.exports = PresenceManager;\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAM;EAAEC;AAAF,IAAeD,OAAO,CAAC,wBAAD,CAA5B;AAEA;AACA;AACA;AACA;;;AACA,MAAME,eAAN,SAA8BH,aAA9B,CAA4C;EAC1CI,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmB;IAC5B,MAAMD,MAAN,EAAcH,QAAd,EAAwBI,QAAxB;EACD;EAED;AACF;AACA;AACA;AACA;;;EAEEC,IAAI,CAACC,IAAD,EAAOC,KAAP,EAAc;IAChB,OAAO,MAAMF,IAAN,CAAWC,IAAX,EAAiBC,KAAjB,EAAwB;MAAEC,EAAE,EAAEF,IAAI,CAACG,IAAL,CAAUD;IAAhB,CAAxB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;;EACEE,OAAO,CAACC,QAAD,EAAW;IAChB,MAAMC,kBAAkB,GAAG,MAAMF,OAAN,CAAcC,QAAd,CAA3B;IACA,IAAIC,kBAAJ,EAAwB,OAAOA,kBAAP;IACxB,MAAMC,cAAc,GAAG,KAAKV,MAAL,CAAYW,KAAZ,CAAkBC,SAAlB,CAA4BJ,QAA5B,CAAvB;IACA,OAAO,MAAMD,OAAN,CAAcG,cAAd,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,SAAS,CAACJ,QAAD,EAAW;IAClB,MAAMC,kBAAkB,GAAG,MAAMG,SAAN,CAAgBJ,QAAhB,CAA3B;IACA,IAAIC,kBAAJ,EAAwB,OAAOA,kBAAP;IACxB,MAAMI,cAAc,GAAG,KAAKb,MAAL,CAAYW,KAAZ,CAAkBC,SAAlB,CAA4BJ,QAA5B,CAAvB;IACA,OAAO,KAAKJ,KAAL,CAAWU,GAAX,CAAeD,cAAf,IAAiCA,cAAjC,GAAkD,IAAzD;EACD;;AA7CyC;;AAgD5CE,MAAM,CAACC,OAAP,GAAiBlB,eAAjB"},"metadata":{},"sourceType":"script"}