{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst GuildChannel = require('./GuildChannel');\n\nconst Permissions = require('../util/Permissions');\n/**\n * Represents a voice-based guild channel on Discord.\n * @extends {GuildChannel}\n */\n\n\nclass BaseGuildVoiceChannel extends GuildChannel {\n  _patch(data) {\n    super._patch(data);\n    /**\n     * The RTC region for this voice-based channel. This region is automatically selected if `null`.\n     * @type {?string}\n     */\n\n\n    this.rtcRegion = data.rtc_region;\n    /**\n     * The bitrate of this voice-based channel\n     * @type {number}\n     */\n\n    this.bitrate = data.bitrate;\n    /**\n     * The maximum amount of users allowed in this channel.\n     * @type {number}\n     */\n\n    this.userLimit = data.user_limit;\n  }\n  /**\n   * The members in this voice-based channel\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n\n\n  get members() {\n    const coll = new Collection();\n\n    for (const state of this.guild.voiceStates.cache.values()) {\n      if (state.channelId === this.id && state.member) {\n        coll.set(state.id, state.member);\n      }\n    }\n\n    return coll;\n  }\n  /**\n   * Checks if the voice-based channel is full\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get full() {\n    return this.userLimit > 0 && this.members.size >= this.userLimit;\n  }\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n\n\n  get joinable() {\n    if (!this.viewable) return false;\n    if (!this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT, false)) return false;\n    return true;\n  }\n  /**\n   * Sets the RTC region of the channel.\n   * @param {?string} region The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the RTC region to europe\n   * channel.setRTCRegion('europe');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * channel.setRTCRegion(null);\n   */\n\n\n  setRTCRegion(region) {\n    return this.edit({\n      rtcRegion: region\n    });\n  }\n  /**\n   * Creates an invite to this guild channel.\n   * @param {CreateInviteOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n\n\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * Resolves with a collection mapping invites by their codes.\n   * @param {boolean} [cache=true] Whether or not to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n\n\n  fetchInvites() {\n    let cache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    return this.guild.invites.fetch({\n      channelId: this.id,\n      cache\n    });\n  }\n\n}\n\nmodule.exports = BaseGuildVoiceChannel;","map":{"version":3,"names":["Collection","require","GuildChannel","Permissions","BaseGuildVoiceChannel","_patch","data","rtcRegion","rtc_region","bitrate","userLimit","user_limit","members","coll","state","guild","voiceStates","cache","values","channelId","id","member","set","full","size","joinable","viewable","permissionsFor","client","user","has","FLAGS","CONNECT","setRTCRegion","region","edit","createInvite","options","invites","create","fetchInvites","fetch","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/BaseGuildVoiceChannel.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst GuildChannel = require('./GuildChannel');\nconst Permissions = require('../util/Permissions');\n\n/**\n * Represents a voice-based guild channel on Discord.\n * @extends {GuildChannel}\n */\nclass BaseGuildVoiceChannel extends GuildChannel {\n  _patch(data) {\n    super._patch(data);\n\n    /**\n     * The RTC region for this voice-based channel. This region is automatically selected if `null`.\n     * @type {?string}\n     */\n    this.rtcRegion = data.rtc_region;\n\n    /**\n     * The bitrate of this voice-based channel\n     * @type {number}\n     */\n    this.bitrate = data.bitrate;\n\n    /**\n     * The maximum amount of users allowed in this channel.\n     * @type {number}\n     */\n    this.userLimit = data.user_limit;\n  }\n\n  /**\n   * The members in this voice-based channel\n   * @type {Collection<Snowflake, GuildMember>}\n   * @readonly\n   */\n  get members() {\n    const coll = new Collection();\n    for (const state of this.guild.voiceStates.cache.values()) {\n      if (state.channelId === this.id && state.member) {\n        coll.set(state.id, state.member);\n      }\n    }\n    return coll;\n  }\n\n  /**\n   * Checks if the voice-based channel is full\n   * @type {boolean}\n   * @readonly\n   */\n  get full() {\n    return this.userLimit > 0 && this.members.size >= this.userLimit;\n  }\n\n  /**\n   * Whether the channel is joinable by the client user\n   * @type {boolean}\n   * @readonly\n   */\n  get joinable() {\n    if (!this.viewable) return false;\n    if (!this.permissionsFor(this.client.user).has(Permissions.FLAGS.CONNECT, false)) return false;\n    return true;\n  }\n\n  /**\n   * Sets the RTC region of the channel.\n   * @param {?string} region The new region of the channel. Set to `null` to remove a specific region for the channel\n   * @returns {Promise<BaseGuildVoiceChannel>}\n   * @example\n   * // Set the RTC region to europe\n   * channel.setRTCRegion('europe');\n   * @example\n   * // Remove a fixed region for this channel - let Discord decide automatically\n   * channel.setRTCRegion(null);\n   */\n  setRTCRegion(region) {\n    return this.edit({ rtcRegion: region });\n  }\n\n  /**\n   * Creates an invite to this guild channel.\n   * @param {CreateInviteOptions} [options={}] The options for creating the invite\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a channel\n   * channel.createInvite()\n   *   .then(invite => console.log(`Created an invite with a code of ${invite.code}`))\n   *   .catch(console.error);\n   */\n  createInvite(options) {\n    return this.guild.invites.create(this.id, options);\n  }\n\n  /**\n   * Fetches a collection of invites to this guild channel.\n   * Resolves with a collection mapping invites by their codes.\n   * @param {boolean} [cache=true] Whether or not to cache the fetched invites\n   * @returns {Promise<Collection<string, Invite>>}\n   */\n  fetchInvites(cache = true) {\n    return this.guild.invites.fetch({ channelId: this.id, cache });\n  }\n}\n\nmodule.exports = BaseGuildVoiceChannel;\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAiBC,OAAO,CAAC,uBAAD,CAA9B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,gBAAD,CAA5B;;AACA,MAAME,WAAW,GAAGF,OAAO,CAAC,qBAAD,CAA3B;AAEA;AACA;AACA;AACA;;;AACA,MAAMG,qBAAN,SAAoCF,YAApC,CAAiD;EAC/CG,MAAM,CAACC,IAAD,EAAO;IACX,MAAMD,MAAN,CAAaC,IAAb;IAEA;AACJ;AACA;AACA;;;IACI,KAAKC,SAAL,GAAiBD,IAAI,CAACE,UAAtB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,OAAL,GAAeH,IAAI,CAACG,OAApB;IAEA;AACJ;AACA;AACA;;IACI,KAAKC,SAAL,GAAiBJ,IAAI,CAACK,UAAtB;EACD;EAED;AACF;AACA;AACA;AACA;;;EACa,IAAPC,OAAO,GAAG;IACZ,MAAMC,IAAI,GAAG,IAAIb,UAAJ,EAAb;;IACA,KAAK,MAAMc,KAAX,IAAoB,KAAKC,KAAL,CAAWC,WAAX,CAAuBC,KAAvB,CAA6BC,MAA7B,EAApB,EAA2D;MACzD,IAAIJ,KAAK,CAACK,SAAN,KAAoB,KAAKC,EAAzB,IAA+BN,KAAK,CAACO,MAAzC,EAAiD;QAC/CR,IAAI,CAACS,GAAL,CAASR,KAAK,CAACM,EAAf,EAAmBN,KAAK,CAACO,MAAzB;MACD;IACF;;IACD,OAAOR,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACU,IAAJU,IAAI,GAAG;IACT,OAAO,KAAKb,SAAL,GAAiB,CAAjB,IAAsB,KAAKE,OAAL,CAAaY,IAAb,IAAqB,KAAKd,SAAvD;EACD;EAED;AACF;AACA;AACA;AACA;;;EACc,IAARe,QAAQ,GAAG;IACb,IAAI,CAAC,KAAKC,QAAV,EAAoB,OAAO,KAAP;IACpB,IAAI,CAAC,KAAKC,cAAL,CAAoB,KAAKC,MAAL,CAAYC,IAAhC,EAAsCC,GAAtC,CAA0C3B,WAAW,CAAC4B,KAAZ,CAAkBC,OAA5D,EAAqE,KAArE,CAAL,EAAkF,OAAO,KAAP;IAClF,OAAO,IAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEC,YAAY,CAACC,MAAD,EAAS;IACnB,OAAO,KAAKC,IAAL,CAAU;MAAE5B,SAAS,EAAE2B;IAAb,CAAV,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEE,YAAY,CAACC,OAAD,EAAU;IACpB,OAAO,KAAKtB,KAAL,CAAWuB,OAAX,CAAmBC,MAAnB,CAA0B,KAAKnB,EAA/B,EAAmCiB,OAAnC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACEG,YAAY,GAAe;IAAA,IAAdvB,KAAc,uEAAN,IAAM;IACzB,OAAO,KAAKF,KAAL,CAAWuB,OAAX,CAAmBG,KAAnB,CAAyB;MAAEtB,SAAS,EAAE,KAAKC,EAAlB;MAAsBH;IAAtB,CAAzB,CAAP;EACD;;AA/F8C;;AAkGjDyB,MAAM,CAACC,OAAP,GAAiBvC,qBAAjB"},"metadata":{},"sourceType":"script"}