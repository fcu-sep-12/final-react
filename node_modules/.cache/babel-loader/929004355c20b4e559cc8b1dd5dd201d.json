{"ast":null,"code":"'use strict';\n\nconst {\n  TypeError\n} = require('../errors');\n\nconst {\n  MessageComponentTypes,\n  Events\n} = require('../util/Constants');\n/**\n * Represents an interactive component of a Message. It should not be necessary to construct this directly.\n * See {@link MessageComponent}\n */\n\n\nclass BaseMessageComponent {\n  /**\n   * Options for a BaseMessageComponent\n   * @typedef {Object} BaseMessageComponentOptions\n   * @property {MessageComponentTypeResolvable} type The type of this component\n   */\n\n  /**\n   * Data that can be resolved into options for a MessageComponent. This can be:\n   * * MessageActionRowOptions\n   * * MessageButtonOptions\n   * * MessageSelectMenuOptions\n   * @typedef {MessageActionRowOptions|MessageButtonOptions|MessageSelectMenuOptions} MessageComponentOptions\n   */\n\n  /**\n   * Components that can be sent in a message. These can be:\n   * * MessageActionRow\n   * * MessageButton\n   * * MessageSelectMenu\n   * @typedef {MessageActionRow|MessageButton|MessageSelectMenu} MessageComponent\n   * @see {@link https://discord.com/developers/docs/interactions/message-components#component-object-component-types}\n   */\n\n  /**\n   * Data that can be resolved to a MessageComponentType. This can be:\n   * * MessageComponentType\n   * * string\n   * * number\n   * @typedef {string|number|MessageComponentType} MessageComponentTypeResolvable\n   */\n\n  /**\n   * @param {BaseMessageComponent|BaseMessageComponentOptions} [data={}] The options for this component\n   */\n  constructor(data) {\n    /**\n     * The type of this component\n     * @type {?MessageComponentType}\n     */\n    this.type = 'type' in data ? BaseMessageComponent.resolveType(data.type) : null;\n  }\n  /**\n   * Constructs a MessageComponent based on the type of the incoming data\n   * @param {MessageComponentOptions} data Data for a MessageComponent\n   * @param {Client|WebhookClient} [client] Client constructing this component\n   * @returns {?MessageComponent}\n   * @private\n   */\n\n\n  static create(data, client) {\n    let component;\n    let type = data.type;\n    if (typeof type === 'string') type = MessageComponentTypes[type];\n\n    switch (type) {\n      case MessageComponentTypes.ACTION_ROW:\n        {\n          const MessageActionRow = require('./MessageActionRow');\n\n          component = new MessageActionRow(data, client);\n          break;\n        }\n\n      case MessageComponentTypes.BUTTON:\n        {\n          const MessageButton = require('./MessageButton');\n\n          component = new MessageButton(data);\n          break;\n        }\n\n      case MessageComponentTypes.SELECT_MENU:\n        {\n          const MessageSelectMenu = require('./MessageSelectMenu');\n\n          component = new MessageSelectMenu(data);\n          break;\n        }\n\n      default:\n        if (client) {\n          client.emit(Events.DEBUG, `[BaseMessageComponent] Received component with unknown type: ${data.type}`);\n        } else {\n          throw new TypeError('INVALID_TYPE', 'data.type', 'valid MessageComponentType');\n        }\n\n    }\n\n    return component;\n  }\n  /**\n   * Resolves the type of a MessageComponent\n   * @param {MessageComponentTypeResolvable} type The type to resolve\n   * @returns {MessageComponentType}\n   * @private\n   */\n\n\n  static resolveType(type) {\n    return typeof type === 'string' ? type : MessageComponentTypes[type];\n  }\n\n}\n\nmodule.exports = BaseMessageComponent;","map":{"version":3,"names":["TypeError","require","MessageComponentTypes","Events","BaseMessageComponent","constructor","data","type","resolveType","create","client","component","ACTION_ROW","MessageActionRow","BUTTON","MessageButton","SELECT_MENU","MessageSelectMenu","emit","DEBUG","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/BaseMessageComponent.js"],"sourcesContent":["'use strict';\n\nconst { TypeError } = require('../errors');\nconst { MessageComponentTypes, Events } = require('../util/Constants');\n\n/**\n * Represents an interactive component of a Message. It should not be necessary to construct this directly.\n * See {@link MessageComponent}\n */\nclass BaseMessageComponent {\n  /**\n   * Options for a BaseMessageComponent\n   * @typedef {Object} BaseMessageComponentOptions\n   * @property {MessageComponentTypeResolvable} type The type of this component\n   */\n\n  /**\n   * Data that can be resolved into options for a MessageComponent. This can be:\n   * * MessageActionRowOptions\n   * * MessageButtonOptions\n   * * MessageSelectMenuOptions\n   * @typedef {MessageActionRowOptions|MessageButtonOptions|MessageSelectMenuOptions} MessageComponentOptions\n   */\n\n  /**\n   * Components that can be sent in a message. These can be:\n   * * MessageActionRow\n   * * MessageButton\n   * * MessageSelectMenu\n   * @typedef {MessageActionRow|MessageButton|MessageSelectMenu} MessageComponent\n   * @see {@link https://discord.com/developers/docs/interactions/message-components#component-object-component-types}\n   */\n\n  /**\n   * Data that can be resolved to a MessageComponentType. This can be:\n   * * MessageComponentType\n   * * string\n   * * number\n   * @typedef {string|number|MessageComponentType} MessageComponentTypeResolvable\n   */\n\n  /**\n   * @param {BaseMessageComponent|BaseMessageComponentOptions} [data={}] The options for this component\n   */\n  constructor(data) {\n    /**\n     * The type of this component\n     * @type {?MessageComponentType}\n     */\n    this.type = 'type' in data ? BaseMessageComponent.resolveType(data.type) : null;\n  }\n\n  /**\n   * Constructs a MessageComponent based on the type of the incoming data\n   * @param {MessageComponentOptions} data Data for a MessageComponent\n   * @param {Client|WebhookClient} [client] Client constructing this component\n   * @returns {?MessageComponent}\n   * @private\n   */\n  static create(data, client) {\n    let component;\n    let type = data.type;\n\n    if (typeof type === 'string') type = MessageComponentTypes[type];\n\n    switch (type) {\n      case MessageComponentTypes.ACTION_ROW: {\n        const MessageActionRow = require('./MessageActionRow');\n        component = new MessageActionRow(data, client);\n        break;\n      }\n      case MessageComponentTypes.BUTTON: {\n        const MessageButton = require('./MessageButton');\n        component = new MessageButton(data);\n        break;\n      }\n      case MessageComponentTypes.SELECT_MENU: {\n        const MessageSelectMenu = require('./MessageSelectMenu');\n        component = new MessageSelectMenu(data);\n        break;\n      }\n      default:\n        if (client) {\n          client.emit(Events.DEBUG, `[BaseMessageComponent] Received component with unknown type: ${data.type}`);\n        } else {\n          throw new TypeError('INVALID_TYPE', 'data.type', 'valid MessageComponentType');\n        }\n    }\n    return component;\n  }\n\n  /**\n   * Resolves the type of a MessageComponent\n   * @param {MessageComponentTypeResolvable} type The type to resolve\n   * @returns {MessageComponentType}\n   * @private\n   */\n  static resolveType(type) {\n    return typeof type === 'string' ? type : MessageComponentTypes[type];\n  }\n}\n\nmodule.exports = BaseMessageComponent;\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAgBC,OAAO,CAAC,WAAD,CAA7B;;AACA,MAAM;EAAEC,qBAAF;EAAyBC;AAAzB,IAAoCF,OAAO,CAAC,mBAAD,CAAjD;AAEA;AACA;AACA;AACA;;;AACA,MAAMG,oBAAN,CAA2B;EACzB;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;EACEC,WAAW,CAACC,IAAD,EAAO;IAChB;AACJ;AACA;AACA;IACI,KAAKC,IAAL,GAAY,UAAUD,IAAV,GAAiBF,oBAAoB,CAACI,WAArB,CAAiCF,IAAI,CAACC,IAAtC,CAAjB,GAA+D,IAA3E;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;;EACe,OAANE,MAAM,CAACH,IAAD,EAAOI,MAAP,EAAe;IAC1B,IAAIC,SAAJ;IACA,IAAIJ,IAAI,GAAGD,IAAI,CAACC,IAAhB;IAEA,IAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8BA,IAAI,GAAGL,qBAAqB,CAACK,IAAD,CAA5B;;IAE9B,QAAQA,IAAR;MACE,KAAKL,qBAAqB,CAACU,UAA3B;QAAuC;UACrC,MAAMC,gBAAgB,GAAGZ,OAAO,CAAC,oBAAD,CAAhC;;UACAU,SAAS,GAAG,IAAIE,gBAAJ,CAAqBP,IAArB,EAA2BI,MAA3B,CAAZ;UACA;QACD;;MACD,KAAKR,qBAAqB,CAACY,MAA3B;QAAmC;UACjC,MAAMC,aAAa,GAAGd,OAAO,CAAC,iBAAD,CAA7B;;UACAU,SAAS,GAAG,IAAII,aAAJ,CAAkBT,IAAlB,CAAZ;UACA;QACD;;MACD,KAAKJ,qBAAqB,CAACc,WAA3B;QAAwC;UACtC,MAAMC,iBAAiB,GAAGhB,OAAO,CAAC,qBAAD,CAAjC;;UACAU,SAAS,GAAG,IAAIM,iBAAJ,CAAsBX,IAAtB,CAAZ;UACA;QACD;;MACD;QACE,IAAII,MAAJ,EAAY;UACVA,MAAM,CAACQ,IAAP,CAAYf,MAAM,CAACgB,KAAnB,EAA2B,gEAA+Db,IAAI,CAACC,IAAK,EAApG;QACD,CAFD,MAEO;UACL,MAAM,IAAIP,SAAJ,CAAc,cAAd,EAA8B,WAA9B,EAA2C,4BAA3C,CAAN;QACD;;IArBL;;IAuBA,OAAOW,SAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;;;EACoB,OAAXH,WAAW,CAACD,IAAD,EAAO;IACvB,OAAO,OAAOA,IAAP,KAAgB,QAAhB,GAA2BA,IAA3B,GAAkCL,qBAAqB,CAACK,IAAD,CAA9D;EACD;;AA1FwB;;AA6F3Ba,MAAM,CAACC,OAAP,GAAiBjB,oBAAjB"},"metadata":{},"sourceType":"script"}