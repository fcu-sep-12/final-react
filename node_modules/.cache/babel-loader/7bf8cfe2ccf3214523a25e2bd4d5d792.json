{"ast":null,"code":"'use strict';\n\nconst {\n  Events\n} = require('../../util/Constants');\n/**\n * Manages voice connections for the client\n */\n\n\nclass ClientVoiceManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this voice manager\n     * @type {Client}\n     * @readonly\n     * @name ClientVoiceManager#client\n     */\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * Maps guild ids to voice adapters created for use with @discordjs/voice.\n     * @type {Map<Snowflake, Object>}\n     */\n\n    this.adapters = new Map();\n    client.on(Events.SHARD_DISCONNECT, (_, shardId) => {\n      for (const [guildId, adapter] of this.adapters.entries()) {\n        if (client.guilds.cache.get(guildId)?.shardId === shardId) {\n          adapter.destroy();\n        }\n      }\n    });\n  }\n\n  onVoiceServer(payload) {\n    this.adapters.get(payload.guild_id)?.onVoiceServerUpdate(payload);\n  }\n\n  onVoiceStateUpdate(payload) {\n    if (payload.guild_id && payload.session_id && payload.user_id === this.client.user?.id) {\n      this.adapters.get(payload.guild_id)?.onVoiceStateUpdate(payload);\n    }\n  }\n\n}\n\nmodule.exports = ClientVoiceManager;","map":{"version":3,"names":["Events","require","ClientVoiceManager","constructor","client","Object","defineProperty","value","adapters","Map","on","SHARD_DISCONNECT","_","shardId","guildId","adapter","entries","guilds","cache","get","destroy","onVoiceServer","payload","guild_id","onVoiceServerUpdate","onVoiceStateUpdate","session_id","user_id","user","id","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/voice/ClientVoiceManager.js"],"sourcesContent":["'use strict';\n\nconst { Events } = require('../../util/Constants');\n\n/**\n * Manages voice connections for the client\n */\nclass ClientVoiceManager {\n  constructor(client) {\n    /**\n     * The client that instantiated this voice manager\n     * @type {Client}\n     * @readonly\n     * @name ClientVoiceManager#client\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * Maps guild ids to voice adapters created for use with @discordjs/voice.\n     * @type {Map<Snowflake, Object>}\n     */\n    this.adapters = new Map();\n\n    client.on(Events.SHARD_DISCONNECT, (_, shardId) => {\n      for (const [guildId, adapter] of this.adapters.entries()) {\n        if (client.guilds.cache.get(guildId)?.shardId === shardId) {\n          adapter.destroy();\n        }\n      }\n    });\n  }\n\n  onVoiceServer(payload) {\n    this.adapters.get(payload.guild_id)?.onVoiceServerUpdate(payload);\n  }\n\n  onVoiceStateUpdate(payload) {\n    if (payload.guild_id && payload.session_id && payload.user_id === this.client.user?.id) {\n      this.adapters.get(payload.guild_id)?.onVoiceStateUpdate(payload);\n    }\n  }\n}\n\nmodule.exports = ClientVoiceManager;\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAaC,OAAO,CAAC,sBAAD,CAA1B;AAEA;AACA;AACA;;;AACA,MAAMC,kBAAN,CAAyB;EACvBC,WAAW,CAACC,MAAD,EAAS;IAClB;AACJ;AACA;AACA;AACA;AACA;IACIC,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;MAAEC,KAAK,EAAEH;IAAT,CAAtC;IAEA;AACJ;AACA;AACA;;IACI,KAAKI,QAAL,GAAgB,IAAIC,GAAJ,EAAhB;IAEAL,MAAM,CAACM,EAAP,CAAUV,MAAM,CAACW,gBAAjB,EAAmC,CAACC,CAAD,EAAIC,OAAJ,KAAgB;MACjD,KAAK,MAAM,CAACC,OAAD,EAAUC,OAAV,CAAX,IAAiC,KAAKP,QAAL,CAAcQ,OAAd,EAAjC,EAA0D;QACxD,IAAIZ,MAAM,CAACa,MAAP,CAAcC,KAAd,CAAoBC,GAApB,CAAwBL,OAAxB,GAAkCD,OAAlC,KAA8CA,OAAlD,EAA2D;UACzDE,OAAO,CAACK,OAAR;QACD;MACF;IACF,CAND;EAOD;;EAEDC,aAAa,CAACC,OAAD,EAAU;IACrB,KAAKd,QAAL,CAAcW,GAAd,CAAkBG,OAAO,CAACC,QAA1B,GAAqCC,mBAArC,CAAyDF,OAAzD;EACD;;EAEDG,kBAAkB,CAACH,OAAD,EAAU;IAC1B,IAAIA,OAAO,CAACC,QAAR,IAAoBD,OAAO,CAACI,UAA5B,IAA0CJ,OAAO,CAACK,OAAR,KAAoB,KAAKvB,MAAL,CAAYwB,IAAZ,EAAkBC,EAApF,EAAwF;MACtF,KAAKrB,QAAL,CAAcW,GAAd,CAAkBG,OAAO,CAACC,QAA1B,GAAqCE,kBAArC,CAAwDH,OAAxD;IACD;EACF;;AAjCsB;;AAoCzBQ,MAAM,CAACC,OAAP,GAAiB7B,kBAAjB"},"metadata":{},"sourceType":"script"}