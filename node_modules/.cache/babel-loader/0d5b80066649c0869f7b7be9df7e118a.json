{"ast":null,"code":"'use strict';\n\nconst {\n  blockQuote,\n  bold,\n  channelMention,\n  codeBlock,\n  formatEmoji,\n  hideLinkEmbed,\n  hyperlink,\n  inlineCode,\n  italic,\n  memberNicknameMention,\n  quote,\n  roleMention,\n  spoiler,\n  strikethrough,\n  time,\n  TimestampStyles,\n  underscore,\n  userMention\n} = require('@discordjs/builders');\n/**\n * Contains various Discord-specific functions for formatting messages.\n */\n\n\nclass Formatters extends null {}\n/**\n * Formats the content into a block quote. This needs to be at the start of the line for Discord to format it.\n * @method blockQuote\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\n\n\nFormatters.blockQuote = blockQuote;\n/**\n * Formats the content into bold text.\n * @method bold\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\n\nFormatters.bold = bold;\n/**\n * Formats a channel ID into a channel mention.\n * @method channelMention\n * @memberof Formatters\n * @param {string} channelId The channel ID to format.\n * @returns {string}\n */\n\nFormatters.channelMention = channelMention;\n/**\n * Wraps the content inside a codeblock with an optional language.\n * @method codeBlock\n * @memberof Formatters\n * @param {string} contentOrLanguage The language to use, content if a second parameter isn't provided.\n * @param {string} [content] The content to wrap.\n * @returns {string}\n */\n\nFormatters.codeBlock = codeBlock;\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n * @method formatEmoji\n * @memberof Formatters\n * @param {string} emojiId The emoji ID to format.\n * @param {boolean} [animated] Whether the emoji is animated or not. Defaults to `false`\n * @returns {string}\n */\n\nFormatters.formatEmoji = formatEmoji;\n/**\n * Wraps the URL into `<>`, which stops it from embedding.\n * @method hideLinkEmbed\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\n\nFormatters.hideLinkEmbed = hideLinkEmbed;\n/**\n * Formats the content and the URL into a masked URL with an optional title.\n * @method hyperlink\n * @memberof Formatters\n * @param {string} content The content to display.\n * @param {string} url The URL the content links to.\n * @param {string} [title] The title shown when hovering on the masked link.\n * @returns {string}\n */\n\nFormatters.hyperlink = hyperlink;\n/**\n * Wraps the content inside \\`backticks\\`, which formats it as inline code.\n * @method inlineCode\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\n\nFormatters.inlineCode = inlineCode;\n/**\n * Formats the content into italic text.\n * @method italic\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\n\nFormatters.italic = italic;\n/**\n * Formats a user ID into a member-nickname mention.\n * @method memberNicknameMention\n * @memberof Formatters\n * @param {string} memberId The user ID to format.\n * @returns {string}\n */\n\nFormatters.memberNicknameMention = memberNicknameMention;\n/**\n * Formats the content into a quote. This needs to be at the start of the line for Discord to format it.\n * @method quote\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\n\nFormatters.quote = quote;\n/**\n * Formats a role ID into a role mention.\n * @method roleMention\n * @memberof Formatters\n * @param {string} roleId The role ID to format.\n * @returns {string}\n */\n\nFormatters.roleMention = roleMention;\n/**\n * Formats the content into spoiler text.\n * @method spoiler\n * @memberof Formatters\n * @param {string} content The content to spoiler.\n * @returns {string}\n */\n\nFormatters.spoiler = spoiler;\n/**\n * Formats the content into strike-through text.\n * @method strikethrough\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\n\nFormatters.strikethrough = strikethrough;\n/**\n * Formats a date into a short date-time string.\n * @method time\n * @memberof Formatters\n * @param {number|Date} [date] The date to format.\n * @param {TimestampStyles} [style] The style to use.\n * @returns {string}\n */\n\nFormatters.time = time;\n/**\n * A message formatting timestamp style, as defined in\n * [here](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles).\n * * `t` Short time format, consisting of hours and minutes, e.g. 16:20.\n * * `T` Long time format, consisting of hours, minutes, and seconds, e.g. 16:20:30.\n * * `d` Short date format, consisting of day, month, and year, e.g. 20/04/2021.\n * * `D` Long date format, consisting of day, month, and year, e.g. 20 April 2021.\n * * `f` Short date-time format, consisting of short date and short time formats, e.g. 20 April 2021 16:20.\n * * `F` Long date-time format, consisting of long date and short time formats, e.g. Tuesday, 20 April 2021 16:20.\n * * `R` Relative time format, consisting of a relative duration format, e.g. 2 months ago.\n * @typedef {string} TimestampStylesString\n */\n\n/**\n * The message formatting timestamp\n * [styles](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles) supported by Discord.\n * @memberof Formatters\n * @type {Object<string, TimestampStylesString>}\n */\n\nFormatters.TimestampStyles = TimestampStyles;\n/**\n * Formats the content into underscored text.\n * @method underscore\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\n\nFormatters.underscore = underscore;\n/**\n * Formats a user ID into a user mention.\n * @method userMention\n * @memberof Formatters\n * @param {string} userId The user ID to format.\n * @returns {string}\n */\n\nFormatters.userMention = userMention;\nmodule.exports = Formatters;","map":{"version":3,"names":["blockQuote","bold","channelMention","codeBlock","formatEmoji","hideLinkEmbed","hyperlink","inlineCode","italic","memberNicknameMention","quote","roleMention","spoiler","strikethrough","time","TimestampStyles","underscore","userMention","require","Formatters","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/util/Formatters.js"],"sourcesContent":["'use strict';\n\nconst {\n  blockQuote,\n  bold,\n  channelMention,\n  codeBlock,\n  formatEmoji,\n  hideLinkEmbed,\n  hyperlink,\n  inlineCode,\n  italic,\n  memberNicknameMention,\n  quote,\n  roleMention,\n  spoiler,\n  strikethrough,\n  time,\n  TimestampStyles,\n  underscore,\n  userMention,\n} = require('@discordjs/builders');\n\n/**\n * Contains various Discord-specific functions for formatting messages.\n */\nclass Formatters extends null {}\n\n/**\n * Formats the content into a block quote. This needs to be at the start of the line for Discord to format it.\n * @method blockQuote\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\nFormatters.blockQuote = blockQuote;\n\n/**\n * Formats the content into bold text.\n * @method bold\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\nFormatters.bold = bold;\n\n/**\n * Formats a channel ID into a channel mention.\n * @method channelMention\n * @memberof Formatters\n * @param {string} channelId The channel ID to format.\n * @returns {string}\n */\nFormatters.channelMention = channelMention;\n\n/**\n * Wraps the content inside a codeblock with an optional language.\n * @method codeBlock\n * @memberof Formatters\n * @param {string} contentOrLanguage The language to use, content if a second parameter isn't provided.\n * @param {string} [content] The content to wrap.\n * @returns {string}\n */\nFormatters.codeBlock = codeBlock;\n\n/**\n * Formats an emoji ID into a fully qualified emoji identifier\n * @method formatEmoji\n * @memberof Formatters\n * @param {string} emojiId The emoji ID to format.\n * @param {boolean} [animated] Whether the emoji is animated or not. Defaults to `false`\n * @returns {string}\n */\nFormatters.formatEmoji = formatEmoji;\n\n/**\n * Wraps the URL into `<>`, which stops it from embedding.\n * @method hideLinkEmbed\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\nFormatters.hideLinkEmbed = hideLinkEmbed;\n\n/**\n * Formats the content and the URL into a masked URL with an optional title.\n * @method hyperlink\n * @memberof Formatters\n * @param {string} content The content to display.\n * @param {string} url The URL the content links to.\n * @param {string} [title] The title shown when hovering on the masked link.\n * @returns {string}\n */\nFormatters.hyperlink = hyperlink;\n\n/**\n * Wraps the content inside \\`backticks\\`, which formats it as inline code.\n * @method inlineCode\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\nFormatters.inlineCode = inlineCode;\n\n/**\n * Formats the content into italic text.\n * @method italic\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\nFormatters.italic = italic;\n\n/**\n * Formats a user ID into a member-nickname mention.\n * @method memberNicknameMention\n * @memberof Formatters\n * @param {string} memberId The user ID to format.\n * @returns {string}\n */\nFormatters.memberNicknameMention = memberNicknameMention;\n\n/**\n * Formats the content into a quote. This needs to be at the start of the line for Discord to format it.\n * @method quote\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\nFormatters.quote = quote;\n\n/**\n * Formats a role ID into a role mention.\n * @method roleMention\n * @memberof Formatters\n * @param {string} roleId The role ID to format.\n * @returns {string}\n */\nFormatters.roleMention = roleMention;\n\n/**\n * Formats the content into spoiler text.\n * @method spoiler\n * @memberof Formatters\n * @param {string} content The content to spoiler.\n * @returns {string}\n */\nFormatters.spoiler = spoiler;\n\n/**\n * Formats the content into strike-through text.\n * @method strikethrough\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\nFormatters.strikethrough = strikethrough;\n\n/**\n * Formats a date into a short date-time string.\n * @method time\n * @memberof Formatters\n * @param {number|Date} [date] The date to format.\n * @param {TimestampStyles} [style] The style to use.\n * @returns {string}\n */\nFormatters.time = time;\n\n/**\n * A message formatting timestamp style, as defined in\n * [here](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles).\n * * `t` Short time format, consisting of hours and minutes, e.g. 16:20.\n * * `T` Long time format, consisting of hours, minutes, and seconds, e.g. 16:20:30.\n * * `d` Short date format, consisting of day, month, and year, e.g. 20/04/2021.\n * * `D` Long date format, consisting of day, month, and year, e.g. 20 April 2021.\n * * `f` Short date-time format, consisting of short date and short time formats, e.g. 20 April 2021 16:20.\n * * `F` Long date-time format, consisting of long date and short time formats, e.g. Tuesday, 20 April 2021 16:20.\n * * `R` Relative time format, consisting of a relative duration format, e.g. 2 months ago.\n * @typedef {string} TimestampStylesString\n */\n\n/**\n * The message formatting timestamp\n * [styles](https://discord.com/developers/docs/reference#message-formatting-timestamp-styles) supported by Discord.\n * @memberof Formatters\n * @type {Object<string, TimestampStylesString>}\n */\nFormatters.TimestampStyles = TimestampStyles;\n\n/**\n * Formats the content into underscored text.\n * @method underscore\n * @memberof Formatters\n * @param {string} content The content to wrap.\n * @returns {string}\n */\nFormatters.underscore = underscore;\n\n/**\n * Formats a user ID into a user mention.\n * @method userMention\n * @memberof Formatters\n * @param {string} userId The user ID to format.\n * @returns {string}\n */\nFormatters.userMention = userMention;\n\nmodule.exports = Formatters;\n"],"mappings":"AAAA;;AAEA,MAAM;EACJA,UADI;EAEJC,IAFI;EAGJC,cAHI;EAIJC,SAJI;EAKJC,WALI;EAMJC,aANI;EAOJC,SAPI;EAQJC,UARI;EASJC,MATI;EAUJC,qBAVI;EAWJC,KAXI;EAYJC,WAZI;EAaJC,OAbI;EAcJC,aAdI;EAeJC,IAfI;EAgBJC,eAhBI;EAiBJC,UAjBI;EAkBJC;AAlBI,IAmBFC,OAAO,CAAC,qBAAD,CAnBX;AAqBA;AACA;AACA;;;AACA,MAAMC,UAAN,SAAyB,IAAzB,CAA8B;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACAA,UAAU,CAACnB,UAAX,GAAwBA,UAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAmB,UAAU,CAAClB,IAAX,GAAkBA,IAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAkB,UAAU,CAACjB,cAAX,GAA4BA,cAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAiB,UAAU,CAAChB,SAAX,GAAuBA,SAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAgB,UAAU,CAACf,WAAX,GAAyBA,WAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAe,UAAU,CAACd,aAAX,GAA2BA,aAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAc,UAAU,CAACb,SAAX,GAAuBA,SAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAa,UAAU,CAACZ,UAAX,GAAwBA,UAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAY,UAAU,CAACX,MAAX,GAAoBA,MAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAW,UAAU,CAACV,qBAAX,GAAmCA,qBAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAU,UAAU,CAACT,KAAX,GAAmBA,KAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAS,UAAU,CAACR,WAAX,GAAyBA,WAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAQ,UAAU,CAACP,OAAX,GAAqBA,OAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAO,UAAU,CAACN,aAAX,GAA2BA,aAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAM,UAAU,CAACL,IAAX,GAAkBA,IAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACAK,UAAU,CAACJ,eAAX,GAA6BA,eAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAI,UAAU,CAACH,UAAX,GAAwBA,UAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAG,UAAU,CAACF,WAAX,GAAyBA,WAAzB;AAEAG,MAAM,CAACC,OAAP,GAAiBF,UAAjB"},"metadata":{},"sourceType":"script"}