{"ast":null,"code":"'use strict';\n\nconst CachedManager = require('./CachedManager');\n\nconst GuildEmoji = require('../structures/GuildEmoji');\n\nconst ReactionEmoji = require('../structures/ReactionEmoji');\n\nconst {\n  parseEmoji\n} = require('../util/Util');\n/**\n * Holds methods to resolve GuildEmojis and stores their cache.\n * @extends {CachedManager}\n */\n\n\nclass BaseGuildEmojiManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, GuildEmoji, iterable);\n  }\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name BaseGuildEmojiManager#cache\n   */\n\n  /**\n   * Data that can be resolved into a GuildEmoji object. This can be:\n   * * A custom emoji identifier\n   * * A GuildEmoji object\n   * * A ReactionEmoji object\n   * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji object.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?GuildEmoji}\n   */\n\n\n  resolve(emoji) {\n    if (emoji instanceof ReactionEmoji) return super.resolve(emoji.id);\n    return super.resolve(emoji);\n  }\n  /**\n   * Resolves an EmojiResolvable to an Emoji id string.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?Snowflake}\n   */\n\n\n  resolveId(emoji) {\n    if (emoji instanceof ReactionEmoji) return emoji.id;\n    return super.resolveId(emoji);\n  }\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * The `<a:name:id>`, `<:name:id>`, `a:name:id` or `name:id` emoji identifier string of an emoji\n   * * An EmojiResolvable\n   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n\n\n  resolveIdentifier(emoji) {\n    const emojiResolvable = this.resolve(emoji);\n    if (emojiResolvable) return emojiResolvable.identifier;\n    if (emoji instanceof ReactionEmoji) return emoji.identifier;\n\n    if (typeof emoji === 'string') {\n      const res = parseEmoji(emoji);\n\n      if (res?.name.length) {\n        emoji = `${res.animated ? 'a:' : ''}${res.name}${res.id ? `:${res.id}` : ''}`;\n      }\n\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);\n      return emoji;\n    }\n\n    return null;\n  }\n\n}\n\nmodule.exports = BaseGuildEmojiManager;","map":{"version":3,"names":["CachedManager","require","GuildEmoji","ReactionEmoji","parseEmoji","BaseGuildEmojiManager","constructor","client","iterable","resolve","emoji","id","resolveId","resolveIdentifier","emojiResolvable","identifier","res","name","length","animated","includes","encodeURIComponent","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/BaseGuildEmojiManager.js"],"sourcesContent":["'use strict';\n\nconst CachedManager = require('./CachedManager');\nconst GuildEmoji = require('../structures/GuildEmoji');\nconst ReactionEmoji = require('../structures/ReactionEmoji');\nconst { parseEmoji } = require('../util/Util');\n\n/**\n * Holds methods to resolve GuildEmojis and stores their cache.\n * @extends {CachedManager}\n */\nclass BaseGuildEmojiManager extends CachedManager {\n  constructor(client, iterable) {\n    super(client, GuildEmoji, iterable);\n  }\n\n  /**\n   * The cache of GuildEmojis\n   * @type {Collection<Snowflake, GuildEmoji>}\n   * @name BaseGuildEmojiManager#cache\n   */\n\n  /**\n   * Data that can be resolved into a GuildEmoji object. This can be:\n   * * A custom emoji identifier\n   * * A GuildEmoji object\n   * * A ReactionEmoji object\n   * @typedef {Snowflake|GuildEmoji|ReactionEmoji} EmojiResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji object.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?GuildEmoji}\n   */\n  resolve(emoji) {\n    if (emoji instanceof ReactionEmoji) return super.resolve(emoji.id);\n    return super.resolve(emoji);\n  }\n\n  /**\n   * Resolves an EmojiResolvable to an Emoji id string.\n   * @param {EmojiResolvable} emoji The Emoji resolvable to identify\n   * @returns {?Snowflake}\n   */\n  resolveId(emoji) {\n    if (emoji instanceof ReactionEmoji) return emoji.id;\n    return super.resolveId(emoji);\n  }\n\n  /**\n   * Data that can be resolved to give an emoji identifier. This can be:\n   * * The unicode representation of an emoji\n   * * The `<a:name:id>`, `<:name:id>`, `a:name:id` or `name:id` emoji identifier string of an emoji\n   * * An EmojiResolvable\n   * @typedef {string|EmojiResolvable} EmojiIdentifierResolvable\n   */\n\n  /**\n   * Resolves an EmojiResolvable to an emoji identifier.\n   * @param {EmojiIdentifierResolvable} emoji The emoji resolvable to resolve\n   * @returns {?string}\n   */\n  resolveIdentifier(emoji) {\n    const emojiResolvable = this.resolve(emoji);\n    if (emojiResolvable) return emojiResolvable.identifier;\n    if (emoji instanceof ReactionEmoji) return emoji.identifier;\n    if (typeof emoji === 'string') {\n      const res = parseEmoji(emoji);\n      if (res?.name.length) {\n        emoji = `${res.animated ? 'a:' : ''}${res.name}${res.id ? `:${res.id}` : ''}`;\n      }\n      if (!emoji.includes('%')) return encodeURIComponent(emoji);\n      return emoji;\n    }\n    return null;\n  }\n}\n\nmodule.exports = BaseGuildEmojiManager;\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAGC,OAAO,CAAC,iBAAD,CAA7B;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,0BAAD,CAA1B;;AACA,MAAME,aAAa,GAAGF,OAAO,CAAC,6BAAD,CAA7B;;AACA,MAAM;EAAEG;AAAF,IAAiBH,OAAO,CAAC,cAAD,CAA9B;AAEA;AACA;AACA;AACA;;;AACA,MAAMI,qBAAN,SAAoCL,aAApC,CAAkD;EAChDM,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmB;IAC5B,MAAMD,MAAN,EAAcL,UAAd,EAA0BM,QAA1B;EACD;EAED;AACF;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;;EACEC,OAAO,CAACC,KAAD,EAAQ;IACb,IAAIA,KAAK,YAAYP,aAArB,EAAoC,OAAO,MAAMM,OAAN,CAAcC,KAAK,CAACC,EAApB,CAAP;IACpC,OAAO,MAAMF,OAAN,CAAcC,KAAd,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;;;EACEE,SAAS,CAACF,KAAD,EAAQ;IACf,IAAIA,KAAK,YAAYP,aAArB,EAAoC,OAAOO,KAAK,CAACC,EAAb;IACpC,OAAO,MAAMC,SAAN,CAAgBF,KAAhB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;;EAEE;AACF;AACA;AACA;AACA;;;EACEG,iBAAiB,CAACH,KAAD,EAAQ;IACvB,MAAMI,eAAe,GAAG,KAAKL,OAAL,CAAaC,KAAb,CAAxB;IACA,IAAII,eAAJ,EAAqB,OAAOA,eAAe,CAACC,UAAvB;IACrB,IAAIL,KAAK,YAAYP,aAArB,EAAoC,OAAOO,KAAK,CAACK,UAAb;;IACpC,IAAI,OAAOL,KAAP,KAAiB,QAArB,EAA+B;MAC7B,MAAMM,GAAG,GAAGZ,UAAU,CAACM,KAAD,CAAtB;;MACA,IAAIM,GAAG,EAAEC,IAAL,CAAUC,MAAd,EAAsB;QACpBR,KAAK,GAAI,GAAEM,GAAG,CAACG,QAAJ,GAAe,IAAf,GAAsB,EAAG,GAAEH,GAAG,CAACC,IAAK,GAAED,GAAG,CAACL,EAAJ,GAAU,IAAGK,GAAG,CAACL,EAAG,EAApB,GAAwB,EAAG,EAA5E;MACD;;MACD,IAAI,CAACD,KAAK,CAACU,QAAN,CAAe,GAAf,CAAL,EAA0B,OAAOC,kBAAkB,CAACX,KAAD,CAAzB;MAC1B,OAAOA,KAAP;IACD;;IACD,OAAO,IAAP;EACD;;AAjE+C;;AAoElDY,MAAM,CAACC,OAAP,GAAiBlB,qBAAjB"},"metadata":{},"sourceType":"script"}