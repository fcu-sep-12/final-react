{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SharedSlashCommandOptions = void 0;\n\nconst Assertions_1 = require(\"../Assertions\");\n\nconst boolean_1 = require(\"../options/boolean\");\n\nconst channel_1 = require(\"../options/channel\");\n\nconst integer_1 = require(\"../options/integer\");\n\nconst mentionable_1 = require(\"../options/mentionable\");\n\nconst role_1 = require(\"../options/role\");\n\nconst string_1 = require(\"../options/string\");\n\nconst user_1 = require(\"../options/user\");\n\nclass SharedSlashCommandOptions {\n  constructor() {\n    Object.defineProperty(this, \"options\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n  }\n  /**\n   * Adds a boolean option\n   * @param input A function that returns an option builder, or an already built builder\n   */\n\n\n  addBooleanOption(input) {\n    return this._sharedAddOptionMethod(input, boolean_1.SlashCommandBooleanOption);\n  }\n  /**\n   * Adds a user option\n   * @param input A function that returns an option builder, or an already built builder\n   */\n\n\n  addUserOption(input) {\n    return this._sharedAddOptionMethod(input, user_1.SlashCommandUserOption);\n  }\n  /**\n   * Adds a channel option\n   * @param input A function that returns an option builder, or an already built builder\n   */\n\n\n  addChannelOption(input) {\n    return this._sharedAddOptionMethod(input, channel_1.SlashCommandChannelOption);\n  }\n  /**\n   * Adds a role option\n   * @param input A function that returns an option builder, or an already built builder\n   */\n\n\n  addRoleOption(input) {\n    return this._sharedAddOptionMethod(input, role_1.SlashCommandRoleOption);\n  }\n  /**\n   * Adds a mentionable option\n   * @param input A function that returns an option builder, or an already built builder\n   */\n\n\n  addMentionableOption(input) {\n    return this._sharedAddOptionMethod(input, mentionable_1.SlashCommandMentionableOption);\n  }\n  /**\n   * Adds a string option\n   * @param input A function that returns an option builder, or an already built builder\n   */\n\n\n  addStringOption(input) {\n    return this._sharedAddOptionMethod(input, string_1.SlashCommandStringOption);\n  }\n  /**\n   * Adds an integer option\n   * @param input A function that returns an option builder, or an already built builder\n   */\n\n\n  addIntegerOption(input) {\n    return this._sharedAddOptionMethod(input, integer_1.SlashCommandIntegerOption);\n  }\n\n  _sharedAddOptionMethod(input, Instance) {\n    const {\n      options\n    } = this; // First, assert options conditions - we cannot have more than 25 options\n\n    Assertions_1.validateMaxOptionsLength(options); // Get the final result\n\n    const result = typeof input === 'function' ? input(new Instance()) : input;\n    Assertions_1.assertReturnOfBuilder(result, Instance); // Push it\n\n    options.push(result);\n    return this;\n  }\n\n}\n\nexports.SharedSlashCommandOptions = SharedSlashCommandOptions;","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA,MAAaA,yBAAb,CAAsC;EAAtCC;IACCC;sBAAA;wBAAA;oBAAA;;IAAA;EAuFA;EArFA;;;;;;EAIOC,gBAAgB,CACtBC,KADsB,EACgF;IAEtG,OAAO,KAAKC,sBAAL,CAA4BD,KAA5B,EAAmCE,mCAAnC,CAAP;EACA;EAED;;;;;;EAIOC,aAAa,CAACH,KAAD,EAA8F;IACjH,OAAO,KAAKC,sBAAL,CAA4BD,KAA5B,EAAmCI,6BAAnC,CAAP;EACA;EAED;;;;;;EAIOC,gBAAgB,CACtBL,KADsB,EACgF;IAEtG,OAAO,KAAKC,sBAAL,CAA4BD,KAA5B,EAAmCM,mCAAnC,CAAP;EACA;EAED;;;;;;EAIOC,aAAa,CAACP,KAAD,EAA8F;IACjH,OAAO,KAAKC,sBAAL,CAA4BD,KAA5B,EAAmCQ,6BAAnC,CAAP;EACA;EAED;;;;;;EAIOC,oBAAoB,CAC1BT,KAD0B,EACwF;IAElH,OAAO,KAAKC,sBAAL,CAA4BD,KAA5B,EAAmCU,2CAAnC,CAAP;EACA;EAED;;;;;;EAIOC,eAAe,CACrBX,KADqB,EAC8E;IAEnG,OAAO,KAAKC,sBAAL,CAA4BD,KAA5B,EAAmCY,iCAAnC,CAAP;EACA;EAED;;;;;;EAIOC,gBAAgB,CACtBb,KADsB,EACgF;IAEtG,OAAO,KAAKC,sBAAL,CAA4BD,KAA5B,EAAmCc,mCAAnC,CAAP;EACA;;EAEOb,sBAAsB,CAC7BD,KAD6B,EAE7Be,QAF6B,EAER;IAErB,MAAM;MAAEC;IAAF,IAAc,IAApB,CAFqB,CAIrB;;IACAC,sCAAyBD,OAAzB,EALqB,CAOrB;;IACA,MAAME,MAAM,GAAG,OAAOlB,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAAC,IAAIe,QAAJ,EAAD,CAAnC,GAAsDf,KAArE;IAEAiB,mCAAsBC,MAAtB,EAA8BH,QAA9B,EAVqB,CAYrB;;IACAC,OAAO,CAACG,IAAR,CAAaD,MAAb;IAEA,OAAO,IAAP;EACA;;AAvFoC;;AAAtCE","names":["SharedSlashCommandOptions","constructor","Object","addBooleanOption","input","_sharedAddOptionMethod","boolean_1","addUserOption","user_1","addChannelOption","channel_1","addRoleOption","role_1","addMentionableOption","mentionable_1","addStringOption","string_1","addIntegerOption","integer_1","Instance","options","Assertions_1","result","push","exports"],"sources":["\\interactions\\slashCommands\\mixins\\CommandOptions.ts"],"sourcesContent":["import { assertReturnOfBuilder, validateMaxOptionsLength } from '../Assertions';\nimport type { SlashCommandOptionBase } from './CommandOptionBase';\nimport { SlashCommandBooleanOption } from '../options/boolean';\nimport { SlashCommandChannelOption } from '../options/channel';\nimport { SlashCommandIntegerOption } from '../options/integer';\nimport { SlashCommandMentionableOption } from '../options/mentionable';\nimport { SlashCommandRoleOption } from '../options/role';\nimport { SlashCommandStringOption } from '../options/string';\nimport { SlashCommandUserOption } from '../options/user';\nimport type { ToAPIApplicationCommandOptions } from '../SlashCommandBuilder';\n\nexport class SharedSlashCommandOptions<ShouldOmitSubcommandFunctions = true> {\n\tpublic readonly options!: ToAPIApplicationCommandOptions[];\n\n\t/**\n\t * Adds a boolean option\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addBooleanOption(\n\t\tinput: SlashCommandBooleanOption | ((builder: SlashCommandBooleanOption) => SlashCommandBooleanOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandBooleanOption);\n\t}\n\n\t/**\n\t * Adds a user option\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addUserOption(input: SlashCommandUserOption | ((builder: SlashCommandUserOption) => SlashCommandUserOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandUserOption);\n\t}\n\n\t/**\n\t * Adds a channel option\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addChannelOption(\n\t\tinput: SlashCommandChannelOption | ((builder: SlashCommandChannelOption) => SlashCommandChannelOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandChannelOption);\n\t}\n\n\t/**\n\t * Adds a role option\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addRoleOption(input: SlashCommandRoleOption | ((builder: SlashCommandRoleOption) => SlashCommandRoleOption)) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandRoleOption);\n\t}\n\n\t/**\n\t * Adds a mentionable option\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addMentionableOption(\n\t\tinput: SlashCommandMentionableOption | ((builder: SlashCommandMentionableOption) => SlashCommandMentionableOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandMentionableOption);\n\t}\n\n\t/**\n\t * Adds a string option\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addStringOption(\n\t\tinput: SlashCommandStringOption | ((builder: SlashCommandStringOption) => SlashCommandStringOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandStringOption);\n\t}\n\n\t/**\n\t * Adds an integer option\n\t * @param input A function that returns an option builder, or an already built builder\n\t */\n\tpublic addIntegerOption(\n\t\tinput: SlashCommandIntegerOption | ((builder: SlashCommandIntegerOption) => SlashCommandIntegerOption),\n\t) {\n\t\treturn this._sharedAddOptionMethod(input, SlashCommandIntegerOption);\n\t}\n\n\tprivate _sharedAddOptionMethod<T extends SlashCommandOptionBase>(\n\t\tinput: T | ((builder: T) => T),\n\t\tInstance: new () => T,\n\t): ShouldOmitSubcommandFunctions extends true ? Omit<this, 'addSubcommand' | 'addSubcommandGroup'> : this {\n\t\tconst { options } = this;\n\n\t\t// First, assert options conditions - we cannot have more than 25 options\n\t\tvalidateMaxOptionsLength(options);\n\n\t\t// Get the final result\n\t\tconst result = typeof input === 'function' ? input(new Instance()) : input;\n\n\t\tassertReturnOfBuilder(result, Instance);\n\n\t\t// Push it\n\t\toptions.push(result);\n\n\t\treturn this;\n\t}\n}\n"]},"metadata":{},"sourceType":"script"}