{"ast":null,"code":"'use strict';\n\nconst Base = require('./Base');\n\nconst IntegrationApplication = require('./IntegrationApplication');\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n *  Represents a guild integration.\n */\n\n\nclass Integration extends Base {\n  constructor(client, data, guild) {\n    super(client);\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n    /**\n     * The integration id\n     * @type {Snowflake}\n     */\n\n    this.id = data.id;\n    /**\n     * The integration name\n     * @type {string}\n     */\n\n    this.name = data.name;\n    /**\n     * The integration type (twitch, youtube, etc)\n     * @type {string}\n     */\n\n    this.type = data.type;\n    /**\n     * Whether this integration is enabled\n     * @type {boolean}\n     */\n\n    this.enabled = data.enabled;\n    /**\n     * Whether this integration is syncing\n     * @type {boolean}\n     */\n\n    this.syncing = data.syncing;\n    /**\n     * The role that this integration uses for subscribers\n     * @type {Role}\n     */\n\n    this.role = this.guild.roles.cache.get(data.role_id);\n\n    if (data.user) {\n      /**\n       * The user for this integration\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user);\n    } else {\n      this.user = null;\n    }\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n\n\n    this.account = data.account;\n    /**\n     * The last time this integration was last synced\n     * @type {number}\n     */\n\n    this.syncedAt = data.synced_at;\n\n    this._patch(data);\n  }\n  /**\n   * All roles that are managed by this integration\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n\n\n  get roles() {\n    const roles = this.guild.roles.cache;\n    return roles.filter(role => role.tags?.integrationId === this.id);\n  }\n\n  _patch(data) {\n    /**\n     * The behavior of expiring subscribers\n     * @type {number}\n     */\n    this.expireBehavior = data.expire_behavior;\n    /**\n     * The grace period before expiring subscribers\n     * @type {number}\n     */\n\n    this.expireGracePeriod = data.expire_grace_period;\n\n    if ('application' in data) {\n      if (this.application) {\n        this.application._patch(data.application);\n      } else {\n        /**\n         * The application for this integration\n         * @type {?IntegrationApplication}\n         */\n        this.application = new IntegrationApplication(this.client, data.application);\n      }\n    } else if (!this.application) {\n      this.application = null;\n    }\n  }\n  /**\n   * Deletes this integration.\n   * @returns {Promise<Integration>}\n   * @param {string} [reason] Reason for deleting this integration\n   */\n\n\n  async delete(reason) {\n    await this.client.api.guilds(this.guild.id).integrations(this.id).delete({\n      reason\n    });\n    return this;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      role: 'roleId',\n      guild: 'guildId',\n      user: 'userId'\n    });\n  }\n\n}\n\nmodule.exports = Integration;","map":{"version":3,"names":["Base","require","IntegrationApplication","Integration","constructor","client","data","guild","id","name","type","enabled","syncing","role","roles","cache","get","role_id","user","users","_add","account","syncedAt","synced_at","_patch","filter","tags","integrationId","expireBehavior","expire_behavior","expireGracePeriod","expire_grace_period","application","delete","reason","api","guilds","integrations","toJSON","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/structures/Integration.js"],"sourcesContent":["'use strict';\n\nconst Base = require('./Base');\nconst IntegrationApplication = require('./IntegrationApplication');\n\n/**\n * The information account for an integration\n * @typedef {Object} IntegrationAccount\n * @property {string} id The id of the account\n * @property {string} name The name of the account\n */\n\n/**\n *  Represents a guild integration.\n */\nclass Integration extends Base {\n  constructor(client, data, guild) {\n    super(client);\n\n    /**\n     * The guild this integration belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n\n    /**\n     * The integration id\n     * @type {Snowflake}\n     */\n    this.id = data.id;\n\n    /**\n     * The integration name\n     * @type {string}\n     */\n    this.name = data.name;\n\n    /**\n     * The integration type (twitch, youtube, etc)\n     * @type {string}\n     */\n    this.type = data.type;\n\n    /**\n     * Whether this integration is enabled\n     * @type {boolean}\n     */\n    this.enabled = data.enabled;\n\n    /**\n     * Whether this integration is syncing\n     * @type {boolean}\n     */\n    this.syncing = data.syncing;\n\n    /**\n     * The role that this integration uses for subscribers\n     * @type {Role}\n     */\n    this.role = this.guild.roles.cache.get(data.role_id);\n\n    if (data.user) {\n      /**\n       * The user for this integration\n       * @type {?User}\n       */\n      this.user = this.client.users._add(data.user);\n    } else {\n      this.user = null;\n    }\n\n    /**\n     * The account integration information\n     * @type {IntegrationAccount}\n     */\n    this.account = data.account;\n\n    /**\n     * The last time this integration was last synced\n     * @type {number}\n     */\n    this.syncedAt = data.synced_at;\n    this._patch(data);\n  }\n\n  /**\n   * All roles that are managed by this integration\n   * @type {Collection<Snowflake, Role>}\n   * @readonly\n   */\n  get roles() {\n    const roles = this.guild.roles.cache;\n    return roles.filter(role => role.tags?.integrationId === this.id);\n  }\n\n  _patch(data) {\n    /**\n     * The behavior of expiring subscribers\n     * @type {number}\n     */\n    this.expireBehavior = data.expire_behavior;\n\n    /**\n     * The grace period before expiring subscribers\n     * @type {number}\n     */\n    this.expireGracePeriod = data.expire_grace_period;\n\n    if ('application' in data) {\n      if (this.application) {\n        this.application._patch(data.application);\n      } else {\n        /**\n         * The application for this integration\n         * @type {?IntegrationApplication}\n         */\n        this.application = new IntegrationApplication(this.client, data.application);\n      }\n    } else if (!this.application) {\n      this.application = null;\n    }\n  }\n\n  /**\n   * Deletes this integration.\n   * @returns {Promise<Integration>}\n   * @param {string} [reason] Reason for deleting this integration\n   */\n  async delete(reason) {\n    await this.client.api.guilds(this.guild.id).integrations(this.id).delete({ reason });\n    return this;\n  }\n\n  toJSON() {\n    return super.toJSON({\n      role: 'roleId',\n      guild: 'guildId',\n      user: 'userId',\n    });\n  }\n}\n\nmodule.exports = Integration;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}