{"ast":null,"code":"'use strict';\n\nconst {\n  Collection\n} = require('@discordjs/collection');\n\nconst CachedManager = require('./CachedManager');\n\nconst {\n  Error\n} = require('../errors');\n\nconst Invite = require('../structures/Invite');\n\nconst DataResolver = require('../util/DataResolver');\n/**\n * Manages API methods for GuildInvites and stores their cache.\n * @extends {CachedManager}\n */\n\n\nclass GuildInviteManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, Invite, iterable);\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n\n    this.guild = guild;\n  }\n  /**\n   * The cache of this Manager\n   * @type {Collection<string, Invite>}\n   * @name GuildInviteManager#cache\n   */\n\n\n  _add(data, cache) {\n    return super._add(data, cache, {\n      id: data.code,\n      extras: [this.guild]\n    });\n  }\n  /**\n   * Data that resolves to give an Invite object. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Resolves an InviteResolvable to an Invite object.\n   * @method resolve\n   * @memberof GuildInviteManager\n   * @instance\n   * @param {InviteResolvable} invite The invite resolvable to resolve\n   * @returns {?Invite}\n   */\n\n  /**\n   * Resolves an InviteResolvable to an invite code string.\n   * @method resolveId\n   * @memberof GuildInviteManager\n   * @instance\n   * @param {InviteResolvable} invite The invite resolvable to resolve\n   * @returns {?string}\n   */\n\n  /**\n   * Options used to fetch a single invite from a guild.\n   * @typedef {Object} FetchInviteOptions\n   * @property {InviteResolvable} code The invite to fetch\n   * @property {boolean} [cache=true] Whether or not to cache the fetched invite\n   * @property {boolean} [force=false] Whether to skip the cache check and request the API\n   */\n\n  /**\n   * Options used to fetch all invites from a guild.\n   * @typedef {Object} FetchInvitesOptions\n   * @property {GuildChannelResolvable} [channelId] The channel to fetch all invites from\n   * @property {boolean} [cache=true] Whether or not to cache the fetched invites\n   */\n\n  /**\n   * Fetches invite(s) from Discord.\n   * @param {InviteResolvable|FetchInviteOptions|FetchInvitesOptions} [options] Options for fetching guild invite(s)\n   * @returns {Promise<Invite|Collection<string, Invite>>}\n   * @example\n   * // Fetch all invites from a guild\n   * guild.invites.fetch()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch all invites from a guild without caching\n   * guild.invites.fetch({ cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch all invites from a channel\n   * guild.invites.fetch({ channelId: '222197033908436994' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single invite\n   * guild.invites.fetch('bRCvFy9')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single invite without checking cache\n   * guild.invites.fetch({ code: 'bRCvFy9', force: true })\n   *   .then(console.log)\n   *   .catch(console.error)\n   * @example\n   * // Fetch a single invite without caching\n   * guild.invites.fetch({ code: 'bRCvFy9', cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  fetch(options) {\n    if (!options) return this._fetchMany();\n\n    if (typeof options === 'string') {\n      const code = DataResolver.resolveInviteCode(options);\n      if (!code) return Promise.reject(new Error('INVITE_RESOLVE_CODE'));\n      return this._fetchSingle({\n        code,\n        cache: true\n      });\n    }\n\n    if (!options.code) {\n      if (options.channelId) {\n        const id = this.guild.channels.resolveId(options.channelId);\n        if (!id) return Promise.reject(new Error('GUILD_CHANNEL_RESOLVE'));\n        return this._fetchChannelMany(id, options.cache);\n      }\n\n      if ('cache' in options) return this._fetchMany(options.cache);\n      return Promise.reject(new Error('INVITE_RESOLVE_CODE'));\n    }\n\n    return this._fetchSingle({ ...options,\n      code: DataResolver.resolveInviteCode(options.code)\n    });\n  }\n\n  async _fetchSingle(_ref) {\n    let {\n      code,\n      cache,\n      force = false\n    } = _ref;\n\n    if (!force) {\n      const existing = this.cache.get(code);\n      if (existing) return existing;\n    }\n\n    const invites = await this._fetchMany(cache);\n    const invite = invites.get(code);\n    if (!invite) throw new Error('INVITE_NOT_FOUND');\n    return invite;\n  }\n\n  async _fetchMany(cache) {\n    const data = await this.client.api.guilds(this.guild.id).invites.get();\n    return data.reduce((col, invite) => col.set(invite.code, this._add(invite, cache)), new Collection());\n  }\n\n  async _fetchChannelMany(channelId, cache) {\n    const data = await this.client.api.channels(channelId).invites.get();\n    return data.reduce((col, invite) => col.set(invite.code, this._add(invite, cache)), new Collection());\n  }\n  /**\n   * Create an invite to the guild from the provided channel.\n   * @param {GuildChannelResolvable} channel The options for creating the invite from a channel.\n   * @param {CreateInviteOptions} [options={}] The options for creating the invite from a channel.\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a selected channel\n   * guild.invites.create('599942732013764608')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n\n\n  async create(channel) {\n    let {\n      temporary = false,\n      maxAge = 86400,\n      maxUses = 0,\n      unique,\n      targetUser,\n      targetApplication,\n      targetType,\n      reason\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const id = this.guild.channels.resolveId(channel);\n    if (!id) throw new Error('GUILD_CHANNEL_RESOLVE');\n    const invite = await this.client.api.channels(id).invites.post({\n      data: {\n        temporary,\n        max_age: maxAge,\n        max_uses: maxUses,\n        unique,\n        target_user_id: this.client.users.resolveId(targetUser),\n        target_application_id: targetApplication?.id ?? targetApplication?.applicationId ?? targetApplication,\n        target_type: targetType\n      },\n      reason\n    });\n    return new Invite(this.client, invite);\n  }\n  /**\n   * Deletes an invite.\n   * @param {InviteResolvable} invite The invite to delete\n   * @param {string} [reason] Reason for deleting the invite\n   * @returns {Promise<void>}\n   */\n\n\n  async delete(invite, reason) {\n    const code = DataResolver.resolveInviteCode(invite);\n    await this.client.api.invites(code).delete({\n      reason\n    });\n  }\n\n}\n\nmodule.exports = GuildInviteManager;","map":{"version":3,"names":["Collection","require","CachedManager","Error","Invite","DataResolver","GuildInviteManager","constructor","guild","iterable","client","_add","data","cache","id","code","extras","fetch","options","_fetchMany","resolveInviteCode","Promise","reject","_fetchSingle","channelId","channels","resolveId","_fetchChannelMany","force","existing","get","invites","invite","api","guilds","reduce","col","set","create","channel","temporary","maxAge","maxUses","unique","targetUser","targetApplication","targetType","reason","post","max_age","max_uses","target_user_id","users","target_application_id","applicationId","target_type","delete","module","exports"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/managers/GuildInviteManager.js"],"sourcesContent":["'use strict';\n\nconst { Collection } = require('@discordjs/collection');\nconst CachedManager = require('./CachedManager');\nconst { Error } = require('../errors');\nconst Invite = require('../structures/Invite');\nconst DataResolver = require('../util/DataResolver');\n\n/**\n * Manages API methods for GuildInvites and stores their cache.\n * @extends {CachedManager}\n */\nclass GuildInviteManager extends CachedManager {\n  constructor(guild, iterable) {\n    super(guild.client, Invite, iterable);\n\n    /**\n     * The guild this Manager belongs to\n     * @type {Guild}\n     */\n    this.guild = guild;\n  }\n\n  /**\n   * The cache of this Manager\n   * @type {Collection<string, Invite>}\n   * @name GuildInviteManager#cache\n   */\n\n  _add(data, cache) {\n    return super._add(data, cache, { id: data.code, extras: [this.guild] });\n  }\n\n  /**\n   * Data that resolves to give an Invite object. This can be:\n   * * An invite code\n   * * An invite URL\n   * @typedef {string} InviteResolvable\n   */\n\n  /**\n   * Resolves an InviteResolvable to an Invite object.\n   * @method resolve\n   * @memberof GuildInviteManager\n   * @instance\n   * @param {InviteResolvable} invite The invite resolvable to resolve\n   * @returns {?Invite}\n   */\n\n  /**\n   * Resolves an InviteResolvable to an invite code string.\n   * @method resolveId\n   * @memberof GuildInviteManager\n   * @instance\n   * @param {InviteResolvable} invite The invite resolvable to resolve\n   * @returns {?string}\n   */\n\n  /**\n   * Options used to fetch a single invite from a guild.\n   * @typedef {Object} FetchInviteOptions\n   * @property {InviteResolvable} code The invite to fetch\n   * @property {boolean} [cache=true] Whether or not to cache the fetched invite\n   * @property {boolean} [force=false] Whether to skip the cache check and request the API\n   */\n\n  /**\n   * Options used to fetch all invites from a guild.\n   * @typedef {Object} FetchInvitesOptions\n   * @property {GuildChannelResolvable} [channelId] The channel to fetch all invites from\n   * @property {boolean} [cache=true] Whether or not to cache the fetched invites\n   */\n\n  /**\n   * Fetches invite(s) from Discord.\n   * @param {InviteResolvable|FetchInviteOptions|FetchInvitesOptions} [options] Options for fetching guild invite(s)\n   * @returns {Promise<Invite|Collection<string, Invite>>}\n   * @example\n   * // Fetch all invites from a guild\n   * guild.invites.fetch()\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch all invites from a guild without caching\n   * guild.invites.fetch({ cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch all invites from a channel\n   * guild.invites.fetch({ channelId: '222197033908436994' })\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single invite\n   * guild.invites.fetch('bRCvFy9')\n   *   .then(console.log)\n   *   .catch(console.error);\n   * @example\n   * // Fetch a single invite without checking cache\n   * guild.invites.fetch({ code: 'bRCvFy9', force: true })\n   *   .then(console.log)\n   *   .catch(console.error)\n   * @example\n   * // Fetch a single invite without caching\n   * guild.invites.fetch({ code: 'bRCvFy9', cache: false })\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  fetch(options) {\n    if (!options) return this._fetchMany();\n    if (typeof options === 'string') {\n      const code = DataResolver.resolveInviteCode(options);\n      if (!code) return Promise.reject(new Error('INVITE_RESOLVE_CODE'));\n      return this._fetchSingle({ code, cache: true });\n    }\n    if (!options.code) {\n      if (options.channelId) {\n        const id = this.guild.channels.resolveId(options.channelId);\n        if (!id) return Promise.reject(new Error('GUILD_CHANNEL_RESOLVE'));\n        return this._fetchChannelMany(id, options.cache);\n      }\n\n      if ('cache' in options) return this._fetchMany(options.cache);\n      return Promise.reject(new Error('INVITE_RESOLVE_CODE'));\n    }\n    return this._fetchSingle({\n      ...options,\n      code: DataResolver.resolveInviteCode(options.code),\n    });\n  }\n\n  async _fetchSingle({ code, cache, force = false }) {\n    if (!force) {\n      const existing = this.cache.get(code);\n      if (existing) return existing;\n    }\n\n    const invites = await this._fetchMany(cache);\n    const invite = invites.get(code);\n    if (!invite) throw new Error('INVITE_NOT_FOUND');\n    return invite;\n  }\n\n  async _fetchMany(cache) {\n    const data = await this.client.api.guilds(this.guild.id).invites.get();\n    return data.reduce((col, invite) => col.set(invite.code, this._add(invite, cache)), new Collection());\n  }\n\n  async _fetchChannelMany(channelId, cache) {\n    const data = await this.client.api.channels(channelId).invites.get();\n    return data.reduce((col, invite) => col.set(invite.code, this._add(invite, cache)), new Collection());\n  }\n\n  /**\n   * Create an invite to the guild from the provided channel.\n   * @param {GuildChannelResolvable} channel The options for creating the invite from a channel.\n   * @param {CreateInviteOptions} [options={}] The options for creating the invite from a channel.\n   * @returns {Promise<Invite>}\n   * @example\n   * // Create an invite to a selected channel\n   * guild.invites.create('599942732013764608')\n   *   .then(console.log)\n   *   .catch(console.error);\n   */\n  async create(\n    channel,\n    { temporary = false, maxAge = 86400, maxUses = 0, unique, targetUser, targetApplication, targetType, reason } = {},\n  ) {\n    const id = this.guild.channels.resolveId(channel);\n    if (!id) throw new Error('GUILD_CHANNEL_RESOLVE');\n\n    const invite = await this.client.api.channels(id).invites.post({\n      data: {\n        temporary,\n        max_age: maxAge,\n        max_uses: maxUses,\n        unique,\n        target_user_id: this.client.users.resolveId(targetUser),\n        target_application_id: targetApplication?.id ?? targetApplication?.applicationId ?? targetApplication,\n        target_type: targetType,\n      },\n      reason,\n    });\n    return new Invite(this.client, invite);\n  }\n\n  /**\n   * Deletes an invite.\n   * @param {InviteResolvable} invite The invite to delete\n   * @param {string} [reason] Reason for deleting the invite\n   * @returns {Promise<void>}\n   */\n  async delete(invite, reason) {\n    const code = DataResolver.resolveInviteCode(invite);\n\n    await this.client.api.invites(code).delete({ reason });\n  }\n}\n\nmodule.exports = GuildInviteManager;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}