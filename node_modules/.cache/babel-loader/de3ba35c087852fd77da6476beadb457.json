{"ast":null,"code":"'use strict';\n\nconst {\n  Events\n} = require('../../../util/Constants');\n\nmodule.exports = (client, _ref) => {\n  let {\n    d: data\n  } = _ref;\n  const channel = client.channels.cache.get(data.channel_id);\n  const time = new Date(data.last_pin_timestamp);\n\n  if (channel && !Number.isNaN(time.getTime())) {\n    // Discord sends null for last_pin_timestamp if the last pinned message was removed\n    channel.lastPinTimestamp = time.getTime() ?? null;\n    /**\n     * Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\n     * not much information can be provided easily here - you need to manually check the pins yourself.\n     * @event Client#channelPinsUpdate\n     * @param {TextBasedChannels} channel The channel that the pins update occurred in\n     * @param {Date} time The time of the pins update\n     */\n\n    client.emit(Events.CHANNEL_PINS_UPDATE, channel, time);\n  }\n};","map":{"version":3,"names":["Events","require","module","exports","client","d","data","channel","channels","cache","get","channel_id","time","Date","last_pin_timestamp","Number","isNaN","getTime","lastPinTimestamp","emit","CHANNEL_PINS_UPDATE"],"sources":["C:/Users/ROUSER6/node_modules/discord.js/src/client/websocket/handlers/CHANNEL_PINS_UPDATE.js"],"sourcesContent":["'use strict';\n\nconst { Events } = require('../../../util/Constants');\n\nmodule.exports = (client, { d: data }) => {\n  const channel = client.channels.cache.get(data.channel_id);\n  const time = new Date(data.last_pin_timestamp);\n\n  if (channel && !Number.isNaN(time.getTime())) {\n    // Discord sends null for last_pin_timestamp if the last pinned message was removed\n    channel.lastPinTimestamp = time.getTime() ?? null;\n\n    /**\n     * Emitted whenever the pins of a channel are updated. Due to the nature of the WebSocket event,\n     * not much information can be provided easily here - you need to manually check the pins yourself.\n     * @event Client#channelPinsUpdate\n     * @param {TextBasedChannels} channel The channel that the pins update occurred in\n     * @param {Date} time The time of the pins update\n     */\n    client.emit(Events.CHANNEL_PINS_UPDATE, channel, time);\n  }\n};\n"],"mappings":"AAAA;;AAEA,MAAM;EAAEA;AAAF,IAAaC,OAAO,CAAC,yBAAD,CAA1B;;AAEAC,MAAM,CAACC,OAAP,GAAiB,CAACC,MAAD,WAAyB;EAAA,IAAhB;IAAEC,CAAC,EAAEC;EAAL,CAAgB;EACxC,MAAMC,OAAO,GAAGH,MAAM,CAACI,QAAP,CAAgBC,KAAhB,CAAsBC,GAAtB,CAA0BJ,IAAI,CAACK,UAA/B,CAAhB;EACA,MAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASP,IAAI,CAACQ,kBAAd,CAAb;;EAEA,IAAIP,OAAO,IAAI,CAACQ,MAAM,CAACC,KAAP,CAAaJ,IAAI,CAACK,OAAL,EAAb,CAAhB,EAA8C;IAC5C;IACAV,OAAO,CAACW,gBAAR,GAA2BN,IAAI,CAACK,OAAL,MAAkB,IAA7C;IAEA;AACJ;AACA;AACA;AACA;AACA;AACA;;IACIb,MAAM,CAACe,IAAP,CAAYnB,MAAM,CAACoB,mBAAnB,EAAwCb,OAAxC,EAAiDK,IAAjD;EACD;AACF,CAjBD"},"metadata":{},"sourceType":"script"}